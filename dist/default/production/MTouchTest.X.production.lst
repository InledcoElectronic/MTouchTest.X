

Microchip Technology PIC PRO Macro Assembler V1.45 build -152302408 
                                                                                               Fri Jan 12 15:42:03 2018

Microchip Technology Omniscient Code Generator v1.45 (PRO mode) build 201711160504
     1                           	processor	12F1572
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	inittext,global,class=CODE,delta=2
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text30,local,class=CODE,merge=1,delta=2
    47                           	psect	text31,local,class=CODE,merge=1,delta=2
    48                           	psect	text32,local,class=CODE,merge=1,delta=2
    49                           	psect	text33,local,class=CODE,merge=1,delta=2
    50                           	psect	text34,local,class=CODE,merge=1,delta=2
    51                           	psect	text35,local,class=CODE,merge=1,delta=2
    52                           	psect	text36,local,class=CODE,merge=1,delta=2
    53                           	psect	text37,local,class=CODE,merge=1,delta=2
    54                           	psect	text38,local,class=CODE,merge=1,delta=2
    55                           	psect	text39,local,class=CODE,merge=1,delta=2
    56                           	psect	text40,local,class=CODE,merge=1,delta=2
    57                           	psect	text41,local,class=CODE,merge=1,delta=2
    58                           	psect	text42,local,class=CODE,merge=1,delta=2
    59                           	psect	text43,local,class=CODE,merge=1,delta=2
    60                           	psect	text44,local,class=CODE,merge=1,delta=2
    61                           	psect	text45,local,class=CODE,merge=1,delta=2
    62                           	psect	text46,local,class=CODE,merge=1,delta=2
    63                           	psect	text47,local,class=CODE,merge=1,delta=2
    64                           	psect	text48,local,class=CODE,merge=1,delta=2
    65                           	psect	text49,local,class=CODE,merge=1,delta=2
    66                           	psect	text50,local,class=CODE,merge=1,delta=2
    67                           	psect	text51,local,class=CODE,merge=1,delta=2
    68                           	psect	text52,local,class=CODE,merge=1,delta=2
    69                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text54,local,class=CODE,merge=1,delta=2
    71                           	psect	text55,local,class=CODE,merge=1,delta=2
    72                           	psect	text56,local,class=CODE,merge=1,delta=2
    73                           	psect	text57,local,class=CODE,merge=1,delta=2,group=1
    74                           	psect	text58,local,class=CODE,merge=1,delta=2
    75                           	psect	text59,local,class=CODE,merge=1,delta=2
    76                           	psect	text60,local,class=CODE,merge=1,delta=2
    77                           	psect	intentry,global,class=CODE,delta=2
    78                           	psect	text62,local,class=CODE,merge=1,delta=2
    79                           	psect	text63,local,class=CODE,merge=1,delta=2
    80                           	psect	swtext1,local,class=CONST,delta=2
    81                           	psect	swtext2,local,class=CONST,delta=2
    82                           	psect	text64,local,class=CODE,merge=1,delta=2
    83                           	psect	text65,local,class=CODE,merge=1,delta=2
    84                           	psect	text66,local,class=CODE,merge=1,delta=2
    85                           	psect	text67,local,class=CODE,merge=1,delta=2
    86                           	psect	text68,local,class=CODE,merge=1,delta=2
    87                           	psect	text69,local,class=CODE,merge=1,delta=2
    88                           	psect	text70,local,class=CODE,merge=1,delta=2
    89                           	psect	pa_nodes0,global,class=CODE,delta=2
    90                           	dabs	1,0x7E,2
    91  0000                     
    92                           ; Version 1.45
    93                           ; Generated 16/11/2017 GMT
    94                           ; 
    95                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    96                           ; All rights reserved.
    97                           ; 
    98                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    99                           ; 
   100                           ; Redistribution and use in source and binary forms, with or without modification, are
   101                           ; permitted provided that the following conditions are met:
   102                           ; 
   103                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   104                           ;        conditions and the following disclaimer.
   105                           ; 
   106                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   107                           ;        of conditions and the following disclaimer in the documentation and/or other
   108                           ;        materials provided with the distribution.
   109                           ; 
   110                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   111                           ;        software without specific prior written permission.
   112                           ; 
   113                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   114                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   115                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   116                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   117                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   118                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   119                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   120                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   121                           ; 
   122                           ; 
   123                           ; Code-generator required, PIC12F1572 Definitions
   124                           ; 
   125                           ; SFR Addresses
   126  0000                     	;# 
   127  0001                     	;# 
   128  0002                     	;# 
   129  0003                     	;# 
   130  0004                     	;# 
   131  0005                     	;# 
   132  0006                     	;# 
   133  0007                     	;# 
   134  0008                     	;# 
   135  0009                     	;# 
   136  000A                     	;# 
   137  000B                     	;# 
   138  000C                     	;# 
   139  0011                     	;# 
   140  0012                     	;# 
   141  0013                     	;# 
   142  0015                     	;# 
   143  0016                     	;# 
   144  0016                     	;# 
   145  0017                     	;# 
   146  0018                     	;# 
   147  0019                     	;# 
   148  001A                     	;# 
   149  001B                     	;# 
   150  001C                     	;# 
   151  008C                     	;# 
   152  0091                     	;# 
   153  0092                     	;# 
   154  0093                     	;# 
   155  0095                     	;# 
   156  0096                     	;# 
   157  0097                     	;# 
   158  0098                     	;# 
   159  0099                     	;# 
   160  009A                     	;# 
   161  009B                     	;# 
   162  009B                     	;# 
   163  009C                     	;# 
   164  009D                     	;# 
   165  009E                     	;# 
   166  009F                     	;# 
   167  010C                     	;# 
   168  0111                     	;# 
   169  0112                     	;# 
   170  0115                     	;# 
   171  0116                     	;# 
   172  0117                     	;# 
   173  0118                     	;# 
   174  0119                     	;# 
   175  011D                     	;# 
   176  011D                     	;# 
   177  018C                     	;# 
   178  0191                     	;# 
   179  0191                     	;# 
   180  0192                     	;# 
   181  0193                     	;# 
   182  0193                     	;# 
   183  0194                     	;# 
   184  0195                     	;# 
   185  0196                     	;# 
   186  0197                     	;# 
   187  0199                     	;# 
   188  019A                     	;# 
   189  019B                     	;# 
   190  019B                     	;# 
   191  019C                     	;# 
   192  019D                     	;# 
   193  019E                     	;# 
   194  019F                     	;# 
   195  020C                     	;# 
   196  028C                     	;# 
   197  030C                     	;# 
   198  038C                     	;# 
   199  0391                     	;# 
   200  0392                     	;# 
   201  0393                     	;# 
   202  0691                     	;# 
   203  0692                     	;# 
   204  0693                     	;# 
   205  0694                     	;# 
   206  0695                     	;# 
   207  0D8E                     	;# 
   208  0D8F                     	;# 
   209  0D90                     	;# 
   210  0D91                     	;# 
   211  0D91                     	;# 
   212  0D92                     	;# 
   213  0D93                     	;# 
   214  0D93                     	;# 
   215  0D94                     	;# 
   216  0D95                     	;# 
   217  0D95                     	;# 
   218  0D96                     	;# 
   219  0D97                     	;# 
   220  0D97                     	;# 
   221  0D98                     	;# 
   222  0D99                     	;# 
   223  0D99                     	;# 
   224  0D9A                     	;# 
   225  0D9B                     	;# 
   226  0D9C                     	;# 
   227  0D9C                     	;# 
   228  0D9D                     	;# 
   229  0D9D                     	;# 
   230  0D9E                     	;# 
   231  0D9F                     	;# 
   232  0DA0                     	;# 
   233  0DA1                     	;# 
   234  0DA1                     	;# 
   235  0DA2                     	;# 
   236  0DA3                     	;# 
   237  0DA3                     	;# 
   238  0DA4                     	;# 
   239  0DA5                     	;# 
   240  0DA5                     	;# 
   241  0DA6                     	;# 
   242  0DA7                     	;# 
   243  0DA7                     	;# 
   244  0DA8                     	;# 
   245  0DA9                     	;# 
   246  0DA9                     	;# 
   247  0DAA                     	;# 
   248  0DAB                     	;# 
   249  0DAC                     	;# 
   250  0DAC                     	;# 
   251  0DAD                     	;# 
   252  0DAD                     	;# 
   253  0DAE                     	;# 
   254  0DAF                     	;# 
   255  0DB0                     	;# 
   256  0DB1                     	;# 
   257  0DB1                     	;# 
   258  0DB2                     	;# 
   259  0DB3                     	;# 
   260  0DB3                     	;# 
   261  0DB4                     	;# 
   262  0DB5                     	;# 
   263  0DB5                     	;# 
   264  0DB6                     	;# 
   265  0DB7                     	;# 
   266  0DB7                     	;# 
   267  0DB8                     	;# 
   268  0DB9                     	;# 
   269  0DB9                     	;# 
   270  0DBA                     	;# 
   271  0DBB                     	;# 
   272  0DBC                     	;# 
   273  0DBC                     	;# 
   274  0DBD                     	;# 
   275  0DBD                     	;# 
   276  0DBE                     	;# 
   277  0DBF                     	;# 
   278  0DC0                     	;# 
   279  0FE4                     	;# 
   280  0FE5                     	;# 
   281  0FE6                     	;# 
   282  0FE7                     	;# 
   283  0FE8                     	;# 
   284  0FE8                     	;# 
   285  0FE9                     	;# 
   286  0FEA                     	;# 
   287  0FEA                     	;# 
   288  0FEB                     	;# 
   289  0FED                     	;# 
   290  0FEE                     	;# 
   291  0FEE                     	;# 
   292  0FEF                     	;# 
   293  0000                     	;# 
   294  0001                     	;# 
   295  0002                     	;# 
   296  0003                     	;# 
   297  0004                     	;# 
   298  0005                     	;# 
   299  0006                     	;# 
   300  0007                     	;# 
   301  0008                     	;# 
   302  0009                     	;# 
   303  000A                     	;# 
   304  000B                     	;# 
   305  000C                     	;# 
   306  0011                     	;# 
   307  0012                     	;# 
   308  0013                     	;# 
   309  0015                     	;# 
   310  0016                     	;# 
   311  0016                     	;# 
   312  0017                     	;# 
   313  0018                     	;# 
   314  0019                     	;# 
   315  001A                     	;# 
   316  001B                     	;# 
   317  001C                     	;# 
   318  008C                     	;# 
   319  0091                     	;# 
   320  0092                     	;# 
   321  0093                     	;# 
   322  0095                     	;# 
   323  0096                     	;# 
   324  0097                     	;# 
   325  0098                     	;# 
   326  0099                     	;# 
   327  009A                     	;# 
   328  009B                     	;# 
   329  009B                     	;# 
   330  009C                     	;# 
   331  009D                     	;# 
   332  009E                     	;# 
   333  009F                     	;# 
   334  010C                     	;# 
   335  0111                     	;# 
   336  0112                     	;# 
   337  0115                     	;# 
   338  0116                     	;# 
   339  0117                     	;# 
   340  0118                     	;# 
   341  0119                     	;# 
   342  011D                     	;# 
   343  011D                     	;# 
   344  018C                     	;# 
   345  0191                     	;# 
   346  0191                     	;# 
   347  0192                     	;# 
   348  0193                     	;# 
   349  0193                     	;# 
   350  0194                     	;# 
   351  0195                     	;# 
   352  0196                     	;# 
   353  0197                     	;# 
   354  0199                     	;# 
   355  019A                     	;# 
   356  019B                     	;# 
   357  019B                     	;# 
   358  019C                     	;# 
   359  019D                     	;# 
   360  019E                     	;# 
   361  019F                     	;# 
   362  020C                     	;# 
   363  028C                     	;# 
   364  030C                     	;# 
   365  038C                     	;# 
   366  0391                     	;# 
   367  0392                     	;# 
   368  0393                     	;# 
   369  0691                     	;# 
   370  0692                     	;# 
   371  0693                     	;# 
   372  0694                     	;# 
   373  0695                     	;# 
   374  0D8E                     	;# 
   375  0D8F                     	;# 
   376  0D90                     	;# 
   377  0D91                     	;# 
   378  0D91                     	;# 
   379  0D92                     	;# 
   380  0D93                     	;# 
   381  0D93                     	;# 
   382  0D94                     	;# 
   383  0D95                     	;# 
   384  0D95                     	;# 
   385  0D96                     	;# 
   386  0D97                     	;# 
   387  0D97                     	;# 
   388  0D98                     	;# 
   389  0D99                     	;# 
   390  0D99                     	;# 
   391  0D9A                     	;# 
   392  0D9B                     	;# 
   393  0D9C                     	;# 
   394  0D9C                     	;# 
   395  0D9D                     	;# 
   396  0D9D                     	;# 
   397  0D9E                     	;# 
   398  0D9F                     	;# 
   399  0DA0                     	;# 
   400  0DA1                     	;# 
   401  0DA1                     	;# 
   402  0DA2                     	;# 
   403  0DA3                     	;# 
   404  0DA3                     	;# 
   405  0DA4                     	;# 
   406  0DA5                     	;# 
   407  0DA5                     	;# 
   408  0DA6                     	;# 
   409  0DA7                     	;# 
   410  0DA7                     	;# 
   411  0DA8                     	;# 
   412  0DA9                     	;# 
   413  0DA9                     	;# 
   414  0DAA                     	;# 
   415  0DAB                     	;# 
   416  0DAC                     	;# 
   417  0DAC                     	;# 
   418  0DAD                     	;# 
   419  0DAD                     	;# 
   420  0DAE                     	;# 
   421  0DAF                     	;# 
   422  0DB0                     	;# 
   423  0DB1                     	;# 
   424  0DB1                     	;# 
   425  0DB2                     	;# 
   426  0DB3                     	;# 
   427  0DB3                     	;# 
   428  0DB4                     	;# 
   429  0DB5                     	;# 
   430  0DB5                     	;# 
   431  0DB6                     	;# 
   432  0DB7                     	;# 
   433  0DB7                     	;# 
   434  0DB8                     	;# 
   435  0DB9                     	;# 
   436  0DB9                     	;# 
   437  0DBA                     	;# 
   438  0DBB                     	;# 
   439  0DBC                     	;# 
   440  0DBC                     	;# 
   441  0DBD                     	;# 
   442  0DBD                     	;# 
   443  0DBE                     	;# 
   444  0DBF                     	;# 
   445  0DC0                     	;# 
   446  0FE4                     	;# 
   447  0FE5                     	;# 
   448  0FE6                     	;# 
   449  0FE7                     	;# 
   450  0FE8                     	;# 
   451  0FE8                     	;# 
   452  0FE9                     	;# 
   453  0FEA                     	;# 
   454  0FEA                     	;# 
   455  0FEB                     	;# 
   456  0FED                     	;# 
   457  0FEE                     	;# 
   458  0FEE                     	;# 
   459  0FEF                     	;# 
   460  0000                     	;# 
   461  0001                     	;# 
   462  0002                     	;# 
   463  0003                     	;# 
   464  0004                     	;# 
   465  0005                     	;# 
   466  0006                     	;# 
   467  0007                     	;# 
   468  0008                     	;# 
   469  0009                     	;# 
   470  000A                     	;# 
   471  000B                     	;# 
   472  000C                     	;# 
   473  0011                     	;# 
   474  0012                     	;# 
   475  0013                     	;# 
   476  0015                     	;# 
   477  0016                     	;# 
   478  0016                     	;# 
   479  0017                     	;# 
   480  0018                     	;# 
   481  0019                     	;# 
   482  001A                     	;# 
   483  001B                     	;# 
   484  001C                     	;# 
   485  008C                     	;# 
   486  0091                     	;# 
   487  0092                     	;# 
   488  0093                     	;# 
   489  0095                     	;# 
   490  0096                     	;# 
   491  0097                     	;# 
   492  0098                     	;# 
   493  0099                     	;# 
   494  009A                     	;# 
   495  009B                     	;# 
   496  009B                     	;# 
   497  009C                     	;# 
   498  009D                     	;# 
   499  009E                     	;# 
   500  009F                     	;# 
   501  010C                     	;# 
   502  0111                     	;# 
   503  0112                     	;# 
   504  0115                     	;# 
   505  0116                     	;# 
   506  0117                     	;# 
   507  0118                     	;# 
   508  0119                     	;# 
   509  011D                     	;# 
   510  011D                     	;# 
   511  018C                     	;# 
   512  0191                     	;# 
   513  0191                     	;# 
   514  0192                     	;# 
   515  0193                     	;# 
   516  0193                     	;# 
   517  0194                     	;# 
   518  0195                     	;# 
   519  0196                     	;# 
   520  0197                     	;# 
   521  0199                     	;# 
   522  019A                     	;# 
   523  019B                     	;# 
   524  019B                     	;# 
   525  019C                     	;# 
   526  019D                     	;# 
   527  019E                     	;# 
   528  019F                     	;# 
   529  020C                     	;# 
   530  028C                     	;# 
   531  030C                     	;# 
   532  038C                     	;# 
   533  0391                     	;# 
   534  0392                     	;# 
   535  0393                     	;# 
   536  0691                     	;# 
   537  0692                     	;# 
   538  0693                     	;# 
   539  0694                     	;# 
   540  0695                     	;# 
   541  0D8E                     	;# 
   542  0D8F                     	;# 
   543  0D90                     	;# 
   544  0D91                     	;# 
   545  0D91                     	;# 
   546  0D92                     	;# 
   547  0D93                     	;# 
   548  0D93                     	;# 
   549  0D94                     	;# 
   550  0D95                     	;# 
   551  0D95                     	;# 
   552  0D96                     	;# 
   553  0D97                     	;# 
   554  0D97                     	;# 
   555  0D98                     	;# 
   556  0D99                     	;# 
   557  0D99                     	;# 
   558  0D9A                     	;# 
   559  0D9B                     	;# 
   560  0D9C                     	;# 
   561  0D9C                     	;# 
   562  0D9D                     	;# 
   563  0D9D                     	;# 
   564  0D9E                     	;# 
   565  0D9F                     	;# 
   566  0DA0                     	;# 
   567  0DA1                     	;# 
   568  0DA1                     	;# 
   569  0DA2                     	;# 
   570  0DA3                     	;# 
   571  0DA3                     	;# 
   572  0DA4                     	;# 
   573  0DA5                     	;# 
   574  0DA5                     	;# 
   575  0DA6                     	;# 
   576  0DA7                     	;# 
   577  0DA7                     	;# 
   578  0DA8                     	;# 
   579  0DA9                     	;# 
   580  0DA9                     	;# 
   581  0DAA                     	;# 
   582  0DAB                     	;# 
   583  0DAC                     	;# 
   584  0DAC                     	;# 
   585  0DAD                     	;# 
   586  0DAD                     	;# 
   587  0DAE                     	;# 
   588  0DAF                     	;# 
   589  0DB0                     	;# 
   590  0DB1                     	;# 
   591  0DB1                     	;# 
   592  0DB2                     	;# 
   593  0DB3                     	;# 
   594  0DB3                     	;# 
   595  0DB4                     	;# 
   596  0DB5                     	;# 
   597  0DB5                     	;# 
   598  0DB6                     	;# 
   599  0DB7                     	;# 
   600  0DB7                     	;# 
   601  0DB8                     	;# 
   602  0DB9                     	;# 
   603  0DB9                     	;# 
   604  0DBA                     	;# 
   605  0DBB                     	;# 
   606  0DBC                     	;# 
   607  0DBC                     	;# 
   608  0DBD                     	;# 
   609  0DBD                     	;# 
   610  0DBE                     	;# 
   611  0DBF                     	;# 
   612  0DC0                     	;# 
   613  0FE4                     	;# 
   614  0FE5                     	;# 
   615  0FE6                     	;# 
   616  0FE7                     	;# 
   617  0FE8                     	;# 
   618  0FE8                     	;# 
   619  0FE9                     	;# 
   620  0FEA                     	;# 
   621  0FEA                     	;# 
   622  0FEB                     	;# 
   623  0FED                     	;# 
   624  0FEE                     	;# 
   625  0FEE                     	;# 
   626  0FEF                     	;# 
   627  0000                     	;# 
   628  0001                     	;# 
   629  0002                     	;# 
   630  0003                     	;# 
   631  0004                     	;# 
   632  0005                     	;# 
   633  0006                     	;# 
   634  0007                     	;# 
   635  0008                     	;# 
   636  0009                     	;# 
   637  000A                     	;# 
   638  000B                     	;# 
   639  000C                     	;# 
   640  0011                     	;# 
   641  0012                     	;# 
   642  0013                     	;# 
   643  0015                     	;# 
   644  0016                     	;# 
   645  0016                     	;# 
   646  0017                     	;# 
   647  0018                     	;# 
   648  0019                     	;# 
   649  001A                     	;# 
   650  001B                     	;# 
   651  001C                     	;# 
   652  008C                     	;# 
   653  0091                     	;# 
   654  0092                     	;# 
   655  0093                     	;# 
   656  0095                     	;# 
   657  0096                     	;# 
   658  0097                     	;# 
   659  0098                     	;# 
   660  0099                     	;# 
   661  009A                     	;# 
   662  009B                     	;# 
   663  009B                     	;# 
   664  009C                     	;# 
   665  009D                     	;# 
   666  009E                     	;# 
   667  009F                     	;# 
   668  010C                     	;# 
   669  0111                     	;# 
   670  0112                     	;# 
   671  0115                     	;# 
   672  0116                     	;# 
   673  0117                     	;# 
   674  0118                     	;# 
   675  0119                     	;# 
   676  011D                     	;# 
   677  011D                     	;# 
   678  018C                     	;# 
   679  0191                     	;# 
   680  0191                     	;# 
   681  0192                     	;# 
   682  0193                     	;# 
   683  0193                     	;# 
   684  0194                     	;# 
   685  0195                     	;# 
   686  0196                     	;# 
   687  0197                     	;# 
   688  0199                     	;# 
   689  019A                     	;# 
   690  019B                     	;# 
   691  019B                     	;# 
   692  019C                     	;# 
   693  019D                     	;# 
   694  019E                     	;# 
   695  019F                     	;# 
   696  020C                     	;# 
   697  028C                     	;# 
   698  030C                     	;# 
   699  038C                     	;# 
   700  0391                     	;# 
   701  0392                     	;# 
   702  0393                     	;# 
   703  0691                     	;# 
   704  0692                     	;# 
   705  0693                     	;# 
   706  0694                     	;# 
   707  0695                     	;# 
   708  0D8E                     	;# 
   709  0D8F                     	;# 
   710  0D90                     	;# 
   711  0D91                     	;# 
   712  0D91                     	;# 
   713  0D92                     	;# 
   714  0D93                     	;# 
   715  0D93                     	;# 
   716  0D94                     	;# 
   717  0D95                     	;# 
   718  0D95                     	;# 
   719  0D96                     	;# 
   720  0D97                     	;# 
   721  0D97                     	;# 
   722  0D98                     	;# 
   723  0D99                     	;# 
   724  0D99                     	;# 
   725  0D9A                     	;# 
   726  0D9B                     	;# 
   727  0D9C                     	;# 
   728  0D9C                     	;# 
   729  0D9D                     	;# 
   730  0D9D                     	;# 
   731  0D9E                     	;# 
   732  0D9F                     	;# 
   733  0DA0                     	;# 
   734  0DA1                     	;# 
   735  0DA1                     	;# 
   736  0DA2                     	;# 
   737  0DA3                     	;# 
   738  0DA3                     	;# 
   739  0DA4                     	;# 
   740  0DA5                     	;# 
   741  0DA5                     	;# 
   742  0DA6                     	;# 
   743  0DA7                     	;# 
   744  0DA7                     	;# 
   745  0DA8                     	;# 
   746  0DA9                     	;# 
   747  0DA9                     	;# 
   748  0DAA                     	;# 
   749  0DAB                     	;# 
   750  0DAC                     	;# 
   751  0DAC                     	;# 
   752  0DAD                     	;# 
   753  0DAD                     	;# 
   754  0DAE                     	;# 
   755  0DAF                     	;# 
   756  0DB0                     	;# 
   757  0DB1                     	;# 
   758  0DB1                     	;# 
   759  0DB2                     	;# 
   760  0DB3                     	;# 
   761  0DB3                     	;# 
   762  0DB4                     	;# 
   763  0DB5                     	;# 
   764  0DB5                     	;# 
   765  0DB6                     	;# 
   766  0DB7                     	;# 
   767  0DB7                     	;# 
   768  0DB8                     	;# 
   769  0DB9                     	;# 
   770  0DB9                     	;# 
   771  0DBA                     	;# 
   772  0DBB                     	;# 
   773  0DBC                     	;# 
   774  0DBC                     	;# 
   775  0DBD                     	;# 
   776  0DBD                     	;# 
   777  0DBE                     	;# 
   778  0DBF                     	;# 
   779  0DC0                     	;# 
   780  0FE4                     	;# 
   781  0FE5                     	;# 
   782  0FE6                     	;# 
   783  0FE7                     	;# 
   784  0FE8                     	;# 
   785  0FE8                     	;# 
   786  0FE9                     	;# 
   787  0FEA                     	;# 
   788  0FEA                     	;# 
   789  0FEB                     	;# 
   790  0FED                     	;# 
   791  0FEE                     	;# 
   792  0FEE                     	;# 
   793  0FEF                     	;# 
   794  0000                     	;# 
   795  0001                     	;# 
   796  0002                     	;# 
   797  0003                     	;# 
   798  0004                     	;# 
   799  0005                     	;# 
   800  0006                     	;# 
   801  0007                     	;# 
   802  0008                     	;# 
   803  0009                     	;# 
   804  000A                     	;# 
   805  000B                     	;# 
   806  000C                     	;# 
   807  0011                     	;# 
   808  0012                     	;# 
   809  0013                     	;# 
   810  0015                     	;# 
   811  0016                     	;# 
   812  0016                     	;# 
   813  0017                     	;# 
   814  0018                     	;# 
   815  0019                     	;# 
   816  001A                     	;# 
   817  001B                     	;# 
   818  001C                     	;# 
   819  008C                     	;# 
   820  0091                     	;# 
   821  0092                     	;# 
   822  0093                     	;# 
   823  0095                     	;# 
   824  0096                     	;# 
   825  0097                     	;# 
   826  0098                     	;# 
   827  0099                     	;# 
   828  009A                     	;# 
   829  009B                     	;# 
   830  009B                     	;# 
   831  009C                     	;# 
   832  009D                     	;# 
   833  009E                     	;# 
   834  009F                     	;# 
   835  010C                     	;# 
   836  0111                     	;# 
   837  0112                     	;# 
   838  0115                     	;# 
   839  0116                     	;# 
   840  0117                     	;# 
   841  0118                     	;# 
   842  0119                     	;# 
   843  011D                     	;# 
   844  011D                     	;# 
   845  018C                     	;# 
   846  0191                     	;# 
   847  0191                     	;# 
   848  0192                     	;# 
   849  0193                     	;# 
   850  0193                     	;# 
   851  0194                     	;# 
   852  0195                     	;# 
   853  0196                     	;# 
   854  0197                     	;# 
   855  0199                     	;# 
   856  019A                     	;# 
   857  019B                     	;# 
   858  019B                     	;# 
   859  019C                     	;# 
   860  019D                     	;# 
   861  019E                     	;# 
   862  019F                     	;# 
   863  020C                     	;# 
   864  028C                     	;# 
   865  030C                     	;# 
   866  038C                     	;# 
   867  0391                     	;# 
   868  0392                     	;# 
   869  0393                     	;# 
   870  0691                     	;# 
   871  0692                     	;# 
   872  0693                     	;# 
   873  0694                     	;# 
   874  0695                     	;# 
   875  0D8E                     	;# 
   876  0D8F                     	;# 
   877  0D90                     	;# 
   878  0D91                     	;# 
   879  0D91                     	;# 
   880  0D92                     	;# 
   881  0D93                     	;# 
   882  0D93                     	;# 
   883  0D94                     	;# 
   884  0D95                     	;# 
   885  0D95                     	;# 
   886  0D96                     	;# 
   887  0D97                     	;# 
   888  0D97                     	;# 
   889  0D98                     	;# 
   890  0D99                     	;# 
   891  0D99                     	;# 
   892  0D9A                     	;# 
   893  0D9B                     	;# 
   894  0D9C                     	;# 
   895  0D9C                     	;# 
   896  0D9D                     	;# 
   897  0D9D                     	;# 
   898  0D9E                     	;# 
   899  0D9F                     	;# 
   900  0DA0                     	;# 
   901  0DA1                     	;# 
   902  0DA1                     	;# 
   903  0DA2                     	;# 
   904  0DA3                     	;# 
   905  0DA3                     	;# 
   906  0DA4                     	;# 
   907  0DA5                     	;# 
   908  0DA5                     	;# 
   909  0DA6                     	;# 
   910  0DA7                     	;# 
   911  0DA7                     	;# 
   912  0DA8                     	;# 
   913  0DA9                     	;# 
   914  0DA9                     	;# 
   915  0DAA                     	;# 
   916  0DAB                     	;# 
   917  0DAC                     	;# 
   918  0DAC                     	;# 
   919  0DAD                     	;# 
   920  0DAD                     	;# 
   921  0DAE                     	;# 
   922  0DAF                     	;# 
   923  0DB0                     	;# 
   924  0DB1                     	;# 
   925  0DB1                     	;# 
   926  0DB2                     	;# 
   927  0DB3                     	;# 
   928  0DB3                     	;# 
   929  0DB4                     	;# 
   930  0DB5                     	;# 
   931  0DB5                     	;# 
   932  0DB6                     	;# 
   933  0DB7                     	;# 
   934  0DB7                     	;# 
   935  0DB8                     	;# 
   936  0DB9                     	;# 
   937  0DB9                     	;# 
   938  0DBA                     	;# 
   939  0DBB                     	;# 
   940  0DBC                     	;# 
   941  0DBC                     	;# 
   942  0DBD                     	;# 
   943  0DBD                     	;# 
   944  0DBE                     	;# 
   945  0DBF                     	;# 
   946  0DC0                     	;# 
   947  0FE4                     	;# 
   948  0FE5                     	;# 
   949  0FE6                     	;# 
   950  0FE7                     	;# 
   951  0FE8                     	;# 
   952  0FE8                     	;# 
   953  0FE9                     	;# 
   954  0FEA                     	;# 
   955  0FEA                     	;# 
   956  0FEB                     	;# 
   957  0FED                     	;# 
   958  0FEE                     	;# 
   959  0FEE                     	;# 
   960  0FEF                     	;# 
   961  0000                     	;# 
   962  0001                     	;# 
   963  0002                     	;# 
   964  0003                     	;# 
   965  0004                     	;# 
   966  0005                     	;# 
   967  0006                     	;# 
   968  0007                     	;# 
   969  0008                     	;# 
   970  0009                     	;# 
   971  000A                     	;# 
   972  000B                     	;# 
   973  000C                     	;# 
   974  0011                     	;# 
   975  0012                     	;# 
   976  0013                     	;# 
   977  0015                     	;# 
   978  0016                     	;# 
   979  0016                     	;# 
   980  0017                     	;# 
   981  0018                     	;# 
   982  0019                     	;# 
   983  001A                     	;# 
   984  001B                     	;# 
   985  001C                     	;# 
   986  008C                     	;# 
   987  0091                     	;# 
   988  0092                     	;# 
   989  0093                     	;# 
   990  0095                     	;# 
   991  0096                     	;# 
   992  0097                     	;# 
   993  0098                     	;# 
   994  0099                     	;# 
   995  009A                     	;# 
   996  009B                     	;# 
   997  009B                     	;# 
   998  009C                     	;# 
   999  009D                     	;# 
  1000  009E                     	;# 
  1001  009F                     	;# 
  1002  010C                     	;# 
  1003  0111                     	;# 
  1004  0112                     	;# 
  1005  0115                     	;# 
  1006  0116                     	;# 
  1007  0117                     	;# 
  1008  0118                     	;# 
  1009  0119                     	;# 
  1010  011D                     	;# 
  1011  011D                     	;# 
  1012  018C                     	;# 
  1013  0191                     	;# 
  1014  0191                     	;# 
  1015  0192                     	;# 
  1016  0193                     	;# 
  1017  0193                     	;# 
  1018  0194                     	;# 
  1019  0195                     	;# 
  1020  0196                     	;# 
  1021  0197                     	;# 
  1022  0199                     	;# 
  1023  019A                     	;# 
  1024  019B                     	;# 
  1025  019B                     	;# 
  1026  019C                     	;# 
  1027  019D                     	;# 
  1028  019E                     	;# 
  1029  019F                     	;# 
  1030  020C                     	;# 
  1031  028C                     	;# 
  1032  030C                     	;# 
  1033  038C                     	;# 
  1034  0391                     	;# 
  1035  0392                     	;# 
  1036  0393                     	;# 
  1037  0691                     	;# 
  1038  0692                     	;# 
  1039  0693                     	;# 
  1040  0694                     	;# 
  1041  0695                     	;# 
  1042  0D8E                     	;# 
  1043  0D8F                     	;# 
  1044  0D90                     	;# 
  1045  0D91                     	;# 
  1046  0D91                     	;# 
  1047  0D92                     	;# 
  1048  0D93                     	;# 
  1049  0D93                     	;# 
  1050  0D94                     	;# 
  1051  0D95                     	;# 
  1052  0D95                     	;# 
  1053  0D96                     	;# 
  1054  0D97                     	;# 
  1055  0D97                     	;# 
  1056  0D98                     	;# 
  1057  0D99                     	;# 
  1058  0D99                     	;# 
  1059  0D9A                     	;# 
  1060  0D9B                     	;# 
  1061  0D9C                     	;# 
  1062  0D9C                     	;# 
  1063  0D9D                     	;# 
  1064  0D9D                     	;# 
  1065  0D9E                     	;# 
  1066  0D9F                     	;# 
  1067  0DA0                     	;# 
  1068  0DA1                     	;# 
  1069  0DA1                     	;# 
  1070  0DA2                     	;# 
  1071  0DA3                     	;# 
  1072  0DA3                     	;# 
  1073  0DA4                     	;# 
  1074  0DA5                     	;# 
  1075  0DA5                     	;# 
  1076  0DA6                     	;# 
  1077  0DA7                     	;# 
  1078  0DA7                     	;# 
  1079  0DA8                     	;# 
  1080  0DA9                     	;# 
  1081  0DA9                     	;# 
  1082  0DAA                     	;# 
  1083  0DAB                     	;# 
  1084  0DAC                     	;# 
  1085  0DAC                     	;# 
  1086  0DAD                     	;# 
  1087  0DAD                     	;# 
  1088  0DAE                     	;# 
  1089  0DAF                     	;# 
  1090  0DB0                     	;# 
  1091  0DB1                     	;# 
  1092  0DB1                     	;# 
  1093  0DB2                     	;# 
  1094  0DB3                     	;# 
  1095  0DB3                     	;# 
  1096  0DB4                     	;# 
  1097  0DB5                     	;# 
  1098  0DB5                     	;# 
  1099  0DB6                     	;# 
  1100  0DB7                     	;# 
  1101  0DB7                     	;# 
  1102  0DB8                     	;# 
  1103  0DB9                     	;# 
  1104  0DB9                     	;# 
  1105  0DBA                     	;# 
  1106  0DBB                     	;# 
  1107  0DBC                     	;# 
  1108  0DBC                     	;# 
  1109  0DBD                     	;# 
  1110  0DBD                     	;# 
  1111  0DBE                     	;# 
  1112  0DBF                     	;# 
  1113  0DC0                     	;# 
  1114  0FE4                     	;# 
  1115  0FE5                     	;# 
  1116  0FE6                     	;# 
  1117  0FE7                     	;# 
  1118  0FE8                     	;# 
  1119  0FE8                     	;# 
  1120  0FE9                     	;# 
  1121  0FEA                     	;# 
  1122  0FEA                     	;# 
  1123  0FEB                     	;# 
  1124  0FED                     	;# 
  1125  0FEE                     	;# 
  1126  0FEE                     	;# 
  1127  0FEF                     	;# 
  1128  0000                     	;# 
  1129  0001                     	;# 
  1130  0002                     	;# 
  1131  0003                     	;# 
  1132  0004                     	;# 
  1133  0005                     	;# 
  1134  0006                     	;# 
  1135  0007                     	;# 
  1136  0008                     	;# 
  1137  0009                     	;# 
  1138  000A                     	;# 
  1139  000B                     	;# 
  1140  000C                     	;# 
  1141  0011                     	;# 
  1142  0012                     	;# 
  1143  0013                     	;# 
  1144  0015                     	;# 
  1145  0016                     	;# 
  1146  0016                     	;# 
  1147  0017                     	;# 
  1148  0018                     	;# 
  1149  0019                     	;# 
  1150  001A                     	;# 
  1151  001B                     	;# 
  1152  001C                     	;# 
  1153  008C                     	;# 
  1154  0091                     	;# 
  1155  0092                     	;# 
  1156  0093                     	;# 
  1157  0095                     	;# 
  1158  0096                     	;# 
  1159  0097                     	;# 
  1160  0098                     	;# 
  1161  0099                     	;# 
  1162  009A                     	;# 
  1163  009B                     	;# 
  1164  009B                     	;# 
  1165  009C                     	;# 
  1166  009D                     	;# 
  1167  009E                     	;# 
  1168  009F                     	;# 
  1169  010C                     	;# 
  1170  0111                     	;# 
  1171  0112                     	;# 
  1172  0115                     	;# 
  1173  0116                     	;# 
  1174  0117                     	;# 
  1175  0118                     	;# 
  1176  0119                     	;# 
  1177  011D                     	;# 
  1178  011D                     	;# 
  1179  018C                     	;# 
  1180  0191                     	;# 
  1181  0191                     	;# 
  1182  0192                     	;# 
  1183  0193                     	;# 
  1184  0193                     	;# 
  1185  0194                     	;# 
  1186  0195                     	;# 
  1187  0196                     	;# 
  1188  0197                     	;# 
  1189  0199                     	;# 
  1190  019A                     	;# 
  1191  019B                     	;# 
  1192  019B                     	;# 
  1193  019C                     	;# 
  1194  019D                     	;# 
  1195  019E                     	;# 
  1196  019F                     	;# 
  1197  020C                     	;# 
  1198  028C                     	;# 
  1199  030C                     	;# 
  1200  038C                     	;# 
  1201  0391                     	;# 
  1202  0392                     	;# 
  1203  0393                     	;# 
  1204  0691                     	;# 
  1205  0692                     	;# 
  1206  0693                     	;# 
  1207  0694                     	;# 
  1208  0695                     	;# 
  1209  0D8E                     	;# 
  1210  0D8F                     	;# 
  1211  0D90                     	;# 
  1212  0D91                     	;# 
  1213  0D91                     	;# 
  1214  0D92                     	;# 
  1215  0D93                     	;# 
  1216  0D93                     	;# 
  1217  0D94                     	;# 
  1218  0D95                     	;# 
  1219  0D95                     	;# 
  1220  0D96                     	;# 
  1221  0D97                     	;# 
  1222  0D97                     	;# 
  1223  0D98                     	;# 
  1224  0D99                     	;# 
  1225  0D99                     	;# 
  1226  0D9A                     	;# 
  1227  0D9B                     	;# 
  1228  0D9C                     	;# 
  1229  0D9C                     	;# 
  1230  0D9D                     	;# 
  1231  0D9D                     	;# 
  1232  0D9E                     	;# 
  1233  0D9F                     	;# 
  1234  0DA0                     	;# 
  1235  0DA1                     	;# 
  1236  0DA1                     	;# 
  1237  0DA2                     	;# 
  1238  0DA3                     	;# 
  1239  0DA3                     	;# 
  1240  0DA4                     	;# 
  1241  0DA5                     	;# 
  1242  0DA5                     	;# 
  1243  0DA6                     	;# 
  1244  0DA7                     	;# 
  1245  0DA7                     	;# 
  1246  0DA8                     	;# 
  1247  0DA9                     	;# 
  1248  0DA9                     	;# 
  1249  0DAA                     	;# 
  1250  0DAB                     	;# 
  1251  0DAC                     	;# 
  1252  0DAC                     	;# 
  1253  0DAD                     	;# 
  1254  0DAD                     	;# 
  1255  0DAE                     	;# 
  1256  0DAF                     	;# 
  1257  0DB0                     	;# 
  1258  0DB1                     	;# 
  1259  0DB1                     	;# 
  1260  0DB2                     	;# 
  1261  0DB3                     	;# 
  1262  0DB3                     	;# 
  1263  0DB4                     	;# 
  1264  0DB5                     	;# 
  1265  0DB5                     	;# 
  1266  0DB6                     	;# 
  1267  0DB7                     	;# 
  1268  0DB7                     	;# 
  1269  0DB8                     	;# 
  1270  0DB9                     	;# 
  1271  0DB9                     	;# 
  1272  0DBA                     	;# 
  1273  0DBB                     	;# 
  1274  0DBC                     	;# 
  1275  0DBC                     	;# 
  1276  0DBD                     	;# 
  1277  0DBD                     	;# 
  1278  0DBE                     	;# 
  1279  0DBF                     	;# 
  1280  0DC0                     	;# 
  1281  0FE4                     	;# 
  1282  0FE5                     	;# 
  1283  0FE6                     	;# 
  1284  0FE7                     	;# 
  1285  0FE8                     	;# 
  1286  0FE8                     	;# 
  1287  0FE9                     	;# 
  1288  0FEA                     	;# 
  1289  0FEA                     	;# 
  1290  0FEB                     	;# 
  1291  0FED                     	;# 
  1292  0FEE                     	;# 
  1293  0FEE                     	;# 
  1294  0FEF                     	;# 
  1295  0000                     	;# 
  1296  0001                     	;# 
  1297  0002                     	;# 
  1298  0003                     	;# 
  1299  0004                     	;# 
  1300  0005                     	;# 
  1301  0006                     	;# 
  1302  0007                     	;# 
  1303  0008                     	;# 
  1304  0009                     	;# 
  1305  000A                     	;# 
  1306  000B                     	;# 
  1307  000C                     	;# 
  1308  0011                     	;# 
  1309  0012                     	;# 
  1310  0013                     	;# 
  1311  0015                     	;# 
  1312  0016                     	;# 
  1313  0016                     	;# 
  1314  0017                     	;# 
  1315  0018                     	;# 
  1316  0019                     	;# 
  1317  001A                     	;# 
  1318  001B                     	;# 
  1319  001C                     	;# 
  1320  008C                     	;# 
  1321  0091                     	;# 
  1322  0092                     	;# 
  1323  0093                     	;# 
  1324  0095                     	;# 
  1325  0096                     	;# 
  1326  0097                     	;# 
  1327  0098                     	;# 
  1328  0099                     	;# 
  1329  009A                     	;# 
  1330  009B                     	;# 
  1331  009B                     	;# 
  1332  009C                     	;# 
  1333  009D                     	;# 
  1334  009E                     	;# 
  1335  009F                     	;# 
  1336  010C                     	;# 
  1337  0111                     	;# 
  1338  0112                     	;# 
  1339  0115                     	;# 
  1340  0116                     	;# 
  1341  0117                     	;# 
  1342  0118                     	;# 
  1343  0119                     	;# 
  1344  011D                     	;# 
  1345  011D                     	;# 
  1346  018C                     	;# 
  1347  0191                     	;# 
  1348  0191                     	;# 
  1349  0192                     	;# 
  1350  0193                     	;# 
  1351  0193                     	;# 
  1352  0194                     	;# 
  1353  0195                     	;# 
  1354  0196                     	;# 
  1355  0197                     	;# 
  1356  0199                     	;# 
  1357  019A                     	;# 
  1358  019B                     	;# 
  1359  019B                     	;# 
  1360  019C                     	;# 
  1361  019D                     	;# 
  1362  019E                     	;# 
  1363  019F                     	;# 
  1364  020C                     	;# 
  1365  028C                     	;# 
  1366  030C                     	;# 
  1367  038C                     	;# 
  1368  0391                     	;# 
  1369  0392                     	;# 
  1370  0393                     	;# 
  1371  0691                     	;# 
  1372  0692                     	;# 
  1373  0693                     	;# 
  1374  0694                     	;# 
  1375  0695                     	;# 
  1376  0D8E                     	;# 
  1377  0D8F                     	;# 
  1378  0D90                     	;# 
  1379  0D91                     	;# 
  1380  0D91                     	;# 
  1381  0D92                     	;# 
  1382  0D93                     	;# 
  1383  0D93                     	;# 
  1384  0D94                     	;# 
  1385  0D95                     	;# 
  1386  0D95                     	;# 
  1387  0D96                     	;# 
  1388  0D97                     	;# 
  1389  0D97                     	;# 
  1390  0D98                     	;# 
  1391  0D99                     	;# 
  1392  0D99                     	;# 
  1393  0D9A                     	;# 
  1394  0D9B                     	;# 
  1395  0D9C                     	;# 
  1396  0D9C                     	;# 
  1397  0D9D                     	;# 
  1398  0D9D                     	;# 
  1399  0D9E                     	;# 
  1400  0D9F                     	;# 
  1401  0DA0                     	;# 
  1402  0DA1                     	;# 
  1403  0DA1                     	;# 
  1404  0DA2                     	;# 
  1405  0DA3                     	;# 
  1406  0DA3                     	;# 
  1407  0DA4                     	;# 
  1408  0DA5                     	;# 
  1409  0DA5                     	;# 
  1410  0DA6                     	;# 
  1411  0DA7                     	;# 
  1412  0DA7                     	;# 
  1413  0DA8                     	;# 
  1414  0DA9                     	;# 
  1415  0DA9                     	;# 
  1416  0DAA                     	;# 
  1417  0DAB                     	;# 
  1418  0DAC                     	;# 
  1419  0DAC                     	;# 
  1420  0DAD                     	;# 
  1421  0DAD                     	;# 
  1422  0DAE                     	;# 
  1423  0DAF                     	;# 
  1424  0DB0                     	;# 
  1425  0DB1                     	;# 
  1426  0DB1                     	;# 
  1427  0DB2                     	;# 
  1428  0DB3                     	;# 
  1429  0DB3                     	;# 
  1430  0DB4                     	;# 
  1431  0DB5                     	;# 
  1432  0DB5                     	;# 
  1433  0DB6                     	;# 
  1434  0DB7                     	;# 
  1435  0DB7                     	;# 
  1436  0DB8                     	;# 
  1437  0DB9                     	;# 
  1438  0DB9                     	;# 
  1439  0DBA                     	;# 
  1440  0DBB                     	;# 
  1441  0DBC                     	;# 
  1442  0DBC                     	;# 
  1443  0DBD                     	;# 
  1444  0DBD                     	;# 
  1445  0DBE                     	;# 
  1446  0DBF                     	;# 
  1447  0DC0                     	;# 
  1448  0FE4                     	;# 
  1449  0FE5                     	;# 
  1450  0FE6                     	;# 
  1451  0FE7                     	;# 
  1452  0FE8                     	;# 
  1453  0FE8                     	;# 
  1454  0FE9                     	;# 
  1455  0FEA                     	;# 
  1456  0FEA                     	;# 
  1457  0FEB                     	;# 
  1458  0FED                     	;# 
  1459  0FEE                     	;# 
  1460  0FEE                     	;# 
  1461  0FEF                     	;# 
  1462  0000                     	;# 
  1463  0001                     	;# 
  1464  0002                     	;# 
  1465  0003                     	;# 
  1466  0004                     	;# 
  1467  0005                     	;# 
  1468  0006                     	;# 
  1469  0007                     	;# 
  1470  0008                     	;# 
  1471  0009                     	;# 
  1472  000A                     	;# 
  1473  000B                     	;# 
  1474  000C                     	;# 
  1475  0011                     	;# 
  1476  0012                     	;# 
  1477  0013                     	;# 
  1478  0015                     	;# 
  1479  0016                     	;# 
  1480  0016                     	;# 
  1481  0017                     	;# 
  1482  0018                     	;# 
  1483  0019                     	;# 
  1484  001A                     	;# 
  1485  001B                     	;# 
  1486  001C                     	;# 
  1487  008C                     	;# 
  1488  0091                     	;# 
  1489  0092                     	;# 
  1490  0093                     	;# 
  1491  0095                     	;# 
  1492  0096                     	;# 
  1493  0097                     	;# 
  1494  0098                     	;# 
  1495  0099                     	;# 
  1496  009A                     	;# 
  1497  009B                     	;# 
  1498  009B                     	;# 
  1499  009C                     	;# 
  1500  009D                     	;# 
  1501  009E                     	;# 
  1502  009F                     	;# 
  1503  010C                     	;# 
  1504  0111                     	;# 
  1505  0112                     	;# 
  1506  0115                     	;# 
  1507  0116                     	;# 
  1508  0117                     	;# 
  1509  0118                     	;# 
  1510  0119                     	;# 
  1511  011D                     	;# 
  1512  011D                     	;# 
  1513  018C                     	;# 
  1514  0191                     	;# 
  1515  0191                     	;# 
  1516  0192                     	;# 
  1517  0193                     	;# 
  1518  0193                     	;# 
  1519  0194                     	;# 
  1520  0195                     	;# 
  1521  0196                     	;# 
  1522  0197                     	;# 
  1523  0199                     	;# 
  1524  019A                     	;# 
  1525  019B                     	;# 
  1526  019B                     	;# 
  1527  019C                     	;# 
  1528  019D                     	;# 
  1529  019E                     	;# 
  1530  019F                     	;# 
  1531  020C                     	;# 
  1532  028C                     	;# 
  1533  030C                     	;# 
  1534  038C                     	;# 
  1535  0391                     	;# 
  1536  0392                     	;# 
  1537  0393                     	;# 
  1538  0691                     	;# 
  1539  0692                     	;# 
  1540  0693                     	;# 
  1541  0694                     	;# 
  1542  0695                     	;# 
  1543  0D8E                     	;# 
  1544  0D8F                     	;# 
  1545  0D90                     	;# 
  1546  0D91                     	;# 
  1547  0D91                     	;# 
  1548  0D92                     	;# 
  1549  0D93                     	;# 
  1550  0D93                     	;# 
  1551  0D94                     	;# 
  1552  0D95                     	;# 
  1553  0D95                     	;# 
  1554  0D96                     	;# 
  1555  0D97                     	;# 
  1556  0D97                     	;# 
  1557  0D98                     	;# 
  1558  0D99                     	;# 
  1559  0D99                     	;# 
  1560  0D9A                     	;# 
  1561  0D9B                     	;# 
  1562  0D9C                     	;# 
  1563  0D9C                     	;# 
  1564  0D9D                     	;# 
  1565  0D9D                     	;# 
  1566  0D9E                     	;# 
  1567  0D9F                     	;# 
  1568  0DA0                     	;# 
  1569  0DA1                     	;# 
  1570  0DA1                     	;# 
  1571  0DA2                     	;# 
  1572  0DA3                     	;# 
  1573  0DA3                     	;# 
  1574  0DA4                     	;# 
  1575  0DA5                     	;# 
  1576  0DA5                     	;# 
  1577  0DA6                     	;# 
  1578  0DA7                     	;# 
  1579  0DA7                     	;# 
  1580  0DA8                     	;# 
  1581  0DA9                     	;# 
  1582  0DA9                     	;# 
  1583  0DAA                     	;# 
  1584  0DAB                     	;# 
  1585  0DAC                     	;# 
  1586  0DAC                     	;# 
  1587  0DAD                     	;# 
  1588  0DAD                     	;# 
  1589  0DAE                     	;# 
  1590  0DAF                     	;# 
  1591  0DB0                     	;# 
  1592  0DB1                     	;# 
  1593  0DB1                     	;# 
  1594  0DB2                     	;# 
  1595  0DB3                     	;# 
  1596  0DB3                     	;# 
  1597  0DB4                     	;# 
  1598  0DB5                     	;# 
  1599  0DB5                     	;# 
  1600  0DB6                     	;# 
  1601  0DB7                     	;# 
  1602  0DB7                     	;# 
  1603  0DB8                     	;# 
  1604  0DB9                     	;# 
  1605  0DB9                     	;# 
  1606  0DBA                     	;# 
  1607  0DBB                     	;# 
  1608  0DBC                     	;# 
  1609  0DBC                     	;# 
  1610  0DBD                     	;# 
  1611  0DBD                     	;# 
  1612  0DBE                     	;# 
  1613  0DBF                     	;# 
  1614  0DC0                     	;# 
  1615  0FE4                     	;# 
  1616  0FE5                     	;# 
  1617  0FE6                     	;# 
  1618  0FE7                     	;# 
  1619  0FE8                     	;# 
  1620  0FE8                     	;# 
  1621  0FE9                     	;# 
  1622  0FEA                     	;# 
  1623  0FEA                     	;# 
  1624  0FEB                     	;# 
  1625  0FED                     	;# 
  1626  0FEE                     	;# 
  1627  0FEE                     	;# 
  1628  0FEF                     	;# 
  1629                           
  1630 ;; Function _EUSART_ReceiveInterruptHandler_Default is unused but had its address taken
  1631  0000                     
  1632                           	psect	idataBANK0
  1633  05EF                     __pidataBANK0:	
  1634                           
  1635                           ;initializer for _Button_StateMachine
  1636  05EF  346B               	retlw	low _Button_State_Initializing
  1637  05F0  3403               	retlw	high _Button_State_Initializing
  1638  05F1  340C               	retlw	low _Button_State_NotPressed
  1639  05F2  3402               	retlw	high _Button_State_NotPressed
  1640  05F3  3465               	retlw	low _Button_State_Pressed
  1641  05F4  3404               	retlw	high _Button_State_Pressed
  1642                           
  1643                           ;initializer for _callback_notPressed
  1644  05F5  34C6               	retlw	low _Button_DefaultCallback
  1645  05F6  3407               	retlw	high _Button_DefaultCallback
  1646                           
  1647                           ;initializer for _callback_pressed
  1648  05F7  34C6               	retlw	low _Button_DefaultCallback
  1649  05F8  3407               	retlw	high _Button_DefaultCallback
  1650                           
  1651                           ;initializer for _Sensor_scanB
  1652  05F9  340D               	retlw	low _MTOUCH_CVD_ScanB_0
  1653  05FA  3405               	retlw	high _MTOUCH_CVD_ScanB_0
  1654                           
  1655                           ;initializer for _Sensor_scanA
  1656  05FB  3432               	retlw	low _MTOUCH_CVD_ScanA_0
  1657  05FC  3405               	retlw	high _MTOUCH_CVD_ScanA_0
  1658                           
  1659                           ;initializer for _callback_sampled
  1660  05FD  34C4               	retlw	low _Sensor_DefaultCallback
  1661  05FE  3407               	retlw	high _Sensor_DefaultCallback
  1662                           
  1663                           ;initializer for _sample_period
  1664  05FF  34C8               	retlw	200
  1665                           
  1666                           ;initializer for _mtouch_sensor
  1667  0600  3400               	retlw	0
  1668  0601  3432               	retlw	low _MTOUCH_CVD_ScanA_0
  1669  0602  3405               	retlw	high _MTOUCH_CVD_ScanA_0
  1670  0603  340D               	retlw	low _MTOUCH_CVD_ScanB_0
  1671  0604  3405               	retlw	high _MTOUCH_CVD_ScanB_0
  1672  0605  3420               	retlw	32
  1673  0606  3400               	retlw	0
  1674  0607  3400               	retlw	0
  1675  0608  3400               	retlw	0
  1676                           
  1677                           	psect	stringtext1
  1678  0798                     __pstringtext1:	
  1679  0798                     Sensor_Scanfrequency_Evaluation@frequency_hop:	
  1680  0798  3403               	retlw	3
  1681  0799  340D               	retlw	13
  1682  079A  340E               	retlw	14
  1683  079B  3414               	retlw	20
  1684  079C  340D               	retlw	13
  1685  079D                     __end_ofSensor_Scanfrequency_Evaluation@frequency_hop:	
  1686                           
  1687                           	psect	stringtext2
  1688  063A                     __pstringtext2:	
  1689  063A                     _mtouch_button_init:	
  1690  063A  3400               	retlw	0
  1691  063B  3400               	retlw	0
  1692  063C  3488               	retlw	136
  1693  063D  3413               	retlw	19
  1694  063E  3400               	retlw	0
  1695  063F  3400               	retlw	0
  1696  0640  3400               	retlw	0
  1697  0641  3400               	retlw	0
  1698  0642  3400               	retlw	0
  1699  0643  3400               	retlw	0
  1700  0644  3400               	retlw	0
  1701  0645  3400               	retlw	0
  1702  0646  3400               	retlw	0
  1703  0647  3400               	retlw	0
  1704  0648  3400               	retlw	0
  1705  0649  3400               	retlw	0
  1706  064A  3400               	retlw	0
  1707  064B  3400               	retlw	0
  1708  064C  3400               	retlw	0
  1709  064D  3458               	retlw	88
  1710  064E  3402               	retlw	2
  1711  064F  3401               	retlw	1
  1712  0650                     __end_of_mtouch_button_init:	
  1713  000B                     _INTCONbits	set	11
  1714  0011                     _PIR1bits	set	17
  1715  001A                     _TMR2	set	26
  1716  001C                     _T2CON	set	28
  1717  001B                     _PR2	set	27
  1718  001C                     _T2CONbits	set	28
  1719  005F                     _GIE	set	95
  1720  009B                     _ADRES	set	155
  1721  009F                     _ADCON2	set	159
  1722  009E                     _ADCON1	set	158
  1723  009D                     _ADCON0	set	157
  1724  008C                     _TRISAbits	set	140
  1725  008C                     _TRISA	set	140
  1726  009A                     _OSCSTATbits	set	154
  1727  0099                     _OSCCON	set	153
  1728  0091                     _PIE1bits	set	145
  1729  010C                     _LATAbits	set	268
  1730  010C                     _LATA	set	268
  1731  011D                     _APFCON	set	285
  1732  019B                     _SPBRG	set	411
  1733  018C                     _ANSELAbits	set	396
  1734  018C                     _ANSELA	set	396
  1735  019A                     _TXREG	set	410
  1736  019E                     _TXSTA	set	414
  1737  019D                     _RCSTA	set	413
  1738  019F                     _BAUDCON	set	415
  1739  020C                     _WPUAbits	set	524
  1740  020C                     _WPUA	set	524
  1741                           
  1742                           ; #config settings
  1743  0000                     
  1744                           	psect	cinit
  1745  001B                     start_initialization:	
  1746  001B                     __initialization:	
  1747                           
  1748                           ; Initialize objects allocated to BANK0
  1749  001B  30EF               	movlw	low __pidataBANK0
  1750  001C  0084               	movwf	4
  1751  001D  3085               	movlw	(high __pidataBANK0)| (0+128)
  1752  001E  0085               	movwf	5
  1753  001F  303C               	movlw	low __pdataBANK0
  1754  0020  0086               	movwf	6
  1755  0021  3000               	movlw	high __pdataBANK0
  1756  0022  0087               	movwf	7
  1757  0023  301A               	movlw	26
  1758  0024  2786               	fcall	init_ram
  1759  0025  3056               	movlw	low __pbssBANK0
  1760                           
  1761                           ; Clear objects allocated to COMMON
  1762  0026  01F8               	clrf	__pbssCOMMON& (0+127)
  1763  0027  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  1764  0028  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  1765  0029  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  1766  002A  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  1767                           
  1768                           ; Clear objects allocated to BANK0
  1769  002B  0084               	movwf	4
  1770  002C  3000               	movlw	high __pbssBANK0
  1771  002D  0085               	movwf	5
  1772  002E  300B               	movlw	11
  1773  002F  278C               	fcall	clear_ram0
  1774                           
  1775                           ; Clear objects allocated to BANK1
  1776  0030  30A0               	movlw	low __pbssBANK1
  1777  0031  0084               	movwf	4
  1778  0032  3000               	movlw	high __pbssBANK1
  1779  0033  0085               	movwf	5
  1780  0034  3036               	movlw	54
  1781  0035  278C               	fcall	clear_ram0
  1782  0036                     end_of_initialization:	
  1783                           ;End of C runtime variable initialization code
  1784                           
  1785  0036                     __end_of__initialization:	
  1786  0036  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  1787  0037  0020               	movlb	0
  1788  0038  2E23               	ljmp	_main	;jump to C main() function
  1789                           
  1790                           	psect	bssCOMMON
  1791  0078                     __pbssCOMMON:	
  1792  0078                     _packet_counter:	
  1793  0078                     	ds	1
  1794  0079                     _currentScannSensor:	
  1795  0079                     	ds	1
  1796  007A                     _txHead:	
  1797  007A                     	ds	1
  1798  007B                     _txRemain:	
  1799  007B                     	ds	1
  1800  007C                     _txTail:	
  1801  007C                     	ds	1
  1802                           
  1803                           	psect	bssBANK0
  1804  0056                     __pbssBANK0:	
  1805  0056                     Sensor_Acq_ExecuteScan@last_b:	
  1806  0056                     	ds	2
  1807  0058                     Sensor_Acq_ExecuteScan@last_a:	
  1808  0058                     	ds	2
  1809  005A                     _packet_noise:	
  1810  005A                     	ds	2
  1811  005C                     _packet_sample:	
  1812  005C                     	ds	2
  1813  005E                     _tmr2_isr_handler:	
  1814  005E                     	ds	2
  1815  0060                     _sensor_globalFlags:	
  1816  0060                     	ds	1
  1817                           
  1818                           	psect	dataBANK0
  1819  003C                     __pdataBANK0:	
  1820  003C                     _Button_StateMachine:	
  1821  003C                     	ds	6
  1822  0042                     _callback_notPressed:	
  1823  0042                     	ds	2
  1824  0044                     _callback_pressed:	
  1825  0044                     	ds	2
  1826  0046                     _Sensor_scanB:	
  1827  0046                     	ds	2
  1828  0048                     _Sensor_scanA:	
  1829  0048                     	ds	2
  1830  004A                     _callback_sampled:	
  1831  004A                     	ds	2
  1832  004C                     _sample_period:	
  1833  004C                     	ds	1
  1834  004D                     _mtouch_sensor:	
  1835  004D                     	ds	9
  1836                           
  1837                           	psect	bssBANK1
  1838  00A0                     __pbssBANK1:	
  1839  00A0                     _txBuf:	
  1840  00A0                     	ds	32
  1841  00C0                     _mtouch_button:	
  1842  00C0                     	ds	22
  1843                           
  1844                           	psect	inittext
  1845  0786                     init_ram:	
  1846  0786  00FE               	movwf	126
  1847  0787                     initloop:	
  1848  0787  0012               	moviw fsr0++
  1849  0788  001E               	movwi fsr1++
  1850  0789  0BFE               	decfsz	126,f
  1851  078A  2F87               	goto	initloop
  1852  078B  3400               	retlw	0
  1853                           
  1854                           	psect	clrtext
  1855  078C                     clear_ram0:	
  1856                           ;	Called with FSR0 containing the base address, and
  1857                           ;	WREG with the size to clear
  1858                           
  1859  078C  0064               	clrwdt	;clear the watchdog before getting into this loop
  1860  078D                     clrloop0:	
  1861  078D  0180               	clrf	0	;clear RAM location pointed to by FSR
  1862  078E  3101               	addfsr 0,1
  1863  078F  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1864  0790  2F8D               	goto	clrloop0	;have we reached the end yet?
  1865  0791  3400               	retlw	0	;all done for this memory range, return
  1866                           
  1867                           	psect	cstackCOMMON
  1868  0070                     __pcstackCOMMON:	
  1869  0070                     ?_TMR2_InterruptHandler_Default:	
  1870  0070                     ??_TMR2_InterruptHandler_Default:	
  1871                           ; 1 bytes @ 0x0
  1872                           
  1873  0070                     ?_MTOUCH_Sensor_Enable:	
  1874                           ; 1 bytes @ 0x0
  1875                           
  1876  0070                     ?_Sensor_Sampled_Reset:	
  1877                           ; 1 bytes @ 0x0
  1878                           
  1879  0070                     ?_Sensor_Service:	
  1880                           ; 1 bytes @ 0x0
  1881                           
  1882  0070                     ?_Sensor_Acquisition:	
  1883                           ; 1 bytes @ 0x0
  1884                           
  1885  0070                     ?_Sensor_RawSample_Update:	
  1886                           ; 1 bytes @ 0x0
  1887                           
  1888  0070                     ?_Sensor_setSampled:	
  1889                           ; 1 bytes @ 0x0
  1890                           
  1891  0070                     ?_Sensor_isEnabled:	
  1892                           ; 1 bytes @ 0x0
  1893                           
  1894  0070                     ?_Sensor_Acq_ExecutePacket:	
  1895                           ; 1 bytes @ 0x0
  1896                           
  1897  0070                     ?_Sensor_setActive:	
  1898                           ; 1 bytes @ 0x0
  1899                           
  1900  0070                     ?_Sensor_Scanfrequency_Evaluation:	
  1901                           ; 1 bytes @ 0x0
  1902                           
  1903  0070                     ?_Sensor_setInactive:	
  1904                           ; 1 bytes @ 0x0
  1905                           
  1906  0070                     ?_Sensor_setScanFunction:	
  1907                           ; 1 bytes @ 0x0
  1908                           
  1909  0070                     ?_Sensor_Acq_ExecuteScan:	
  1910                           ; 1 bytes @ 0x0
  1911                           
  1912  0070                     ?_Button_Service:	
  1913                           ; 1 bytes @ 0x0
  1914                           
  1915  0070                     ?_Button_Reading_Update:	
  1916                           ; 1 bytes @ 0x0
  1917                           
  1918  0070                     ?_Button_Deviation_Update:	
  1919                           ; 1 bytes @ 0x0
  1920                           
  1921  0070                     ?_Button_Baseline_Initialize:	
  1922                           ; 1 bytes @ 0x0
  1923                           
  1924  0070                     ?_Button_Baseline_Update:	
  1925                           ; 1 bytes @ 0x0
  1926                           
  1927  0070                     ?_MTOUCH_Tick:	
  1928                           ; 1 bytes @ 0x0
  1929                           
  1930  0070                     ?_EUSART_Initialize:	
  1931                           ; 1 bytes @ 0x0
  1932                           
  1933  0070                     ?_EUSART_Write:	
  1934                           ; 1 bytes @ 0x0
  1935                           
  1936  0070                     ?_EUSART_Transmit_ISR:	
  1937                           ; 1 bytes @ 0x0
  1938                           
  1939  0070                     ??_EUSART_Transmit_ISR:	
  1940                           ; 1 bytes @ 0x0
  1941                           
  1942  0070                     ?_TMR2_Initialize:	
  1943                           ; 1 bytes @ 0x0
  1944                           
  1945  0070                     ?_TMR2_ISR:	
  1946                           ; 1 bytes @ 0x0
  1947                           
  1948  0070                     ?_OSC_Initialize:	
  1949                           ; 1 bytes @ 0x0
  1950                           
  1951  0070                     ?_PIN_Initialize:	
  1952                           ; 1 bytes @ 0x0
  1953                           
  1954  0070                     ?_MTOUCH_CVD_ScanA_0:	
  1955                           ; 1 bytes @ 0x0
  1956                           
  1957  0070                     ??_MTOUCH_CVD_ScanA_0:	
  1958                           ; 1 bytes @ 0x0
  1959                           
  1960  0070                     ?_MTOUCH_CVD_ScanB_0:	
  1961                           ; 1 bytes @ 0x0
  1962                           
  1963  0070                     ??_MTOUCH_CVD_ScanB_0:	
  1964                           ; 1 bytes @ 0x0
  1965                           
  1966  0070                     ?tmr2@TMR2_StartTimer:	
  1967                           ; 1 bytes @ 0x0
  1968                           
  1969  0070                     ?tmr2@TMR2_StopTimer:	
  1970                           ; 1 bytes @ 0x0
  1971                           
  1972  0070                     ?tmr2@TMR2_LoadPeriodRegister:	
  1973                           ; 1 bytes @ 0x0
  1974                           
  1975  0070                     ?_MTOUCH_Sensor_Initialize:	
  1976                           ; 1 bytes @ 0x0
  1977                           
  1978  0070                     ?_MTOUCH_Sensor_InitializeAll:	
  1979                           ; 1 bytes @ 0x0
  1980                           
  1981  0070                     ?_MTOUCH_Sensor_Scan_Initialize:	
  1982                           ; 1 bytes @ 0x0
  1983                           
  1984  0070                     ?_MTOUCH_Sensor_SampleAll:	
  1985                           ; 1 bytes @ 0x0
  1986                           
  1987  0070                     ?_MTOUCH_Sensor_NotifyInterruptOccurred:	
  1988                           ; 1 bytes @ 0x0
  1989                           
  1990  0070                     ??_MTOUCH_Sensor_NotifyInterruptOccurred:	
  1991                           ; 1 bytes @ 0x0
  1992                           
  1993  0070                     ?_MTOUCH_Sensor_isCalibrated:	
  1994                           ; 1 bytes @ 0x0
  1995                           
  1996  0070                     ?_MTOUCH_Sensor_Calibrate:	
  1997                           ; 1 bytes @ 0x0
  1998                           
  1999  0070                     ?_MTOUCH_Sensor_Sampled_ResetAll:	
  2000                           ; 1 bytes @ 0x0
  2001                           
  2002  0070                     ?_MTOUCH_Sensor_wasSampled:	
  2003                           ; 1 bytes @ 0x0
  2004                           
  2005  0070                     ?_MTOUCH_Button_Initialize:	
  2006                           ; 1 bytes @ 0x0
  2007                           
  2008  0070                     ?_MTOUCH_Button_InitializeAll:	
  2009                           ; 1 bytes @ 0x0
  2010                           
  2011  0070                     ?_MTOUCH_Button_ServiceAll:	
  2012                           ; 1 bytes @ 0x0
  2013                           
  2014  0070                     ?_MTOUCH_Initialize:	
  2015                           ; 1 bytes @ 0x0
  2016                           
  2017  0070                     ?_MTOUCH_Service_Mainloop:	
  2018                           ; 1 bytes @ 0x0
  2019                           
  2020  0070                     ?_SYSTEM_Initialize:	
  2021                           ; 1 bytes @ 0x0
  2022                           
  2023  0070                     ?_INTERRUPT_Manager:	
  2024                           ; 1 bytes @ 0x0
  2025                           
  2026  0070                     ?_main:	
  2027                           ; 1 bytes @ 0x0
  2028                           
  2029  0070                     ?i1___bmul:	
  2030                           ; 1 bytes @ 0x0
  2031                           
  2032  0070                     ?i1_abs:	
  2033                           ; 1 bytes @ 0x0
  2034                           
  2035  0070                     MTOUCH_Sensor_isCalibrated@sensor:	
  2036                           ; 2 bytes @ 0x0
  2037                           
  2038  0070                     MTOUCH_Sensor_Calibrate@sensor:	
  2039                           ; 1 bytes @ 0x0
  2040                           
  2041  0070                     i1___bmul@multiplicand:	
  2042                           ; 1 bytes @ 0x0
  2043                           
  2044  0070                     i1abs@a:	
  2045                           ; 1 bytes @ 0x0
  2046                           
  2047                           
  2048                           ; 2 bytes @ 0x0
  2049  0070                     	ds	1
  2050  0071                     ??i1___bmul:	
  2051  0071                     i1___bmul@multiplier:	
  2052                           ; 1 bytes @ 0x1
  2053                           
  2054                           
  2055                           ; 1 bytes @ 0x1
  2056  0071                     	ds	1
  2057  0072                     ??i1_abs:	
  2058  0072                     i1___bmul@product:	
  2059                           ; 1 bytes @ 0x2
  2060                           
  2061                           
  2062                           ; 1 bytes @ 0x2
  2063  0072                     	ds	2
  2064  0074                     ??_Sensor_Acq_ExecuteScan:	
  2065                           
  2066                           ; 1 bytes @ 0x4
  2067  0074                     	ds	2
  2068  0076                     Sensor_Acq_ExecuteScan@result:	
  2069                           
  2070                           ; 2 bytes @ 0x6
  2071  0076                     	ds	2
  2072  0078                     ??_TMR2_ISR:	
  2073  0078                     ??_INTERRUPT_Manager:	
  2074                           ; 1 bytes @ 0x8
  2075                           
  2076                           
  2077                           	psect	cstackBANK0
  2078  0020                     __pcstackBANK0:	
  2079                           ; 1 bytes @ 0x8
  2080                           
  2081  0020                     ??_Sensor_Sampled_Reset:	
  2082  0020                     ??_Sensor_RawSample_Update:	
  2083                           ; 1 bytes @ 0x0
  2084                           
  2085  0020                     ??_Sensor_setSampled:	
  2086                           ; 1 bytes @ 0x0
  2087                           
  2088  0020                     ??_Sensor_isEnabled:	
  2089                           ; 1 bytes @ 0x0
  2090                           
  2091  0020                     ??_Sensor_setActive:	
  2092                           ; 1 bytes @ 0x0
  2093                           
  2094  0020                     ??_Sensor_setInactive:	
  2095                           ; 1 bytes @ 0x0
  2096                           
  2097  0020                     ??_Sensor_setScanFunction:	
  2098                           ; 1 bytes @ 0x0
  2099                           
  2100  0020                     ?_Button_DefaultCallback:	
  2101                           ; 1 bytes @ 0x0
  2102                           
  2103  0020                     ??_Button_Deviation_Update:	
  2104                           ; 1 bytes @ 0x0
  2105                           
  2106  0020                     ??_Button_Baseline_Update:	
  2107                           ; 1 bytes @ 0x0
  2108                           
  2109  0020                     ??_MTOUCH_Tick:	
  2110                           ; 1 bytes @ 0x0
  2111                           
  2112  0020                     ??_EUSART_Initialize:	
  2113                           ; 1 bytes @ 0x0
  2114                           
  2115  0020                     ??_EUSART_Write:	
  2116                           ; 1 bytes @ 0x0
  2117                           
  2118  0020                     ??_TMR2_Initialize:	
  2119                           ; 1 bytes @ 0x0
  2120                           
  2121  0020                     ?_TMR2_SetInterruptHandler:	
  2122                           ; 1 bytes @ 0x0
  2123                           
  2124  0020                     ??_OSC_Initialize:	
  2125                           ; 1 bytes @ 0x0
  2126                           
  2127  0020                     ??_PIN_Initialize:	
  2128                           ; 1 bytes @ 0x0
  2129                           
  2130  0020                     ??tmr2@TMR2_StartTimer:	
  2131                           ; 1 bytes @ 0x0
  2132                           
  2133  0020                     ??tmr2@TMR2_StopTimer:	
  2134                           ; 1 bytes @ 0x0
  2135                           
  2136  0020                     ??tmr2@TMR2_LoadPeriodRegister:	
  2137                           ; 1 bytes @ 0x0
  2138                           
  2139  0020                     ??_MTOUCH_Sensor_Scan_Initialize:	
  2140                           ; 1 bytes @ 0x0
  2141                           
  2142  0020                     ?_MTOUCH_Sensor_SetSampledCallback:	
  2143                           ; 1 bytes @ 0x0
  2144                           
  2145  0020                     ??_MTOUCH_Sensor_isCalibrated:	
  2146                           ; 1 bytes @ 0x0
  2147                           
  2148  0020                     ??_MTOUCH_Sensor_Calibrate:	
  2149                           ; 1 bytes @ 0x0
  2150                           
  2151  0020                     ?_MTOUCH_Button_SetPressedCallback:	
  2152                           ; 1 bytes @ 0x0
  2153                           
  2154  0020                     ?_MTOUCH_Button_SetNotPressedCallback:	
  2155                           ; 1 bytes @ 0x0
  2156                           
  2157  0020                     ??_SYSTEM_Initialize:	
  2158                           ; 1 bytes @ 0x0
  2159                           
  2160  0020                     ?_led_on:	
  2161                           ; 1 bytes @ 0x0
  2162                           
  2163  0020                     ?_led_off:	
  2164                           ; 1 bytes @ 0x0
  2165                           
  2166  0020                     ?___bmul:	
  2167                           ; 1 bytes @ 0x0
  2168                           
  2169  0020                     ?_abs:	
  2170                           ; 1 bytes @ 0x0
  2171                           
  2172  0020                     ?___lwdiv:	
  2173                           ; 2 bytes @ 0x0
  2174                           
  2175  0020                     EUSART_Write@byte:	
  2176                           ; 2 bytes @ 0x0
  2177                           
  2178  0020                     tmr2@TMR2_LoadPeriodRegister@period:	
  2179                           ; 1 bytes @ 0x0
  2180                           
  2181  0020                     Sensor_RawSample_Update@sensor:	
  2182                           ; 1 bytes @ 0x0
  2183                           
  2184  0020                     Sensor_setScanFunction@sensor:	
  2185                           ; 1 bytes @ 0x0
  2186                           
  2187  0020                     Sensor_isEnabled@sensor:	
  2188                           ; 1 bytes @ 0x0
  2189                           
  2190  0020                     Sensor_setActive@sensor:	
  2191                           ; 1 bytes @ 0x0
  2192                           
  2193  0020                     Sensor_setInactive@sensor:	
  2194                           ; 1 bytes @ 0x0
  2195                           
  2196  0020                     Sensor_Sampled_Reset@sensor:	
  2197                           ; 1 bytes @ 0x0
  2198                           
  2199  0020                     Sensor_setSampled@sensor:	
  2200                           ; 1 bytes @ 0x0
  2201                           
  2202  0020                     Button_DefaultCallback@button:	
  2203                           ; 1 bytes @ 0x0
  2204                           
  2205  0020                     ___bmul@multiplicand:	
  2206                           ; 1 bytes @ 0x0
  2207                           
  2208  0020                     TMR2_SetInterruptHandler@handler:	
  2209                           ; 1 bytes @ 0x0
  2210                           
  2211  0020                     MTOUCH_Sensor_SetSampledCallback@callback:	
  2212                           ; 2 bytes @ 0x0
  2213                           
  2214  0020                     MTOUCH_Button_SetPressedCallback@callback:	
  2215                           ; 2 bytes @ 0x0
  2216                           
  2217  0020                     MTOUCH_Button_SetNotPressedCallback@callback:	
  2218                           ; 2 bytes @ 0x0
  2219                           
  2220  0020                     abs@a:	
  2221                           ; 2 bytes @ 0x0
  2222                           
  2223  0020                     ___lwdiv@divisor:	
  2224                           ; 2 bytes @ 0x0
  2225                           
  2226                           
  2227                           ; 2 bytes @ 0x0
  2228  0020                     	ds	1
  2229  0021                     ??_Button_DefaultCallback:	
  2230  0021                     ??_MTOUCH_Sensor_Sampled_ResetAll:	
  2231                           ; 1 bytes @ 0x1
  2232                           
  2233  0021                     ??_led_on:	
  2234                           ; 1 bytes @ 0x1
  2235                           
  2236  0021                     ??_led_off:	
  2237                           ; 1 bytes @ 0x1
  2238                           
  2239  0021                     ??___bmul:	
  2240                           ; 1 bytes @ 0x1
  2241                           
  2242  0021                     ___bmul@product:	
  2243                           ; 1 bytes @ 0x1
  2244                           
  2245                           
  2246                           ; 1 bytes @ 0x1
  2247  0021                     	ds	1
  2248  0022                     ??_Sensor_Acq_ExecutePacket:	
  2249  0022                     ??_abs:	
  2250                           ; 1 bytes @ 0x2
  2251                           
  2252  0022                     ??_TMR2_SetInterruptHandler:	
  2253                           ; 1 bytes @ 0x2
  2254                           
  2255  0022                     ??_MTOUCH_Sensor_SetSampledCallback:	
  2256                           ; 1 bytes @ 0x2
  2257                           
  2258  0022                     ??_MTOUCH_Button_SetPressedCallback:	
  2259                           ; 1 bytes @ 0x2
  2260                           
  2261  0022                     ??_MTOUCH_Button_SetNotPressedCallback:	
  2262                           ; 1 bytes @ 0x2
  2263                           
  2264  0022                     MTOUCH_Sensor_Sampled_ResetAll@sensor:	
  2265                           ; 1 bytes @ 0x2
  2266                           
  2267  0022                     ___bmul@multiplier:	
  2268                           ; 1 bytes @ 0x2
  2269                           
  2270  0022                     ___lwdiv@dividend:	
  2271                           ; 1 bytes @ 0x2
  2272                           
  2273                           
  2274                           ; 2 bytes @ 0x2
  2275  0022                     	ds	1
  2276  0023                     ??_MTOUCH_Sensor_Enable:	
  2277  0023                     ??_MTOUCH_Sensor_wasSampled:	
  2278                           ; 1 bytes @ 0x3
  2279                           
  2280  0023                     ??_MTOUCH_Button_Initialize:	
  2281                           ; 1 bytes @ 0x3
  2282                           
  2283  0023                     ?_Button_Baseline_Get_helper:	
  2284                           ; 1 bytes @ 0x3
  2285                           
  2286  0023                     ?_MTOUCH_Sensor_RawSample_Get:	
  2287                           ; 2 bytes @ 0x3
  2288                           
  2289  0023                     ?_MTOUCH_Button_Reading_Get:	
  2290                           ; 2 bytes @ 0x3
  2291                           
  2292  0023                     Sensor_Acq_ExecutePacket@ADCON0_temp:	
  2293                           ; 2 bytes @ 0x3
  2294                           
  2295  0023                     MTOUCH_Sensor_Enable@sensor:	
  2296                           ; 1 bytes @ 0x3
  2297                           
  2298  0023                     MTOUCH_Sensor_wasSampled@sensor:	
  2299                           ; 1 bytes @ 0x3
  2300                           
  2301  0023                     MTOUCH_Button_Initialize@name:	
  2302                           ; 1 bytes @ 0x3
  2303                           
  2304                           
  2305                           ; 1 bytes @ 0x3
  2306  0023                     	ds	1
  2307  0024                     ??_MTOUCH_Sensor_Initialize:	
  2308  0024                     ??___lwdiv:	
  2309                           ; 1 bytes @ 0x4
  2310                           
  2311  0024                     MTOUCH_Sensor_Initialize@sensor:	
  2312                           ; 1 bytes @ 0x4
  2313                           
  2314  0024                     Sensor_Acq_ExecutePacket@ADCON1_temp:	
  2315                           ; 1 bytes @ 0x4
  2316                           
  2317  0024                     MTOUCH_Button_Initialize@button:	
  2318                           ; 1 bytes @ 0x4
  2319                           
  2320  0024                     ___lwdiv@quotient:	
  2321                           ; 1 bytes @ 0x4
  2322                           
  2323  0024                     Button_Deviation_Update@baseline:	
  2324                           ; 2 bytes @ 0x4
  2325                           
  2326                           
  2327                           ; 4 bytes @ 0x4
  2328  0024                     	ds	1
  2329  0025                     ??_Button_Baseline_Get_helper:	
  2330  0025                     ??_MTOUCH_Sensor_InitializeAll:	
  2331                           ; 1 bytes @ 0x5
  2332                           
  2333  0025                     ??_MTOUCH_Button_InitializeAll:	
  2334                           ; 1 bytes @ 0x5
  2335                           
  2336  0025                     MTOUCH_Sensor_InitializeAll@sensor:	
  2337                           ; 1 bytes @ 0x5
  2338                           
  2339  0025                     Sensor_Acq_ExecutePacket@ADCON2_temp:	
  2340                           ; 1 bytes @ 0x5
  2341                           
  2342                           
  2343                           ; 1 bytes @ 0x5
  2344  0025                     	ds	1
  2345  0026                     ??_MTOUCH_Sensor_RawSample_Get:	
  2346  0026                     ??_MTOUCH_Button_Reading_Get:	
  2347                           ; 1 bytes @ 0x6
  2348                           
  2349  0026                     Sensor_Acq_ExecutePacket@error:	
  2350                           ; 1 bytes @ 0x6
  2351                           
  2352  0026                     MTOUCH_Sensor_RawSample_Get@name:	
  2353                           ; 1 bytes @ 0x6
  2354                           
  2355  0026                     MTOUCH_Button_InitializeAll@button:	
  2356                           ; 1 bytes @ 0x6
  2357                           
  2358  0026                     MTOUCH_Button_Reading_Get@name:	
  2359                           ; 1 bytes @ 0x6
  2360                           
  2361  0026                     Button_Baseline_Update@button:	
  2362                           ; 1 bytes @ 0x6
  2363                           
  2364  0026                     ___lwdiv@counter:	
  2365                           ; 1 bytes @ 0x6
  2366                           
  2367                           
  2368                           ; 1 bytes @ 0x6
  2369  0026                     	ds	1
  2370  0027                     ??_Button_Reading_Update:	
  2371  0027                     ??_Button_Baseline_Initialize:	
  2372                           ; 1 bytes @ 0x7
  2373                           
  2374  0027                     ??_MTOUCH_Initialize:	
  2375                           ; 1 bytes @ 0x7
  2376                           
  2377  0027                     ?___lwmod:	
  2378                           ; 1 bytes @ 0x7
  2379                           
  2380  0027                     Sensor_Acq_ExecutePacket@sensor:	
  2381                           ; 2 bytes @ 0x7
  2382                           
  2383  0027                     ___lwmod@divisor:	
  2384                           ; 1 bytes @ 0x7
  2385                           
  2386                           
  2387                           ; 2 bytes @ 0x7
  2388  0027                     	ds	1
  2389  0028                     ??_Sensor_Scanfrequency_Evaluation:	
  2390  0028                     Button_Deviation_Update@deviation:	
  2391                           ; 1 bytes @ 0x8
  2392                           
  2393                           
  2394                           ; 4 bytes @ 0x8
  2395  0028                     	ds	1
  2396  0029                     Button_Reading_Update@button:	
  2397  0029                     Button_Baseline_Get_helper@name:	
  2398                           ; 1 bytes @ 0x9
  2399                           
  2400  0029                     ___lwmod@dividend:	
  2401                           ; 1 bytes @ 0x9
  2402                           
  2403                           
  2404                           ; 2 bytes @ 0x9
  2405  0029                     	ds	1
  2406  002A                     ?_MTOUCH_Button_Baseline_Get:	
  2407  002A                     Sensor_Scanfrequency_Evaluation@packet_noise_Max:	
  2408                           ; 2 bytes @ 0xA
  2409                           
  2410                           
  2411                           ; 2 bytes @ 0xA
  2412  002A                     	ds	1
  2413  002B                     ??___lwmod:	
  2414  002B                     Button_Baseline_Initialize@button:	
  2415                           ; 1 bytes @ 0xB
  2416                           
  2417  002B                     ___lwmod@counter:	
  2418                           ; 1 bytes @ 0xB
  2419                           
  2420                           
  2421                           ; 1 bytes @ 0xB
  2422  002B                     	ds	1
  2423  002C                     ?_Button_State_Initializing:	
  2424  002C                     ?_Button_State_NotPressed:	
  2425                           ; 1 bytes @ 0xC
  2426                           
  2427  002C                     ?_Button_State_Pressed:	
  2428                           ; 1 bytes @ 0xC
  2429                           
  2430  002C                     Button_State_Initializing@button:	
  2431                           ; 1 bytes @ 0xC
  2432                           
  2433  002C                     Button_State_NotPressed@button:	
  2434                           ; 1 bytes @ 0xC
  2435                           
  2436  002C                     Button_State_Pressed@button:	
  2437                           ; 1 bytes @ 0xC
  2438                           
  2439  002C                     Button_Deviation_Update@button:	
  2440                           ; 1 bytes @ 0xC
  2441                           
  2442  002C                     Sensor_Scanfrequency_Evaluation@best_packet_sample:	
  2443                           ; 1 bytes @ 0xC
  2444                           
  2445                           
  2446                           ; 2 bytes @ 0xC
  2447  002C                     	ds	1
  2448  002D                     ??_Button_State_Initializing:	
  2449  002D                     ??_Button_State_NotPressed:	
  2450                           ; 1 bytes @ 0xD
  2451                           
  2452  002D                     ??_Button_State_Pressed:	
  2453                           ; 1 bytes @ 0xD
  2454                           
  2455  002D                     ??_MTOUCH_Button_Baseline_Get:	
  2456                           ; 1 bytes @ 0xD
  2457                           
  2458  002D                     MTOUCH_Button_Baseline_Get@name:	
  2459                           ; 1 bytes @ 0xD
  2460                           
  2461                           
  2462                           ; 1 bytes @ 0xD
  2463  002D                     	ds	1
  2464  002E                     ?_Sensor_DefaultCallback:	
  2465  002E                     ?_log_info:	
  2466                           ; 1 bytes @ 0xE
  2467                           
  2468  002E                     Sensor_Scanfrequency_Evaluation@sensor:	
  2469                           ; 1 bytes @ 0xE
  2470                           
  2471  002E                     Sensor_DefaultCallback@sensor:	
  2472                           ; 1 bytes @ 0xE
  2473                           
  2474  002E                     log_info@button:	
  2475                           ; 1 bytes @ 0xE
  2476                           
  2477                           
  2478                           ; 1 bytes @ 0xE
  2479  002E                     	ds	1
  2480  002F                     ??_Sensor_DefaultCallback:	
  2481  002F                     ??_log_info:	
  2482                           ; 1 bytes @ 0xF
  2483                           
  2484  002F                     Sensor_Scanfrequency_Evaluation@best_sample_period:	
  2485                           ; 1 bytes @ 0xF
  2486                           
  2487  002F                     log_info@reading:	
  2488                           ; 1 bytes @ 0xF
  2489                           
  2490                           
  2491                           ; 2 bytes @ 0xF
  2492  002F                     	ds	1
  2493  0030                     Sensor_Scanfrequency_Evaluation@retry:	
  2494                           
  2495                           ; 1 bytes @ 0x10
  2496  0030                     	ds	1
  2497  0031                     Sensor_Scanfrequency_Evaluation@i:	
  2498  0031                     log_info@baseline:	
  2499                           ; 1 bytes @ 0x11
  2500                           
  2501                           
  2502                           ; 2 bytes @ 0x11
  2503  0031                     	ds	1
  2504  0032                     ??_Sensor_Acquisition:	
  2505  0032                     ??_Button_Service:	
  2506                           ; 1 bytes @ 0x12
  2507                           
  2508  0032                     Button_Service@name:	
  2509                           ; 1 bytes @ 0x12
  2510                           
  2511                           
  2512                           ; 1 bytes @ 0x12
  2513  0032                     	ds	1
  2514  0033                     Button_Service@button:	
  2515  0033                     log_info@value:	
  2516                           ; 1 bytes @ 0x13
  2517                           
  2518                           
  2519                           ; 2 bytes @ 0x13
  2520  0033                     	ds	1
  2521  0034                     ??_MTOUCH_Button_ServiceAll:	
  2522  0034                     MTOUCH_Button_ServiceAll@button:	
  2523                           ; 1 bytes @ 0x14
  2524                           
  2525                           
  2526                           ; 1 bytes @ 0x14
  2527  0034                     	ds	2
  2528  0036                     Sensor_Acquisition@retry:	
  2529                           
  2530                           ; 1 bytes @ 0x16
  2531  0036                     	ds	1
  2532  0037                     Sensor_Acquisition@sensor:	
  2533                           
  2534                           ; 1 bytes @ 0x17
  2535  0037                     	ds	1
  2536  0038                     ??_Sensor_Service:	
  2537  0038                     Sensor_Service@name:	
  2538                           ; 1 bytes @ 0x18
  2539                           
  2540                           
  2541                           ; 1 bytes @ 0x18
  2542  0038                     	ds	1
  2543  0039                     Sensor_Service@error:	
  2544                           
  2545                           ; 1 bytes @ 0x19
  2546  0039                     	ds	1
  2547  003A                     Sensor_Service@sensor:	
  2548                           
  2549                           ; 1 bytes @ 0x1A
  2550  003A                     	ds	1
  2551  003B                     ??_MTOUCH_Sensor_SampleAll:	
  2552  003B                     MTOUCH_Sensor_SampleAll@sensor:	
  2553                           ; 1 bytes @ 0x1B
  2554                           
  2555                           
  2556                           ; 1 bytes @ 0x1B
  2557  003B                     	ds	1
  2558  003C                     ??_MTOUCH_Service_Mainloop:	
  2559  003C                     ??_main:	
  2560                           ; 1 bytes @ 0x1C
  2561                           
  2562                           
  2563                           	psect	maintext
  2564  0623                     __pmaintext:	
  2565                           ; 1 bytes @ 0x1C
  2566 ;;
  2567 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2568 ;;
  2569 ;; *************** function _main *****************
  2570 ;; Defined at:
  2571 ;;		line 140 in file "main.c"
  2572 ;; Parameters:    Size  Location     Type
  2573 ;;		None
  2574 ;; Auto vars:     Size  Location     Type
  2575 ;;		None
  2576 ;; Return value:  Size  Location     Type
  2577 ;;                  1    wreg      void 
  2578 ;; Registers used:
  2579 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2580 ;; Tracked objects:
  2581 ;;		On entry : B1F/0
  2582 ;;		On exit  : 1F/0
  2583 ;;		Unchanged: 0/0
  2584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2585 ;;      Params:         0       0       0       0
  2586 ;;      Locals:         0       0       0       0
  2587 ;;      Temps:          0       0       0       0
  2588 ;;      Totals:         0       0       0       0
  2589 ;;Total ram usage:        0 bytes
  2590 ;; Hardware stack levels required when called:   11
  2591 ;; This function calls:
  2592 ;;		_MTOUCH_Button_SetNotPressedCallback
  2593 ;;		_MTOUCH_Button_SetPressedCallback
  2594 ;;		_MTOUCH_Initialize
  2595 ;;		_MTOUCH_Sensor_SetSampledCallback
  2596 ;;		_MTOUCH_Service_Mainloop
  2597 ;;		_SYSTEM_Initialize
  2598 ;; This function is called by:
  2599 ;;		Startup code after reset
  2600 ;; This function uses a non-reentrant model
  2601 ;;
  2602                           
  2603                           
  2604                           ;psect for function _main
  2605  0623                     _main:	
  2606                           
  2607                           ;main.c: 142: SYSTEM_Initialize ( );
  2608                           
  2609                           ;incstack = 0
  2610                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2611  0623  27B1               	fcall	_SYSTEM_Initialize
  2612                           
  2613                           ;main.c: 143: MTOUCH_Initialize ( );
  2614  0624  27B5               	fcall	_MTOUCH_Initialize
  2615                           
  2616                           ;main.c: 144: MTOUCH_Sensor_SetSampledCallback ( log_info );
  2617  0625  3039               	movlw	low _log_info
  2618  0626  0020               	movlb	0	; select bank0
  2619  0627  00A0               	movwf	MTOUCH_Sensor_SetSampledCallback@callback
  2620  0628  3000               	movlw	high _log_info
  2621  0629  00A1               	movwf	MTOUCH_Sensor_SetSampledCallback@callback+1
  2622  062A  27A2               	fcall	_MTOUCH_Sensor_SetSampledCallback
  2623                           
  2624                           ;main.c: 145: MTOUCH_Button_SetPressedCallback ( led_on );
  2625  062B  30BD               	movlw	low _led_on
  2626  062C  00A0               	movwf	MTOUCH_Button_SetPressedCallback@callback
  2627  062D  3007               	movlw	high _led_on
  2628  062E  00A1               	movwf	MTOUCH_Button_SetPressedCallback@callback+1
  2629  062F  27A7               	fcall	_MTOUCH_Button_SetPressedCallback
  2630                           
  2631                           ;main.c: 146: MTOUCH_Button_SetNotPressedCallback ( led_off );
  2632  0630  30C0               	movlw	low _led_off
  2633  0631  00A0               	movwf	MTOUCH_Button_SetNotPressedCallback@callback
  2634  0632  3007               	movlw	high _led_off
  2635  0633  00A1               	movwf	MTOUCH_Button_SetNotPressedCallback@callback+1
  2636  0634  27AC               	fcall	_MTOUCH_Button_SetNotPressedCallback
  2637                           
  2638                           ;main.c: 152: (INTCONbits.GIE = 1);
  2639  0635  178B               	bsf	11,7	;volatile
  2640                           
  2641                           ;main.c: 155: (INTCONbits.PEIE = 1);
  2642  0636  170B               	bsf	11,6	;volatile
  2643  0637                     l650:	
  2644                           ;main.c: 163: while ( 1 ) {
  2645                           
  2646  0637  0064               	clrwdt	;# 
  2647                           
  2648                           ;main.c: 166: MTOUCH_Service_Mainloop ( );
  2649  0638  2778               	fcall	_MTOUCH_Service_Mainloop
  2650  0639  2E37               	goto	l650
  2651  063A                     __end_of_main:	
  2652                           
  2653                           	psect	text1
  2654  07B1                     __ptext1:	
  2655 ;; *************** function _SYSTEM_Initialize *****************
  2656 ;; Defined at:
  2657 ;;		line 68 in file "main.c"
  2658 ;; Parameters:    Size  Location     Type
  2659 ;;		None
  2660 ;; Auto vars:     Size  Location     Type
  2661 ;;		None
  2662 ;; Return value:  Size  Location     Type
  2663 ;;                  1    wreg      void 
  2664 ;; Registers used:
  2665 ;;		wreg, status,2, status,0, pclath, cstack
  2666 ;; Tracked objects:
  2667 ;;		On entry : B1F/0
  2668 ;;		On exit  : B1F/3
  2669 ;;		Unchanged: B00/0
  2670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2671 ;;      Params:         0       0       0       0
  2672 ;;      Locals:         0       0       0       0
  2673 ;;      Temps:          0       0       0       0
  2674 ;;      Totals:         0       0       0       0
  2675 ;;Total ram usage:        0 bytes
  2676 ;; Hardware stack levels used:    1
  2677 ;; Hardware stack levels required when called:    5
  2678 ;; This function calls:
  2679 ;;		_EUSART_Initialize
  2680 ;;		_OSC_Initialize
  2681 ;;		_PIN_Initialize
  2682 ;;		_TMR2_Initialize
  2683 ;; This function is called by:
  2684 ;;		_main
  2685 ;; This function uses a non-reentrant model
  2686 ;;
  2687                           
  2688                           
  2689                           ;psect for function _SYSTEM_Initialize
  2690  07B1                     _SYSTEM_Initialize:	
  2691                           
  2692                           ;main.c: 69: PIN_Initialize ( );
  2693                           
  2694                           ;incstack = 0
  2695                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2696  07B1  2717               	fcall	_PIN_Initialize
  2697                           
  2698                           ;main.c: 70: OSC_Initialize ( );
  2699  07B2  2792               	fcall	_OSC_Initialize
  2700                           
  2701                           ;main.c: 71: TMR2_Initialize ( );
  2702  07B3  26D1               	fcall	_TMR2_Initialize
  2703                           
  2704                           ;main.c: 72: EUSART_Initialize ( );
  2705  07B4  2E8B               	ljmp	l2365
  2706  07B5                     __end_of_SYSTEM_Initialize:	
  2707                           
  2708                           	psect	text2
  2709  06D1                     __ptext2:	
  2710 ;; *************** function _TMR2_Initialize *****************
  2711 ;; Defined at:
  2712 ;;		line 9 in file "driver/tmr2.c"
  2713 ;; Parameters:    Size  Location     Type
  2714 ;;		None
  2715 ;; Auto vars:     Size  Location     Type
  2716 ;;		None
  2717 ;; Return value:  Size  Location     Type
  2718 ;;                  1    wreg      void 
  2719 ;; Registers used:
  2720 ;;		wreg, status,2
  2721 ;; Tracked objects:
  2722 ;;		On entry : B1F/1
  2723 ;;		On exit  : B1F/0
  2724 ;;		Unchanged: B00/0
  2725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2726 ;;      Params:         0       0       0       0
  2727 ;;      Locals:         0       0       0       0
  2728 ;;      Temps:          0       0       0       0
  2729 ;;      Totals:         0       0       0       0
  2730 ;;Total ram usage:        0 bytes
  2731 ;; Hardware stack levels used:    1
  2732 ;; Hardware stack levels required when called:    4
  2733 ;; This function calls:
  2734 ;;		Nothing
  2735 ;; This function is called by:
  2736 ;;		_SYSTEM_Initialize
  2737 ;; This function uses a non-reentrant model
  2738 ;;
  2739                           
  2740                           
  2741                           ;psect for function _TMR2_Initialize
  2742  06D1                     _TMR2_Initialize:	
  2743                           
  2744                           ;tmr2.c: 10: T2CON = (0<<0) | (0<<3);
  2745                           
  2746                           ;incstack = 0
  2747                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
  2748  06D1  0020               	movlb	0	; select bank0
  2749  06D2  019C               	clrf	28	;volatile
  2750                           
  2751                           ;tmr2.c: 11: PR2 = 0xF9;
  2752  06D3  30F9               	movlw	249
  2753  06D4  009B               	movwf	27	;volatile
  2754                           
  2755                           ;tmr2.c: 12: TMR2 = 0x00;
  2756  06D5  019A               	clrf	26	;volatile
  2757                           
  2758                           ;tmr2.c: 13: PIR1bits.TMR2IF = 0;
  2759  06D6  1091               	bcf	17,1	;volatile
  2760                           
  2761                           ;tmr2.c: 14: PIE1bits.TMR2IE = 1;
  2762  06D7  0021               	movlb	1	; select bank1
  2763  06D8  1491               	bsf	17,1	;volatile
  2764                           
  2765                           ;tmr2.c: 15: tmr2_isr_handler = TMR2_InterruptHandler_Default;
  2766  06D9  30C8               	movlw	low _TMR2_InterruptHandler_Default
  2767  06DA  0020               	movlb	0	; select bank0
  2768  06DB  00DE               	movwf	_tmr2_isr_handler
  2769  06DC  3007               	movlw	high _TMR2_InterruptHandler_Default
  2770  06DD  00DF               	movwf	_tmr2_isr_handler+1
  2771  06DE  0008               	return
  2772  06DF                     __end_of_TMR2_Initialize:	
  2773                           
  2774                           	psect	text3
  2775  0717                     __ptext3:	
  2776 ;; *************** function _PIN_Initialize *****************
  2777 ;; Defined at:
  2778 ;;		line 3 in file "driver/pin.c"
  2779 ;; Parameters:    Size  Location     Type
  2780 ;;		None
  2781 ;; Auto vars:     Size  Location     Type
  2782 ;;		None
  2783 ;; Return value:  Size  Location     Type
  2784 ;;                  1    wreg      void 
  2785 ;; Registers used:
  2786 ;;		wreg, status,2
  2787 ;; Tracked objects:
  2788 ;;		On entry : B1F/0
  2789 ;;		On exit  : B1F/4
  2790 ;;		Unchanged: B00/0
  2791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2792 ;;      Params:         0       0       0       0
  2793 ;;      Locals:         0       0       0       0
  2794 ;;      Temps:          0       0       0       0
  2795 ;;      Totals:         0       0       0       0
  2796 ;;Total ram usage:        0 bytes
  2797 ;; Hardware stack levels used:    1
  2798 ;; Hardware stack levels required when called:    4
  2799 ;; This function calls:
  2800 ;;		Nothing
  2801 ;; This function is called by:
  2802 ;;		_SYSTEM_Initialize
  2803 ;; This function uses a non-reentrant model
  2804 ;;
  2805                           
  2806                           
  2807                           ;psect for function _PIN_Initialize
  2808  0717                     _PIN_Initialize:	
  2809                           
  2810                           ;pin.c: 5: APFCON = 0x04;
  2811                           
  2812                           ;incstack = 0
  2813                           ; Regs used in _PIN_Initialize: [wreg+status,2]
  2814  0717  3004               	movlw	4
  2815  0718  0022               	movlb	2	; select bank2
  2816  0719  009D               	movwf	29	;volatile
  2817                           
  2818                           ;pin.c: 6: LATA = 0x30;
  2819  071A  3030               	movlw	48
  2820  071B  008C               	movwf	12	;volatile
  2821                           
  2822                           ;pin.c: 7: TRISA = 0x00;
  2823  071C  0021               	movlb	1	; select bank1
  2824  071D  018C               	clrf	12	;volatile
  2825                           
  2826                           ;pin.c: 8: ANSELA = 0x04;
  2827  071E  3004               	movlw	4
  2828  071F  0023               	movlb	3	; select bank3
  2829  0720  008C               	movwf	12	;volatile
  2830                           
  2831                           ;pin.c: 9: WPUA = 0x00;
  2832  0721  0024               	movlb	4	; select bank4
  2833  0722  018C               	clrf	12	;volatile
  2834  0723  0008               	return
  2835  0724                     __end_of_PIN_Initialize:	
  2836                           
  2837                           	psect	text4
  2838  0792                     __ptext4:	
  2839 ;; *************** function _OSC_Initialize *****************
  2840 ;; Defined at:
  2841 ;;		line 6 in file "driver/osc.c"
  2842 ;; Parameters:    Size  Location     Type
  2843 ;;		None
  2844 ;; Auto vars:     Size  Location     Type
  2845 ;;		None
  2846 ;; Return value:  Size  Location     Type
  2847 ;;                  1    wreg      void 
  2848 ;; Registers used:
  2849 ;;		wreg
  2850 ;; Tracked objects:
  2851 ;;		On entry : B1F/4
  2852 ;;		On exit  : B1F/1
  2853 ;;		Unchanged: B00/0
  2854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2855 ;;      Params:         0       0       0       0
  2856 ;;      Locals:         0       0       0       0
  2857 ;;      Temps:          0       0       0       0
  2858 ;;      Totals:         0       0       0       0
  2859 ;;Total ram usage:        0 bytes
  2860 ;; Hardware stack levels used:    1
  2861 ;; Hardware stack levels required when called:    4
  2862 ;; This function calls:
  2863 ;;		Nothing
  2864 ;; This function is called by:
  2865 ;;		_SYSTEM_Initialize
  2866 ;; This function uses a non-reentrant model
  2867 ;;
  2868                           
  2869                           
  2870                           ;psect for function _OSC_Initialize
  2871  0792                     _OSC_Initialize:	
  2872                           
  2873                           ;osc.c: 7: OSCCON = (15<<3) | (2<<0);
  2874                           
  2875                           ;incstack = 0
  2876                           ; Regs used in _OSC_Initialize: [wreg]
  2877  0792  307A               	movlw	122
  2878  0793  0021               	movlb	1	; select bank1
  2879  0794  0099               	movwf	25	;volatile
  2880  0795                     l103:	
  2881                           ;osc.c: 8: while ( OSCSTATbits.HFIOFS == 0 );
  2882                           
  2883  0795  181A               	btfsc	26,0	;volatile
  2884  0796  0008               	return
  2885  0797  2F95               	goto	l103
  2886  0798                     __end_of_OSC_Initialize:	
  2887                           
  2888                           	psect	text5
  2889  068B                     __ptext5:	
  2890 ;; *************** function _EUSART_Initialize *****************
  2891 ;; Defined at:
  2892 ;;		line 15 in file "driver/eusart.c"
  2893 ;; Parameters:    Size  Location     Type
  2894 ;;		None
  2895 ;; Auto vars:     Size  Location     Type
  2896 ;;		None
  2897 ;; Return value:  Size  Location     Type
  2898 ;;                  1    wreg      void 
  2899 ;; Registers used:
  2900 ;;		wreg, status,2
  2901 ;; Tracked objects:
  2902 ;;		On entry : B1F/0
  2903 ;;		On exit  : B1F/3
  2904 ;;		Unchanged: B00/0
  2905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2906 ;;      Params:         0       0       0       0
  2907 ;;      Locals:         0       0       0       0
  2908 ;;      Temps:          0       0       0       0
  2909 ;;      Totals:         0       0       0       0
  2910 ;;Total ram usage:        0 bytes
  2911 ;; Hardware stack levels used:    1
  2912 ;; Hardware stack levels required when called:    4
  2913 ;; This function calls:
  2914 ;;		Nothing
  2915 ;; This function is called by:
  2916 ;;		_SYSTEM_Initialize
  2917 ;; This function uses a non-reentrant model
  2918 ;;
  2919                           
  2920                           
  2921                           ;psect for function _EUSART_Initialize
  2922  068B                     _EUSART_Initialize:	
  2923  068B                     l2365:	
  2924                           ;incstack = 0
  2925                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  2926                           
  2927                           
  2928                           ;eusart.c: 16: PIE1bits.RCIE = 0;
  2929  068B  0021               	movlb	1	; select bank1
  2930  068C  1291               	bcf	17,5	;volatile
  2931                           
  2932                           ;eusart.c: 17: PIE1bits.TXIE = 0;
  2933  068D  1211               	bcf	17,4	;volatile
  2934                           
  2935                           ;eusart.c: 18: BAUDCON = (1<<3);
  2936  068E  3008               	movlw	8
  2937  068F  0023               	movlb	3	; select bank3
  2938  0690  009F               	movwf	31	;volatile
  2939                           
  2940                           ;eusart.c: 19: RCSTA = (1<<7) | (1<<4);
  2941  0691  3090               	movlw	144
  2942  0692  009D               	movwf	29	;volatile
  2943                           
  2944                           ;eusart.c: 20: TXSTA = (1<<5) | (1<<2);
  2945  0693  3024               	movlw	36
  2946  0694  009E               	movwf	30	;volatile
  2947                           
  2948                           ;eusart.c: 21: SPBRG = 68;
  2949  0695  3044               	movlw	68
  2950  0696  009B               	movwf	27	;volatile
  2951  0697  019C               	clrf	28	;volatile
  2952  0698  3020               	movlw	32
  2953                           
  2954                           ;eusart.c: 24: txTail = 0;
  2955  0699  01FC               	clrf	_txTail
  2956  069A  01FA               	clrf	_txHead
  2957                           
  2958                           ;eusart.c: 28: eusart_rcv_isr_handler = EUSART_ReceiveInterruptHandler_Default;
  2959  069B  00FB               	movwf	_txRemain
  2960  069C  0008               	return
  2961  069D                     __end_of_EUSART_Initialize:	
  2962                           
  2963                           	psect	text6
  2964  0778                     __ptext6:	
  2965 ;; *************** function _MTOUCH_Service_Mainloop *****************
  2966 ;; Defined at:
  2967 ;;		line 25 in file "mtouch/mtouch.c"
  2968 ;; Parameters:    Size  Location     Type
  2969 ;;		None
  2970 ;; Auto vars:     Size  Location     Type
  2971 ;;		None
  2972 ;; Return value:  Size  Location     Type
  2973 ;;                  1    wreg      unsigned char 
  2974 ;; Registers used:
  2975 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2976 ;; Tracked objects:
  2977 ;;		On entry : 0/0
  2978 ;;		On exit  : 1F/0
  2979 ;;		Unchanged: 0/0
  2980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2981 ;;      Params:         0       0       0       0
  2982 ;;      Locals:         0       0       0       0
  2983 ;;      Temps:          0       0       0       0
  2984 ;;      Totals:         0       0       0       0
  2985 ;;Total ram usage:        0 bytes
  2986 ;; Hardware stack levels used:    1
  2987 ;; Hardware stack levels required when called:   10
  2988 ;; This function calls:
  2989 ;;		_MTOUCH_Button_ServiceAll
  2990 ;;		_MTOUCH_Sensor_SampleAll
  2991 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  2992 ;;		_MTOUCH_Tick
  2993 ;; This function is called by:
  2994 ;;		_main
  2995 ;; This function uses a non-reentrant model
  2996 ;;
  2997                           
  2998                           
  2999                           ;psect for function _MTOUCH_Service_Mainloop
  3000  0778                     _MTOUCH_Service_Mainloop:	
  3001                           
  3002                           ;mtouch.c: 26: if ( MTOUCH_Sensor_SampleAll ( ) == 0 )
  3003                           
  3004                           ;incstack = 0
  3005                           ; Regs used in _MTOUCH_Service_Mainloop: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3006  0778  2754               	fcall	_MTOUCH_Sensor_SampleAll
  3007  0779  3A00               	xorlw	0
  3008  077A  1903               	btfsc	3,2
  3009  077B  0008               	return
  3010                           
  3011                           ;mtouch.c: 28: MTOUCH_Button_ServiceAll ( );
  3012  077C  275E               	fcall	_MTOUCH_Button_ServiceAll
  3013                           
  3014                           ;mtouch.c: 29: MTOUCH_Sensor_Sampled_ResetAll ( );
  3015  077D  26AF               	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  3016                           
  3017                           ;mtouch.c: 30: MTOUCH_Tick ( );
  3018  077E  2FC3               	ljmp	l565
  3019  077F                     __end_of_MTOUCH_Service_Mainloop:	
  3020                           
  3021                           	psect	text7
  3022  07C3                     __ptext7:	
  3023 ;; *************** function _MTOUCH_Tick *****************
  3024 ;; Defined at:
  3025 ;;		line 39 in file "mtouch/mtouch.c"
  3026 ;; Parameters:    Size  Location     Type
  3027 ;;		None
  3028 ;; Auto vars:     Size  Location     Type
  3029 ;;		None
  3030 ;; Return value:  Size  Location     Type
  3031 ;;                  1    wreg      void 
  3032 ;; Registers used:
  3033 ;;		None
  3034 ;; Tracked objects:
  3035 ;;		On entry : 1F/0
  3036 ;;		On exit  : 1F/0
  3037 ;;		Unchanged: 1F/0
  3038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3039 ;;      Params:         0       0       0       0
  3040 ;;      Locals:         0       0       0       0
  3041 ;;      Temps:          0       0       0       0
  3042 ;;      Totals:         0       0       0       0
  3043 ;;Total ram usage:        0 bytes
  3044 ;; Hardware stack levels used:    1
  3045 ;; Hardware stack levels required when called:    4
  3046 ;; This function calls:
  3047 ;;		Nothing
  3048 ;; This function is called by:
  3049 ;;		_MTOUCH_Service_Mainloop
  3050 ;; This function uses a non-reentrant model
  3051 ;;
  3052                           
  3053                           
  3054                           ;psect for function _MTOUCH_Tick
  3055  07C3                     _MTOUCH_Tick:	
  3056  07C3                     l565:	
  3057                           ;incstack = 0
  3058                           ; Regs used in _MTOUCH_Tick: []
  3059                           
  3060  07C3  0008               	return
  3061  07C4                     __end_of_MTOUCH_Tick:	
  3062                           
  3063                           	psect	text8
  3064  0754                     __ptext8:	
  3065 ;; *************** function _MTOUCH_Sensor_SampleAll *****************
  3066 ;; Defined at:
  3067 ;;		line 157 in file "mtouch/mtouch_sensor.c"
  3068 ;; Parameters:    Size  Location     Type
  3069 ;;		None
  3070 ;; Auto vars:     Size  Location     Type
  3071 ;;  sensor          1   27[BANK0 ] enum E30
  3072 ;; Return value:  Size  Location     Type
  3073 ;;                  1    wreg      unsigned char 
  3074 ;; Registers used:
  3075 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3076 ;; Tracked objects:
  3077 ;;		On entry : 0/0
  3078 ;;		On exit  : 1F/0
  3079 ;;		Unchanged: 0/0
  3080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3081 ;;      Params:         0       0       0       0
  3082 ;;      Locals:         0       1       0       0
  3083 ;;      Temps:          0       0       0       0
  3084 ;;      Totals:         0       1       0       0
  3085 ;;Total ram usage:        1 bytes
  3086 ;; Hardware stack levels used:    1
  3087 ;; Hardware stack levels required when called:    9
  3088 ;; This function calls:
  3089 ;;		_Sensor_Service
  3090 ;; This function is called by:
  3091 ;;		_MTOUCH_Service_Mainloop
  3092 ;; This function uses a non-reentrant model
  3093 ;;
  3094                           
  3095                           
  3096                           ;psect for function _MTOUCH_Sensor_SampleAll
  3097  0754                     _MTOUCH_Sensor_SampleAll:	
  3098                           
  3099                           ;mtouch_sensor.c: 158: enum mtouch_sensor_names sensor;
  3100                           ;mtouch_sensor.c: 159: for ( sensor = 0; sensor < 1; sensor++ ) {
  3101                           
  3102                           ;incstack = 0
  3103                           ; Regs used in _MTOUCH_Sensor_SampleAll: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3104  0754  0020               	movlb	0	; select bank0
  3105  0755  01BB               	clrf	MTOUCH_Sensor_SampleAll@sensor
  3106  0756                     l2409:	
  3107                           
  3108                           ;mtouch_sensor.c: 160: if ( Sensor_Service ( sensor ) != MTOUCH_SENSOR_ERROR_none )
  3109  0756  083B               	movf	MTOUCH_Sensor_SampleAll@sensor,w
  3110  0757  2495               	fcall	_Sensor_Service
  3111  0758  3A00               	xorlw	0
  3112  0759  1D03               	btfss	3,2
  3113                           
  3114                           ;mtouch_sensor.c: 161: return 0;
  3115  075A  3400               	retlw	0
  3116  075B  0FBB               	incfsz	MTOUCH_Sensor_SampleAll@sensor,f
  3117                           
  3118                           ;mtouch_sensor.c: 162: }
  3119                           ;mtouch_sensor.c: 163: return 1;
  3120  075C  3401               	retlw	1
  3121  075D  2F56               	goto	l2409
  3122  075E                     __end_of_MTOUCH_Sensor_SampleAll:	
  3123                           
  3124                           	psect	text9
  3125  0495                     __ptext9:	
  3126 ;; *************** function _Sensor_Service *****************
  3127 ;; Defined at:
  3128 ;;		line 171 in file "mtouch/mtouch_sensor.c"
  3129 ;; Parameters:    Size  Location     Type
  3130 ;;  name            1    wreg     enum E30
  3131 ;; Auto vars:     Size  Location     Type
  3132 ;;  name            1   24[BANK0 ] enum E30
  3133 ;;  sensor          1   26[BANK0 ] PTR struct .
  3134 ;;		 -> mtouch_sensor(9), 
  3135 ;;  error           1   25[BANK0 ] enum E32
  3136 ;; Return value:  Size  Location     Type
  3137 ;;                  1    wreg      enum E32
  3138 ;; Registers used:
  3139 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3140 ;; Tracked objects:
  3141 ;;		On entry : 1F/0
  3142 ;;		On exit  : 1F/0
  3143 ;;		Unchanged: 0/0
  3144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3145 ;;      Params:         0       0       0       0
  3146 ;;      Locals:         0       3       0       0
  3147 ;;      Temps:          0       0       0       0
  3148 ;;      Totals:         0       3       0       0
  3149 ;;Total ram usage:        3 bytes
  3150 ;; Hardware stack levels used:    1
  3151 ;; Hardware stack levels required when called:    8
  3152 ;; This function calls:
  3153 ;;		_Sensor_Acquisition
  3154 ;;		_Sensor_DefaultCallback
  3155 ;;		_Sensor_RawSample_Update
  3156 ;;		_Sensor_setSampled
  3157 ;;		___bmul
  3158 ;;		_log_info
  3159 ;; This function is called by:
  3160 ;;		_MTOUCH_Sensor_SampleAll
  3161 ;; This function uses a non-reentrant model
  3162 ;;
  3163                           
  3164                           
  3165                           ;psect for function _Sensor_Service
  3166  0495                     _Sensor_Service:	
  3167                           
  3168                           ;incstack = 0
  3169                           ; Regs used in _Sensor_Service: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3170                           ;Sensor_Service@name stored from wreg
  3171  0495  00B8               	movwf	Sensor_Service@name
  3172                           
  3173                           ;mtouch_sensor.c: 172: mtouch_sensor_t* sensor = &mtouch_sensor[name];
  3174  0496  3009               	movlw	9
  3175  0497  00A0               	movwf	___bmul@multiplicand
  3176  0498  0838               	movf	Sensor_Service@name,w
  3177  0499  2731               	fcall	___bmul
  3178  049A  3E4D               	addlw	(low (_mtouch_sensor| 0))& (0+255)
  3179  049B  00BA               	movwf	Sensor_Service@sensor
  3180                           
  3181                           ;mtouch_sensor.c: 173: enum mtouch_sensor_error error = Sensor_Acquisition ( sensor );
  3182  049C  23B1               	fcall	_Sensor_Acquisition
  3183  049D  00B9               	movwf	Sensor_Service@error
  3184                           
  3185                           ;mtouch_sensor.c: 176: switch ( error ) {
  3186  049E  2CB0               	goto	l2327
  3187  049F                     l2323:	
  3188                           
  3189                           ;mtouch_sensor.c: 178: {
  3190                           ;mtouch_sensor.c: 179: Sensor_RawSample_Update ( sensor );
  3191  049F  083A               	movf	Sensor_Service@sensor,w
  3192  04A0  269D               	fcall	_Sensor_RawSample_Update
  3193                           
  3194                           ;mtouch_sensor.c: 180: Sensor_setSampled ( sensor );
  3195  04A1  083A               	movf	Sensor_Service@sensor,w
  3196  04A2                     i1L__ptext18:	
  3197                           
  3198                           ;psect for function _Sensor_setSampled
  3199  04A2                     i1L_Sensor_setSampled:	
  3200                           
  3201                           ;incstack = 0
  3202                           ; Regs used in _Sensor_setSampled: [wreg+fsr1l+fsr1h+status,2+status,0]
  3203                           ;Sensor_setSampled@sensor stored from wreg
  3204  04A2  00A0               	movwf	Sensor_setSampled@sensor
  3205  04A3                     i1Ll2199:	
  3206                           
  3207                           ;mtouch_sensor.c: 510: sensor->sampled = 1;
  3208  04A3  0820               	movf	Sensor_setSampled@sensor,w
  3209  04A4  3E08               	addlw	8
  3210  04A5  0086               	movwf	6
  3211  04A6  0187               	clrf	7
  3212  04A7  1481               	bsf	1,1
  3213  04A8                     i1Ll380:	
  3214                           
  3215                           ;mtouch_sensor.c: 181: callback_sampled ( name );
  3216  04A8  0838               	movf	Sensor_Service@name,w
  3217  04A9  00AE               	movwf	log_info@button
  3218  04AA  084B               	movf	_callback_sampled+1,w
  3219  04AB  008A               	movwf	10
  3220  04AC  084A               	movf	_callback_sampled,w
  3221  04AD  000A               	callw
  3222  04AE  3184               	pagesel	$
  3223                           
  3224                           ;mtouch_sensor.c: 182: }
  3225                           ;mtouch_sensor.c: 183: break;
  3226  04AF  2CBE               	goto	l2329
  3227  04B0                     l2327:	
  3228  04B0  0839               	movf	Sensor_Service@error,w
  3229                           
  3230                           ; Switch size 1, requested type "space"
  3231                           ; Number of cases is 4, Range of values is 0 to 255
  3232                           ; switch strategies available:
  3233                           ; Name         Instructions Cycles
  3234                           ; simple_byte           13     7 (average)
  3235                           ; jumptable            260     6 (fixed)
  3236                           ;	Chosen strategy is simple_byte
  3237  04B1  3A00               	xorlw	0	; case 0
  3238  04B2  1903               	skipnz
  3239  04B3  2C9F               	goto	l2323
  3240  04B4  3AFD               	xorlw	253	; case 253
  3241  04B5  1903               	skipnz
  3242  04B6  2CBE               	goto	l2329
  3243  04B7  3A03               	xorlw	3	; case 254
  3244  04B8  1903               	skipnz
  3245  04B9  2CBE               	goto	l2329
  3246  04BA  3A01               	xorlw	1	; case 255
  3247  04BB  1903               	skipnz
  3248  04BC  2CBE               	goto	l2329
  3249  04BD  2CBE               	goto	l2329
  3250  04BE                     l2329:	
  3251                           
  3252                           ;mtouch_sensor.c: 192: return error;
  3253  04BE  0020               	movlb	0	; select bank0
  3254  04BF  0839               	movf	Sensor_Service@error,w
  3255  04C0  0008               	return
  3256  04C1                     __end_of_Sensor_Service:	
  3257                           
  3258                           	psect	text10
  3259  07C4                     __ptext10:	
  3260 ;; *************** function _Sensor_DefaultCallback *****************
  3261 ;; Defined at:
  3262 ;;		line 406 in file "mtouch/mtouch_sensor.c"
  3263 ;; Parameters:    Size  Location     Type
  3264 ;;  sensor          1   14[BANK0 ] enum E30
  3265 ;; Auto vars:     Size  Location     Type
  3266 ;;		None
  3267 ;; Return value:  Size  Location     Type
  3268 ;;                  1    wreg      void 
  3269 ;; Registers used:
  3270 ;;		None
  3271 ;; Tracked objects:
  3272 ;;		On entry : 1F/0
  3273 ;;		On exit  : 1F/0
  3274 ;;		Unchanged: 1F/0
  3275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3276 ;;      Params:         0       1       0       0
  3277 ;;      Locals:         0       0       0       0
  3278 ;;      Temps:          0       0       0       0
  3279 ;;      Totals:         0       1       0       0
  3280 ;;Total ram usage:        1 bytes
  3281 ;; Hardware stack levels used:    1
  3282 ;; Hardware stack levels required when called:    4
  3283 ;; This function calls:
  3284 ;;		Nothing
  3285 ;; This function is called by:
  3286 ;;		_Sensor_Service
  3287 ;; This function uses a non-reentrant model
  3288 ;;
  3289                           
  3290                           
  3291                           ;psect for function _Sensor_DefaultCallback
  3292  07C4                     _Sensor_DefaultCallback:	
  3293                           
  3294                           ;incstack = 0
  3295                           ; Regs used in _Sensor_DefaultCallback: []
  3296  07C4  0008               	return
  3297  07C5                     __end_of_Sensor_DefaultCallback:	
  3298                           
  3299                           	psect	text11
  3300  0039                     __ptext11:	
  3301 ;; *************** function _log_info *****************
  3302 ;; Defined at:
  3303 ;;		line 86 in file "main.c"
  3304 ;; Parameters:    Size  Location     Type
  3305 ;;  button          1   14[BANK0 ] enum E3778
  3306 ;; Auto vars:     Size  Location     Type
  3307 ;;  value           2   19[BANK0 ] unsigned int 
  3308 ;;  baseline        2   17[BANK0 ] unsigned int 
  3309 ;;  reading         2   15[BANK0 ] unsigned int 
  3310 ;; Return value:  Size  Location     Type
  3311 ;;                  1    wreg      void 
  3312 ;; Registers used:
  3313 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3314 ;; Tracked objects:
  3315 ;;		On entry : 1F/0
  3316 ;;		On exit  : 1F/1
  3317 ;;		Unchanged: 0/0
  3318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3319 ;;      Params:         0       1       0       0
  3320 ;;      Locals:         0       6       0       0
  3321 ;;      Temps:          0       0       0       0
  3322 ;;      Totals:         0       7       0       0
  3323 ;;Total ram usage:        7 bytes
  3324 ;; Hardware stack levels used:    1
  3325 ;; Hardware stack levels required when called:    7
  3326 ;; This function calls:
  3327 ;;		_EUSART_Write
  3328 ;;		_MTOUCH_Button_Baseline_Get
  3329 ;;		_MTOUCH_Button_Reading_Get
  3330 ;;		_MTOUCH_Sensor_RawSample_Get
  3331 ;;		___lwdiv
  3332 ;;		___lwmod
  3333 ;; This function is called by:
  3334 ;;		_main
  3335 ;;		_Sensor_Service
  3336 ;; This function uses a non-reentrant model
  3337 ;;
  3338                           
  3339                           
  3340                           ;psect for function _log_info
  3341  0039                     _log_info:	
  3342                           
  3343                           ;main.c: 87: mtouch_button_reading_t reading = MTOUCH_Button_Reading_Get ( button );
  3344                           
  3345                           ;incstack = 0
  3346                           ; Regs used in _log_info: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3347  0039  082E               	movf	log_info@button,w
  3348  003A  2665               	fcall	_MTOUCH_Button_Reading_Get
  3349  003B  0824               	movf	?_MTOUCH_Button_Reading_Get+1,w
  3350  003C  00B0               	movwf	log_info@reading+1
  3351  003D  0823               	movf	?_MTOUCH_Button_Reading_Get,w
  3352  003E  00AF               	movwf	log_info@reading
  3353                           
  3354                           ;main.c: 88: mtouch_button_reading_t baseline = MTOUCH_Button_Baseline_Get ( button );
  3355  003F  082E               	movf	log_info@button,w
  3356  0040  26DF               	fcall	_MTOUCH_Button_Baseline_Get
  3357  0041  082B               	movf	?_MTOUCH_Button_Baseline_Get+1,w
  3358  0042  00B2               	movwf	log_info@baseline+1
  3359  0043  082A               	movf	?_MTOUCH_Button_Baseline_Get,w
  3360  0044  00B1               	movwf	log_info@baseline
  3361                           
  3362                           ;main.c: 89: mtouch_sensor_sample_t value = MTOUCH_Sensor_RawSample_Get ( (enum mtouch_s
      +                          ensor_names)button );
  3363  0045  082E               	movf	log_info@button,w
  3364  0046  2678               	fcall	_MTOUCH_Sensor_RawSample_Get
  3365  0047  0824               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
  3366  0048  00B4               	movwf	log_info@value+1
  3367  0049  0823               	movf	?_MTOUCH_Sensor_RawSample_Get,w
  3368  004A  00B3               	movwf	log_info@value
  3369                           
  3370                           ;main.c: 90: EUSART_Write ( '0' + button );
  3371  004B  082E               	movf	log_info@button,w
  3372  004C  3E30               	addlw	48
  3373  004D  2598               	fcall	_EUSART_Write
  3374                           
  3375                           ;main.c: 91: EUSART_Write ( ':' );
  3376  004E  303A               	movlw	58
  3377  004F  2598               	fcall	_EUSART_Write
  3378                           
  3379                           ;main.c: 92: EUSART_Write ( value / 10000 + '0' );
  3380  0050  20F3               	fcall	PL78	;call to abstracted procedure
  3381  0051  20FE               	fcall	PL88	;call to abstracted procedure
  3382  0052  24E8               	fcall	___lwdiv
  3383  0053  0820               	movf	?___lwdiv,w
  3384  0054  3E30               	addlw	48
  3385  0055  2598               	fcall	_EUSART_Write
  3386                           
  3387                           ;main.c: 93: EUSART_Write ( value / 1000 % 10 + '0' );
  3388  0056  20D6               	fcall	PL56	;call to abstracted procedure
  3389  0057  20FE               	fcall	PL88	;call to abstracted procedure
  3390  0058  24E8               	fcall	___lwdiv
  3391  0059  20EE               	fcall	PL72	;call to abstracted procedure
  3392  005A  2578               	fcall	___lwmod
  3393  005B  0827               	movf	?___lwmod,w
  3394  005C  3E30               	addlw	48
  3395  005D  2598               	fcall	_EUSART_Write
  3396                           
  3397                           ;main.c: 94: EUSART_Write ( value / 100 % 10 + '0' );
  3398  005E  20DF               	fcall	PL60	;call to abstracted procedure
  3399  005F  20FE               	fcall	PL88	;call to abstracted procedure
  3400  0060  24E8               	fcall	___lwdiv
  3401  0061  20EE               	fcall	PL72	;call to abstracted procedure
  3402  0062  2578               	fcall	___lwmod
  3403  0063  0827               	movf	?___lwmod,w
  3404  0064  3E30               	addlw	48
  3405  0065  2598               	fcall	_EUSART_Write
  3406                           
  3407                           ;main.c: 95: EUSART_Write ( value / 10 % 10 + '0' );
  3408  0066  20E7               	fcall	PL68	;call to abstracted procedure
  3409  0067  20FE               	fcall	PL88	;call to abstracted procedure
  3410  0068  24E8               	fcall	___lwdiv
  3411  0069  20EE               	fcall	PL72	;call to abstracted procedure
  3412  006A  2578               	fcall	___lwmod
  3413  006B  0827               	movf	?___lwmod,w
  3414  006C  3E30               	addlw	48
  3415  006D  2598               	fcall	_EUSART_Write
  3416                           
  3417                           ;main.c: 96: EUSART_Write ( value % 10 + '0' );
  3418  006E  300A               	movlw	10
  3419  006F  0020               	movlb	0	; select bank0
  3420  0070  00A7               	movwf	___lwmod@divisor
  3421  0071  01A8               	clrf	___lwmod@divisor+1
  3422  0072  0834               	movf	log_info@value+1,w
  3423  0073  00AA               	movwf	___lwmod@dividend+1
  3424  0074  0833               	movf	log_info@value,w
  3425  0075  00A9               	movwf	___lwmod@dividend
  3426  0076  2578               	fcall	___lwmod
  3427  0077  0827               	movf	?___lwmod,w
  3428  0078  3E30               	addlw	48
  3429  0079  2598               	fcall	_EUSART_Write
  3430                           
  3431                           ;main.c: 97: EUSART_Write ( '-' );
  3432  007A  302D               	movlw	45
  3433  007B  2598               	fcall	_EUSART_Write
  3434                           
  3435                           ;main.c: 98: EUSART_Write ( reading / 10000 + '0' );
  3436  007C  20F3               	fcall	PL78	;call to abstracted procedure
  3437  007D  20F9               	fcall	PL84	;call to abstracted procedure
  3438  007E  24E8               	fcall	___lwdiv
  3439  007F  0820               	movf	?___lwdiv,w
  3440  0080  3E30               	addlw	48
  3441  0081  2598               	fcall	_EUSART_Write
  3442                           
  3443                           ;main.c: 99: EUSART_Write ( reading / 1000 % 10 + '0' );
  3444  0082  20D6               	fcall	PL56	;call to abstracted procedure
  3445  0083  20F9               	fcall	PL84	;call to abstracted procedure
  3446  0084  24E8               	fcall	___lwdiv
  3447  0085  20EE               	fcall	PL72	;call to abstracted procedure
  3448  0086  2578               	fcall	___lwmod
  3449  0087  0827               	movf	?___lwmod,w
  3450  0088  3E30               	addlw	48
  3451  0089  2598               	fcall	_EUSART_Write
  3452                           
  3453                           ;main.c: 100: EUSART_Write ( reading / 100 % 10 + '0' );
  3454  008A  20DF               	fcall	PL60	;call to abstracted procedure
  3455  008B  20F9               	fcall	PL84	;call to abstracted procedure
  3456  008C  24E8               	fcall	___lwdiv
  3457  008D  20EE               	fcall	PL72	;call to abstracted procedure
  3458  008E  2578               	fcall	___lwmod
  3459  008F  0827               	movf	?___lwmod,w
  3460  0090  3E30               	addlw	48
  3461  0091  2598               	fcall	_EUSART_Write
  3462                           
  3463                           ;main.c: 101: EUSART_Write ( reading / 10 % 10 + '0' );
  3464  0092  20E7               	fcall	PL68	;call to abstracted procedure
  3465  0093  20F9               	fcall	PL84	;call to abstracted procedure
  3466  0094  24E8               	fcall	___lwdiv
  3467  0095  20EE               	fcall	PL72	;call to abstracted procedure
  3468  0096  2578               	fcall	___lwmod
  3469  0097  0827               	movf	?___lwmod,w
  3470  0098  3E30               	addlw	48
  3471  0099  2598               	fcall	_EUSART_Write
  3472                           
  3473                           ;main.c: 102: EUSART_Write ( reading % 10 + '0' );
  3474  009A  300A               	movlw	10
  3475  009B  0020               	movlb	0	; select bank0
  3476  009C  00A7               	movwf	___lwmod@divisor
  3477  009D  01A8               	clrf	___lwmod@divisor+1
  3478  009E  0830               	movf	log_info@reading+1,w
  3479  009F  00AA               	movwf	___lwmod@dividend+1
  3480  00A0  082F               	movf	log_info@reading,w
  3481  00A1  00A9               	movwf	___lwmod@dividend
  3482  00A2  2578               	fcall	___lwmod
  3483  00A3  0827               	movf	?___lwmod,w
  3484  00A4  3E30               	addlw	48
  3485  00A5  2598               	fcall	_EUSART_Write
  3486                           
  3487                           ;main.c: 103: EUSART_Write ( '-' );
  3488  00A6  302D               	movlw	45
  3489  00A7  2598               	fcall	_EUSART_Write
  3490                           
  3491                           ;main.c: 104: EUSART_Write ( baseline / 10000 + '0' );
  3492  00A8  20F3               	fcall	PL78	;call to abstracted procedure
  3493  00A9  2103               	fcall	PL90	;call to abstracted procedure
  3494  00AA  24E8               	fcall	___lwdiv
  3495  00AB  0820               	movf	?___lwdiv,w
  3496  00AC  3E30               	addlw	48
  3497  00AD  2598               	fcall	_EUSART_Write
  3498                           
  3499                           ;main.c: 105: EUSART_Write ( baseline / 1000 % 10 + '0' );
  3500  00AE  20D6               	fcall	PL56	;call to abstracted procedure
  3501  00AF  2103               	fcall	PL90	;call to abstracted procedure
  3502  00B0  24E8               	fcall	___lwdiv
  3503  00B1  20EE               	fcall	PL72	;call to abstracted procedure
  3504  00B2  2578               	fcall	___lwmod
  3505  00B3  0827               	movf	?___lwmod,w
  3506  00B4  3E30               	addlw	48
  3507  00B5  2598               	fcall	_EUSART_Write
  3508                           
  3509                           ;main.c: 106: EUSART_Write ( baseline / 100 % 10 + '0' );
  3510  00B6  20DF               	fcall	PL60	;call to abstracted procedure
  3511  00B7  2103               	fcall	PL90	;call to abstracted procedure
  3512  00B8  24E8               	fcall	___lwdiv
  3513  00B9  20EE               	fcall	PL72	;call to abstracted procedure
  3514  00BA  2578               	fcall	___lwmod
  3515  00BB  0827               	movf	?___lwmod,w
  3516  00BC  3E30               	addlw	48
  3517  00BD  2598               	fcall	_EUSART_Write
  3518                           
  3519                           ;main.c: 107: EUSART_Write ( baseline / 10 % 10 + '0' );
  3520  00BE  20E7               	fcall	PL68	;call to abstracted procedure
  3521  00BF  2103               	fcall	PL90	;call to abstracted procedure
  3522  00C0  24E8               	fcall	___lwdiv
  3523  00C1  20EE               	fcall	PL72	;call to abstracted procedure
  3524  00C2  2578               	fcall	___lwmod
  3525  00C3  0827               	movf	?___lwmod,w
  3526  00C4  3E30               	addlw	48
  3527  00C5  2598               	fcall	_EUSART_Write
  3528                           
  3529                           ;main.c: 108: EUSART_Write ( baseline % 10 + '0' );
  3530  00C6  300A               	movlw	10
  3531  00C7  0020               	movlb	0	; select bank0
  3532  00C8  00A7               	movwf	___lwmod@divisor
  3533  00C9  01A8               	clrf	___lwmod@divisor+1
  3534  00CA  0832               	movf	log_info@baseline+1,w
  3535  00CB  00AA               	movwf	___lwmod@dividend+1
  3536  00CC  0831               	movf	log_info@baseline,w
  3537  00CD  00A9               	movwf	___lwmod@dividend
  3538  00CE  2578               	fcall	___lwmod
  3539  00CF  0827               	movf	?___lwmod,w
  3540  00D0  3E30               	addlw	48
  3541  00D1  2598               	fcall	_EUSART_Write
  3542                           
  3543                           ;main.c: 109: EUSART_Write ( '\r' );
  3544  00D2  300D               	movlw	13
  3545  00D3  2598               	fcall	_EUSART_Write
  3546                           
  3547                           ;main.c: 110: EUSART_Write ( '\n' );
  3548  00D4  300A               	movlw	10
  3549  00D5  2D98               	ljmp	_EUSART_Write
  3550  00D6                     __end_of_log_info:	
  3551  00D6                     PL56:	
  3552  00D6  300A               	movlw	10
  3553  00D7  0020               	movlb	0	; select bank0
  3554  00D8  00A7               	movwf	___lwmod@divisor
  3555  00D9  30E8               	movlw	232
  3556  00DA  01A8               	clrf	___lwmod@divisor+1
  3557  00DB  00A0               	movwf	___lwdiv@divisor
  3558  00DC  3003               	movlw	3
  3559  00DD  00A1               	movwf	___lwdiv@divisor+1
  3560  00DE  0008               	return
  3561  00DF                     __end_ofPL56:	
  3562  00DF                     PL60:	
  3563  00DF  300A               	movlw	10
  3564  00E0  0020               	movlb	0	; select bank0
  3565  00E1  00A7               	movwf	___lwmod@divisor
  3566  00E2  3064               	movlw	100
  3567  00E3  01A8               	clrf	___lwmod@divisor+1
  3568  00E4  00A0               	movwf	___lwdiv@divisor
  3569  00E5  01A1               	clrf	___lwdiv@divisor+1
  3570  00E6  0008               	return
  3571  00E7                     __end_ofPL60:	
  3572  00E7                     PL68:	
  3573  00E7  300A               	movlw	10
  3574  00E8  0020               	movlb	0	; select bank0
  3575  00E9  00A7               	movwf	___lwmod@divisor
  3576  00EA  01A8               	clrf	___lwmod@divisor+1
  3577  00EB  00A0               	movwf	___lwdiv@divisor
  3578  00EC  01A1               	clrf	___lwdiv@divisor+1
  3579  00ED  0008               	return
  3580  00EE                     __end_ofPL68:	
  3581  00EE                     PL72:	
  3582  00EE  0821               	movf	?___lwdiv+1,w
  3583  00EF  00AA               	movwf	___lwmod@dividend+1
  3584  00F0  0820               	movf	?___lwdiv,w
  3585  00F1  00A9               	movwf	___lwmod@dividend
  3586  00F2  0008               	return
  3587  00F3                     __end_ofPL72:	
  3588  00F3                     PL78:	
  3589  00F3  3010               	movlw	16
  3590  00F4  0020               	movlb	0	; select bank0
  3591  00F5  00A0               	movwf	___lwdiv@divisor
  3592  00F6  3027               	movlw	39
  3593  00F7  00A1               	movwf	___lwdiv@divisor+1
  3594  00F8  0008               	return
  3595  00F9                     __end_ofPL78:	
  3596  00F9                     PL84:	
  3597  00F9  0830               	movf	log_info@reading+1,w
  3598  00FA  00A3               	movwf	___lwdiv@dividend+1
  3599  00FB  082F               	movf	log_info@reading,w
  3600  00FC  00A2               	movwf	___lwdiv@dividend
  3601  00FD  0008               	return
  3602  00FE                     __end_ofPL84:	
  3603  00FE                     PL88:	
  3604  00FE  0834               	movf	log_info@value+1,w
  3605  00FF  00A3               	movwf	___lwdiv@dividend+1
  3606  0100  0833               	movf	log_info@value,w
  3607  0101  00A2               	movwf	___lwdiv@dividend
  3608  0102  0008               	return
  3609  0103                     __end_ofPL88:	
  3610  0103                     PL90:	
  3611  0103  0832               	movf	log_info@baseline+1,w
  3612  0104  00A3               	movwf	___lwdiv@dividend+1
  3613  0105  0831               	movf	log_info@baseline,w
  3614  0106  00A2               	movwf	___lwdiv@dividend
  3615  0107  0008               	return
  3616  0108                     __end_ofPL90:	
  3617                           
  3618                           	psect	text12
  3619  0578                     __ptext12:	
  3620 ;; *************** function ___lwmod *****************
  3621 ;; Defined at:
  3622 ;;		line 6 in file "D:\Program Files\Microchip\xc8\v1.45\sources\common\lwmod.c"
  3623 ;; Parameters:    Size  Location     Type
  3624 ;;  divisor         2    7[BANK0 ] unsigned int 
  3625 ;;  dividend        2    9[BANK0 ] unsigned int 
  3626 ;; Auto vars:     Size  Location     Type
  3627 ;;  counter         1   11[BANK0 ] unsigned char 
  3628 ;; Return value:  Size  Location     Type
  3629 ;;                  2    7[BANK0 ] unsigned int 
  3630 ;; Registers used:
  3631 ;;		wreg, status,2, status,0
  3632 ;; Tracked objects:
  3633 ;;		On entry : 1F/0
  3634 ;;		On exit  : 1F/0
  3635 ;;		Unchanged: 0/0
  3636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3637 ;;      Params:         0       4       0       0
  3638 ;;      Locals:         0       1       0       0
  3639 ;;      Temps:          0       0       0       0
  3640 ;;      Totals:         0       5       0       0
  3641 ;;Total ram usage:        5 bytes
  3642 ;; Hardware stack levels used:    1
  3643 ;; Hardware stack levels required when called:    4
  3644 ;; This function calls:
  3645 ;;		Nothing
  3646 ;; This function is called by:
  3647 ;;		_log_info
  3648 ;; This function uses a non-reentrant model
  3649 ;;
  3650                           
  3651                           
  3652                           ;psect for function ___lwmod
  3653  0578                     ___lwmod:	
  3654                           
  3655                           ;incstack = 0
  3656                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  3657  0578  0827               	movf	___lwmod@divisor,w
  3658  0579  0428               	iorwf	___lwmod@divisor+1,w
  3659  057A  1903               	btfsc	3,2
  3660  057B  2D93               	goto	l2145
  3661  057C  01AB               	clrf	___lwmod@counter
  3662  057D                     L1:	
  3663  057D  0AAB               	incf	___lwmod@counter,f
  3664  057E  1BA8               	btfsc	___lwmod@divisor+1,7
  3665  057F  2D83               	goto	l2137
  3666  0580  35A7               	lslf	___lwmod@divisor,f
  3667  0581  0DA8               	rlf	___lwmod@divisor+1,f
  3668  0582  2D7D               	goto	L1
  3669  0583                     l2137:	
  3670  0583  0828               	movf	___lwmod@divisor+1,w
  3671  0584  022A               	subwf	___lwmod@dividend+1,w
  3672  0585  1D03               	skipz
  3673  0586  2D89               	goto	u1145
  3674  0587  0827               	movf	___lwmod@divisor,w
  3675  0588  0229               	subwf	___lwmod@dividend,w
  3676  0589                     u1145:	
  3677  0589  1C03               	skipc
  3678  058A  2D8F               	goto	l2141
  3679  058B  0827               	movf	___lwmod@divisor,w
  3680  058C  02A9               	subwf	___lwmod@dividend,f
  3681  058D  0828               	movf	___lwmod@divisor+1,w
  3682  058E  3BAA               	subwfb	___lwmod@dividend+1,f
  3683  058F                     l2141:	
  3684  058F  36A8               	lsrf	___lwmod@divisor+1,f
  3685  0590  0CA7               	rrf	___lwmod@divisor,f
  3686  0591  0BAB               	decfsz	___lwmod@counter,f
  3687  0592  2D83               	goto	l2137
  3688  0593                     l2145:	
  3689  0593  082A               	movf	___lwmod@dividend+1,w
  3690  0594  00A8               	movwf	?___lwmod+1
  3691  0595  0829               	movf	___lwmod@dividend,w
  3692  0596  00A7               	movwf	?___lwmod
  3693  0597  0008               	return
  3694  0598                     __end_of___lwmod:	
  3695                           
  3696                           	psect	text13
  3697  04E8                     __ptext13:	
  3698 ;; *************** function ___lwdiv *****************
  3699 ;; Defined at:
  3700 ;;		line 6 in file "D:\Program Files\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  3701 ;; Parameters:    Size  Location     Type
  3702 ;;  divisor         2    0[BANK0 ] unsigned int 
  3703 ;;  dividend        2    2[BANK0 ] unsigned int 
  3704 ;; Auto vars:     Size  Location     Type
  3705 ;;  quotient        2    4[BANK0 ] unsigned int 
  3706 ;;  counter         1    6[BANK0 ] unsigned char 
  3707 ;; Return value:  Size  Location     Type
  3708 ;;                  2    0[BANK0 ] unsigned int 
  3709 ;; Registers used:
  3710 ;;		wreg, status,2, status,0
  3711 ;; Tracked objects:
  3712 ;;		On entry : 1F/0
  3713 ;;		On exit  : 1F/0
  3714 ;;		Unchanged: 0/0
  3715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3716 ;;      Params:         0       4       0       0
  3717 ;;      Locals:         0       3       0       0
  3718 ;;      Temps:          0       0       0       0
  3719 ;;      Totals:         0       7       0       0
  3720 ;;Total ram usage:        7 bytes
  3721 ;; Hardware stack levels used:    1
  3722 ;; Hardware stack levels required when called:    4
  3723 ;; This function calls:
  3724 ;;		Nothing
  3725 ;; This function is called by:
  3726 ;;		_log_info
  3727 ;; This function uses a non-reentrant model
  3728 ;;
  3729                           
  3730                           
  3731                           ;psect for function ___lwdiv
  3732  04E8                     ___lwdiv:	
  3733                           
  3734                           ;incstack = 0
  3735                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3736  04E8  01A4               	clrf	___lwdiv@quotient
  3737  04E9  01A5               	clrf	___lwdiv@quotient+1
  3738  04EA  0820               	movf	___lwdiv@divisor,w
  3739  04EB  0421               	iorwf	___lwdiv@divisor+1,w
  3740  04EC  1903               	btfsc	3,2
  3741  04ED  2D08               	goto	l2125
  3742  04EE  01A6               	clrf	___lwdiv@counter
  3743  04EF                     L2:	
  3744  04EF  0AA6               	incf	___lwdiv@counter,f
  3745  04F0  1BA1               	btfsc	___lwdiv@divisor+1,7
  3746  04F1  2CF5               	goto	l2113
  3747  04F2  35A0               	lslf	___lwdiv@divisor,f
  3748  04F3  0DA1               	rlf	___lwdiv@divisor+1,f
  3749  04F4  2CEF               	goto	L2
  3750  04F5                     l2113:	
  3751  04F5  35A4               	lslf	___lwdiv@quotient,f
  3752  04F6  0DA5               	rlf	___lwdiv@quotient+1,f
  3753  04F7  0821               	movf	___lwdiv@divisor+1,w
  3754  04F8  0223               	subwf	___lwdiv@dividend+1,w
  3755  04F9  1D03               	skipz
  3756  04FA  2CFD               	goto	u1105
  3757  04FB  0820               	movf	___lwdiv@divisor,w
  3758  04FC  0222               	subwf	___lwdiv@dividend,w
  3759  04FD                     u1105:	
  3760  04FD  1C03               	skipc
  3761  04FE  2D04               	goto	l2121
  3762  04FF  0820               	movf	___lwdiv@divisor,w
  3763  0500  02A2               	subwf	___lwdiv@dividend,f
  3764  0501  0821               	movf	___lwdiv@divisor+1,w
  3765  0502  3BA3               	subwfb	___lwdiv@dividend+1,f
  3766  0503  1424               	bsf	___lwdiv@quotient,0
  3767  0504                     l2121:	
  3768  0504  36A1               	lsrf	___lwdiv@divisor+1,f
  3769  0505  0CA0               	rrf	___lwdiv@divisor,f
  3770  0506  0BA6               	decfsz	___lwdiv@counter,f
  3771  0507  2CF5               	goto	l2113
  3772  0508                     l2125:	
  3773  0508  0825               	movf	___lwdiv@quotient+1,w
  3774  0509  00A1               	movwf	?___lwdiv+1
  3775  050A  0824               	movf	___lwdiv@quotient,w
  3776  050B  00A0               	movwf	?___lwdiv
  3777  050C  0008               	return
  3778  050D                     __end_of___lwdiv:	
  3779                           
  3780                           	psect	text14
  3781  0665                     __ptext14:	
  3782 ;; *************** function _MTOUCH_Button_Reading_Get *****************
  3783 ;; Defined at:
  3784 ;;		line 288 in file "mtouch/mtouch_button.c"
  3785 ;; Parameters:    Size  Location     Type
  3786 ;;  name            1    wreg     enum E3654
  3787 ;; Auto vars:     Size  Location     Type
  3788 ;;  name            1    6[BANK0 ] enum E3654
  3789 ;; Return value:  Size  Location     Type
  3790 ;;                  2    3[BANK0 ] unsigned int 
  3791 ;; Registers used:
  3792 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3793 ;; Tracked objects:
  3794 ;;		On entry : 1F/0
  3795 ;;		On exit  : 1F/0
  3796 ;;		Unchanged: 0/0
  3797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3798 ;;      Params:         0       3       0       0
  3799 ;;      Locals:         0       1       0       0
  3800 ;;      Temps:          0       0       0       0
  3801 ;;      Totals:         0       4       0       0
  3802 ;;Total ram usage:        4 bytes
  3803 ;; Hardware stack levels used:    1
  3804 ;; Hardware stack levels required when called:    5
  3805 ;; This function calls:
  3806 ;;		___bmul
  3807 ;; This function is called by:
  3808 ;;		_log_info
  3809 ;; This function uses a non-reentrant model
  3810 ;;
  3811                           
  3812                           
  3813                           ;psect for function _MTOUCH_Button_Reading_Get
  3814  0665                     _MTOUCH_Button_Reading_Get:	
  3815                           
  3816                           ;incstack = 0
  3817                           ; Regs used in _MTOUCH_Button_Reading_Get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  3818                           ;MTOUCH_Button_Reading_Get@name stored from wreg
  3819  0665  00A6               	movwf	MTOUCH_Button_Reading_Get@name
  3820                           
  3821                           ;mtouch_button.c: 289: if ( name < 1 )
  3822  0666  0826               	movf	MTOUCH_Button_Reading_Get@name,w
  3823  0667  1D03               	btfss	3,2
  3824  0668  2E75               	goto	l2083
  3825                           
  3826                           ;mtouch_button.c: 290: return mtouch_button[name].reading;
  3827  0669  3016               	movlw	22
  3828  066A  00A0               	movwf	___bmul@multiplicand
  3829  066B  0826               	movf	MTOUCH_Button_Reading_Get@name,w
  3830  066C  2731               	fcall	___bmul
  3831  066D  3EC7               	addlw	(low ((_mtouch_button| 0+7)))& (0+255)
  3832  066E  0086               	movwf	6
  3833  066F  0187               	clrf	7
  3834  0670  3F40               	moviw [0]fsr1
  3835  0671  00A3               	movwf	?_MTOUCH_Button_Reading_Get
  3836  0672  3F41               	moviw [1]fsr1
  3837  0673  00A4               	movwf	?_MTOUCH_Button_Reading_Get+1
  3838  0674  0008               	return
  3839  0675                     l2083:	
  3840                           
  3841                           ;mtouch_button.c: 291: else
  3842                           ;mtouch_button.c: 292: return ( mtouch_button_reading_t ) 0;
  3843  0675  01A3               	clrf	?_MTOUCH_Button_Reading_Get
  3844  0676  01A4               	clrf	?_MTOUCH_Button_Reading_Get+1
  3845  0677  0008               	return
  3846  0678                     __end_of_MTOUCH_Button_Reading_Get:	
  3847                           
  3848                           	psect	text15
  3849  06DF                     __ptext15:	
  3850 ;; *************** function _MTOUCH_Button_Baseline_Get *****************
  3851 ;; Defined at:
  3852 ;;		line 324 in file "mtouch/mtouch_button.c"
  3853 ;; Parameters:    Size  Location     Type
  3854 ;;  name            1    wreg     enum E3654
  3855 ;; Auto vars:     Size  Location     Type
  3856 ;;  name            1   13[BANK0 ] enum E3654
  3857 ;; Return value:  Size  Location     Type
  3858 ;;                  2   10[BANK0 ] unsigned int 
  3859 ;; Registers used:
  3860 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3861 ;; Tracked objects:
  3862 ;;		On entry : 1F/0
  3863 ;;		On exit  : 1F/0
  3864 ;;		Unchanged: 0/0
  3865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3866 ;;      Params:         0       3       0       0
  3867 ;;      Locals:         0       1       0       0
  3868 ;;      Temps:          0       0       0       0
  3869 ;;      Totals:         0       4       0       0
  3870 ;;Total ram usage:        4 bytes
  3871 ;; Hardware stack levels used:    1
  3872 ;; Hardware stack levels required when called:    6
  3873 ;; This function calls:
  3874 ;;		_Button_Baseline_Get_helper
  3875 ;; This function is called by:
  3876 ;;		_log_info
  3877 ;; This function uses a non-reentrant model
  3878 ;;
  3879                           
  3880                           
  3881                           ;psect for function _MTOUCH_Button_Baseline_Get
  3882  06DF                     _MTOUCH_Button_Baseline_Get:	
  3883                           
  3884                           ;incstack = 0
  3885                           ; Regs used in _MTOUCH_Button_Baseline_Get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  3886                           ;MTOUCH_Button_Baseline_Get@name stored from wreg
  3887  06DF  00AD               	movwf	MTOUCH_Button_Baseline_Get@name
  3888                           
  3889                           ;mtouch_button.c: 325: if ( name < 1 )
  3890  06E0  082D               	movf	MTOUCH_Button_Baseline_Get@name,w
  3891  06E1  1D03               	btfss	3,2
  3892  06E2  2EEA               	goto	l2095
  3893                           
  3894                           ;mtouch_button.c: 326: return Button_Baseline_Get_helper ( name );
  3895  06E3  082D               	movf	MTOUCH_Button_Baseline_Get@name,w
  3896  06E4  25D3               	fcall	_Button_Baseline_Get_helper
  3897  06E5  0824               	movf	?_Button_Baseline_Get_helper+1,w
  3898  06E6  00AB               	movwf	?_MTOUCH_Button_Baseline_Get+1
  3899  06E7  0823               	movf	?_Button_Baseline_Get_helper,w
  3900  06E8  00AA               	movwf	?_MTOUCH_Button_Baseline_Get
  3901  06E9  0008               	return
  3902  06EA                     l2095:	
  3903                           
  3904                           ;mtouch_button.c: 327: else
  3905                           ;mtouch_button.c: 328: return ( mtouch_button_reading_t ) 0;
  3906  06EA  01AA               	clrf	?_MTOUCH_Button_Baseline_Get
  3907  06EB  01AB               	clrf	?_MTOUCH_Button_Baseline_Get+1
  3908  06EC  0008               	return
  3909  06ED                     __end_of_MTOUCH_Button_Baseline_Get:	
  3910                           
  3911                           	psect	text16
  3912  05D3                     __ptext16:	
  3913 ;; *************** function _Button_Baseline_Get_helper *****************
  3914 ;; Defined at:
  3915 ;;		line 331 in file "mtouch/mtouch_button.c"
  3916 ;; Parameters:    Size  Location     Type
  3917 ;;  name            1    wreg     enum E3654
  3918 ;; Auto vars:     Size  Location     Type
  3919 ;;  name            1    9[BANK0 ] enum E3654
  3920 ;; Return value:  Size  Location     Type
  3921 ;;                  2    3[BANK0 ] unsigned int 
  3922 ;; Registers used:
  3923 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3924 ;; Tracked objects:
  3925 ;;		On entry : 1F/0
  3926 ;;		On exit  : 1F/0
  3927 ;;		Unchanged: 0/0
  3928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3929 ;;      Params:         0       2       0       0
  3930 ;;      Locals:         0       1       0       0
  3931 ;;      Temps:          0       4       0       0
  3932 ;;      Totals:         0       7       0       0
  3933 ;;Total ram usage:        7 bytes
  3934 ;; Hardware stack levels used:    1
  3935 ;; Hardware stack levels required when called:    5
  3936 ;; This function calls:
  3937 ;;		___bmul
  3938 ;; This function is called by:
  3939 ;;		_MTOUCH_Button_Baseline_Get
  3940 ;; This function uses a non-reentrant model
  3941 ;;
  3942                           
  3943                           
  3944                           ;psect for function _Button_Baseline_Get_helper
  3945  05D3                     _Button_Baseline_Get_helper:	
  3946                           
  3947                           ;incstack = 0
  3948                           ; Regs used in _Button_Baseline_Get_helper: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  3949                           ;Button_Baseline_Get_helper@name stored from wreg
  3950  05D3  00A9               	movwf	Button_Baseline_Get_helper@name
  3951                           
  3952                           ;mtouch_button.c: 332: return ( mtouch_button_reading_t ) ( ( mtouch_button[name].baseli
      +                          ne ) >> ((uint8_t)4) );
  3953  05D4  3016               	movlw	22
  3954  05D5  00A0               	movwf	___bmul@multiplicand
  3955  05D6  0829               	movf	Button_Baseline_Get_helper@name,w
  3956  05D7  2731               	fcall	___bmul
  3957  05D8  3EC9               	addlw	(low ((_mtouch_button| 0+9)))& (0+255)
  3958  05D9  0086               	movwf	6
  3959  05DA  0187               	clrf	7
  3960  05DB  3F40               	moviw [0]fsr1
  3961  05DC  00A5               	movwf	??_Button_Baseline_Get_helper
  3962  05DD  3F41               	moviw [1]fsr1
  3963  05DE  00A6               	movwf	??_Button_Baseline_Get_helper+1
  3964  05DF  3F42               	moviw [2]fsr1
  3965  05E0  00A7               	movwf	??_Button_Baseline_Get_helper+2
  3966  05E1  3F43               	moviw [3]fsr1
  3967  05E2  00A8               	movwf	??_Button_Baseline_Get_helper+3
  3968  05E3  3004               	movlw	4
  3969  05E4                     u915:	
  3970  05E4  36A8               	lsrf	??_Button_Baseline_Get_helper+3,f
  3971  05E5  0CA7               	rrf	??_Button_Baseline_Get_helper+2,f
  3972  05E6  0CA6               	rrf	??_Button_Baseline_Get_helper+1,f
  3973  05E7  0CA5               	rrf	??_Button_Baseline_Get_helper,f
  3974  05E8  0B89               	decfsz	9,f
  3975  05E9  2DE4               	goto	u915
  3976  05EA  0826               	movf	??_Button_Baseline_Get_helper+1,w
  3977  05EB  00A4               	movwf	?_Button_Baseline_Get_helper+1
  3978  05EC  0825               	movf	??_Button_Baseline_Get_helper,w
  3979  05ED  00A3               	movwf	?_Button_Baseline_Get_helper
  3980  05EE  0008               	return
  3981  05EF                     __end_of_Button_Baseline_Get_helper:	
  3982                           
  3983                           	psect	text17
  3984  0598                     __ptext17:	
  3985 ;; *************** function _EUSART_Write *****************
  3986 ;; Defined at:
  3987 ;;		line 31 in file "driver/eusart.c"
  3988 ;; Parameters:    Size  Location     Type
  3989 ;;  byte            1    wreg     unsigned char 
  3990 ;; Auto vars:     Size  Location     Type
  3991 ;;  byte            1    0[BANK0 ] unsigned char 
  3992 ;; Return value:  Size  Location     Type
  3993 ;;                  1    wreg      unsigned char 
  3994 ;; Registers used:
  3995 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3996 ;; Tracked objects:
  3997 ;;		On entry : 1E/0
  3998 ;;		On exit  : 1F/1
  3999 ;;		Unchanged: 0/0
  4000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4001 ;;      Params:         0       0       0       0
  4002 ;;      Locals:         0       1       0       0
  4003 ;;      Temps:          0       0       0       0
  4004 ;;      Totals:         0       1       0       0
  4005 ;;Total ram usage:        1 bytes
  4006 ;; Hardware stack levels used:    1
  4007 ;; Hardware stack levels required when called:    4
  4008 ;; This function calls:
  4009 ;;		Nothing
  4010 ;; This function is called by:
  4011 ;;		_log_info
  4012 ;; This function uses a non-reentrant model
  4013 ;;
  4014                           
  4015                           
  4016                           ;psect for function _EUSART_Write
  4017  0598                     _EUSART_Write:	
  4018                           
  4019                           ;incstack = 0
  4020                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  4021                           ;EUSART_Write@byte stored from wreg
  4022  0598  0020               	movlb	0	; select bank0
  4023  0599  00A0               	movwf	EUSART_Write@byte
  4024  059A                     l1965:	
  4025                           ;eusart.c: 32: while ( 0 == txRemain );
  4026                           
  4027  059A  087B               	movf	_txRemain,w
  4028  059B  1903               	btfsc	3,2
  4029  059C  2D9A               	goto	l1965
  4030                           
  4031                           ;eusart.c: 34: if ( !PIE1bits.TXIE ) {
  4032  059D  0021               	movlb	1	; select bank1
  4033  059E  1A11               	btfsc	17,4	;volatile
  4034  059F  2DA5               	goto	l35
  4035                           
  4036                           ;eusart.c: 35: TXREG = byte;
  4037  05A0  0020               	movlb	0	; select bank0
  4038  05A1  0820               	movf	EUSART_Write@byte,w
  4039  05A2  0023               	movlb	3	; select bank3
  4040  05A3  009A               	movwf	26	;volatile
  4041                           
  4042                           ;eusart.c: 36: } else {
  4043  05A4  2DB3               	goto	l1979
  4044  05A5                     l35:	
  4045                           
  4046                           ;eusart.c: 37: PIE1bits.TXIE = 0;
  4047  05A5  1211               	bcf	17,4	;volatile
  4048                           
  4049                           ;eusart.c: 38: txBuf[txHead++] = byte;
  4050  05A6  087A               	movf	_txHead,w
  4051  05A7  3EA0               	addlw	(low (_txBuf| 0))& (0+255)
  4052  05A8  0086               	movwf	6
  4053  05A9  0187               	clrf	7
  4054  05AA  0020               	movlb	0	; select bank0
  4055  05AB  0820               	movf	EUSART_Write@byte,w
  4056  05AC  0081               	movwf	1
  4057  05AD  3020               	movlw	32
  4058  05AE  0AFA               	incf	_txHead,f
  4059                           
  4060                           ;eusart.c: 39: if ( sizeof (txBuf ) <= txHead ) {
  4061  05AF  027A               	subwf	_txHead,w
  4062  05B0  1803               	btfsc	3,0
  4063                           
  4064                           ;eusart.c: 40: txHead = 0;
  4065  05B1  01FA               	clrf	_txHead
  4066                           
  4067                           ;eusart.c: 41: }
  4068                           ;eusart.c: 42: txRemain--;
  4069  05B2  03FB               	decf	_txRemain,f
  4070  05B3                     l1979:	
  4071                           
  4072                           ;eusart.c: 43: }
  4073                           ;eusart.c: 44: PIE1bits.TXIE = 1;
  4074  05B3  0021               	movlb	1	; select bank1
  4075  05B4  1611               	bsf	17,4	;volatile
  4076  05B5  0008               	return
  4077  05B6                     __end_of_EUSART_Write:	
  4078                           
  4079                           	psect	text18
  4080  0000                     __ptext18:	
  4081 ;; *************** function _Sensor_setSampled *****************
  4082 ;; Defined at:
  4083 ;;		line 509 in file "mtouch/mtouch_sensor.c"
  4084 ;; Parameters:    Size  Location     Type
  4085 ;;  sensor          1    wreg     PTR struct .
  4086 ;;		 -> mtouch_sensor(9), 
  4087 ;; Auto vars:     Size  Location     Type
  4088 ;;  sensor          1    0[BANK0 ] PTR struct .
  4089 ;;		 -> mtouch_sensor(9), 
  4090 ;; Return value:  Size  Location     Type
  4091 ;;                  1    wreg      void 
  4092 ;; Registers used:
  4093 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4094 ;; Tracked objects:
  4095 ;;		On entry : 1F/0
  4096 ;;		On exit  : 1F/0
  4097 ;;		Unchanged: 0/0
  4098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4099 ;;      Params:         0       0       0       0
  4100 ;;      Locals:         0       1       0       0
  4101 ;;      Temps:          0       0       0       0
  4102 ;;      Totals:         0       1       0       0
  4103 ;;Total ram usage:        1 bytes
  4104 ;; Hardware stack levels used:    1
  4105 ;; Hardware stack levels required when called:    4
  4106 ;; This function calls:
  4107 ;;		Nothing
  4108 ;; This function is called by:
  4109 ;;		_Sensor_Service
  4110 ;; This function uses a non-reentrant model
  4111 ;;
  4112                           
  4113  0000                     _Sensor_setSampled:	
  4114                           ;psect for function _Sensor_setSampled
  4115                           
  4116  0000                     __end_of_Sensor_setSampled:	
  4117                           ;mtouch_sensor.c: 510: sensor->sampled = 1;
  4118                           
  4119                           ;incstack = 0
  4120                           ; Regs used in _Sensor_setSampled: [wreg+fsr1l+fsr1h+status,2+status,0]
  4121                           ;Sensor_setSampled@sensor stored from wreg
  4122                           
  4123                           
  4124                           	psect	text19
  4125  069D                     __ptext19:	
  4126 ;; *************** function _Sensor_RawSample_Update *****************
  4127 ;; Defined at:
  4128 ;;		line 391 in file "mtouch/mtouch_sensor.c"
  4129 ;; Parameters:    Size  Location     Type
  4130 ;;  sensor          1    wreg     PTR struct .
  4131 ;;		 -> mtouch_sensor(9), 
  4132 ;; Auto vars:     Size  Location     Type
  4133 ;;  sensor          1    0[BANK0 ] PTR struct .
  4134 ;;		 -> mtouch_sensor(9), 
  4135 ;; Return value:  Size  Location     Type
  4136 ;;                  1    wreg      void 
  4137 ;; Registers used:
  4138 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4139 ;; Tracked objects:
  4140 ;;		On entry : 1F/0
  4141 ;;		On exit  : 1F/0
  4142 ;;		Unchanged: 0/0
  4143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4144 ;;      Params:         0       0       0       0
  4145 ;;      Locals:         0       1       0       0
  4146 ;;      Temps:          0       0       0       0
  4147 ;;      Totals:         0       1       0       0
  4148 ;;Total ram usage:        1 bytes
  4149 ;; Hardware stack levels used:    1
  4150 ;; Hardware stack levels required when called:    4
  4151 ;; This function calls:
  4152 ;;		Nothing
  4153 ;; This function is called by:
  4154 ;;		_Sensor_Service
  4155 ;; This function uses a non-reentrant model
  4156 ;;
  4157                           
  4158                           
  4159                           ;psect for function _Sensor_RawSample_Update
  4160  069D                     _Sensor_RawSample_Update:	
  4161                           
  4162                           ;incstack = 0
  4163                           ; Regs used in _Sensor_RawSample_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
  4164                           ;Sensor_RawSample_Update@sensor stored from wreg
  4165  069D  00A0               	movwf	Sensor_RawSample_Update@sensor
  4166                           
  4167                           ;mtouch_sensor.c: 392: if ( INTCONbits.GIE == ( uint8_t ) 1 ) {
  4168  069E  1F8B               	btfss	11,7	;volatile
  4169  069F  2EA4               	goto	l2197
  4170                           
  4171                           ;mtouch_sensor.c: 393: INTCONbits.GIE = ( uint8_t ) 0;
  4172  06A0  138B               	bcf	11,7	;volatile
  4173                           
  4174                           ;mtouch_sensor.c: 394: sensor->rawSample = packet_sample;
  4175  06A1  26A7               	fcall	PL74	;call to abstracted procedure
  4176                           
  4177                           ;mtouch_sensor.c: 395: INTCONbits.GIE = ( uint8_t ) 1;
  4178  06A2  178B               	bsf	11,7	;volatile
  4179                           
  4180                           ;mtouch_sensor.c: 396: } else {
  4181  06A3  0008               	return
  4182  06A4                     l2197:	
  4183                           
  4184                           ;mtouch_sensor.c: 397: sensor->rawSample = packet_sample;
  4185  06A4  0820               	movf	Sensor_RawSample_Update@sensor,w
  4186  06A5  26A7               	fcall	PL74	;call to abstracted procedure
  4187  06A6  0008               	return
  4188  06A7                     __end_of_Sensor_RawSample_Update:	
  4189  06A7                     PL74:	
  4190  06A7  3E06               	addlw	6
  4191  06A8  0086               	movwf	6
  4192  06A9  0187               	clrf	7
  4193  06AA  085C               	movf	_packet_sample,w
  4194  06AB  3FC0               	movwi [0]fsr1
  4195  06AC  085D               	movf	_packet_sample+1,w
  4196  06AD  3FC1               	movwi [1]fsr1
  4197  06AE  0008               	return
  4198  06AF                     __end_ofPL74:	
  4199                           
  4200                           	psect	text20
  4201  03B1                     __ptext20:	
  4202 ;; *************** function _Sensor_Acquisition *****************
  4203 ;; Defined at:
  4204 ;;		line 205 in file "mtouch/mtouch_sensor.c"
  4205 ;; Parameters:    Size  Location     Type
  4206 ;;  sensor          1    wreg     PTR struct .
  4207 ;;		 -> mtouch_sensor(9), 
  4208 ;; Auto vars:     Size  Location     Type
  4209 ;;  sensor          1   23[BANK0 ] PTR struct .
  4210 ;;		 -> mtouch_sensor(9), 
  4211 ;;  retry           1   22[BANK0 ] unsigned char 
  4212 ;; Return value:  Size  Location     Type
  4213 ;;                  1    wreg      enum E32
  4214 ;; Registers used:
  4215 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4216 ;; Tracked objects:
  4217 ;;		On entry : 1F/0
  4218 ;;		On exit  : 1F/0
  4219 ;;		Unchanged: 0/0
  4220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4221 ;;      Params:         0       0       0       0
  4222 ;;      Locals:         0       2       0       0
  4223 ;;      Temps:          0       4       0       0
  4224 ;;      Totals:         0       6       0       0
  4225 ;;Total ram usage:        6 bytes
  4226 ;; Hardware stack levels used:    1
  4227 ;; Hardware stack levels required when called:    7
  4228 ;; This function calls:
  4229 ;;		_Sensor_Acq_ExecutePacket
  4230 ;;		_Sensor_Scanfrequency_Evaluation
  4231 ;;		_Sensor_isEnabled
  4232 ;;		_Sensor_setActive
  4233 ;;		_Sensor_setInactive
  4234 ;;		_abs
  4235 ;; This function is called by:
  4236 ;;		_Sensor_Service
  4237 ;; This function uses a non-reentrant model
  4238 ;;
  4239                           
  4240                           
  4241                           ;psect for function _Sensor_Acquisition
  4242  03B1                     _Sensor_Acquisition:	
  4243                           
  4244                           ;incstack = 0
  4245                           ; Regs used in _Sensor_Acquisition: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4246                           ;Sensor_Acquisition@sensor stored from wreg
  4247  03B1  00B7               	movwf	Sensor_Acquisition@sensor
  4248                           
  4249                           ;mtouch_sensor.c: 207: uint8_t retry = (uint8_t)5;
  4250  03B2  3005               	movlw	5
  4251  03B3  00B6               	movwf	Sensor_Acquisition@retry
  4252                           
  4253                           ;mtouch_sensor.c: 209: if ( !Sensor_isEnabled ( sensor ) )
  4254  03B4  0837               	movf	Sensor_Acquisition@sensor,w
  4255  03B5  2749               	fcall	_Sensor_isEnabled
  4256  03B6  3A00               	xorlw	0
  4257  03B7  1903               	btfsc	3,2
  4258                           
  4259                           ;mtouch_sensor.c: 210: return MTOUCH_SENSOR_ERROR_none;
  4260  03B8  3400               	retlw	0
  4261  03B9  2BBD               	goto	l2171
  4262  03BA                     l2163:	
  4263                           
  4264                           ;mtouch_sensor.c: 213: retry--;
  4265  03BA  0BB6               	decfsz	Sensor_Acquisition@retry,f
  4266                           
  4267                           ;mtouch_sensor.c: 214: if ( retry == 0 ) {
  4268  03BB  2BBD               	goto	l2171
  4269                           
  4270                           ;mtouch_sensor.c: 215: return MTOUCH_SENSOR_ERROR_tooManyRetries;
  4271  03BC  34FC               	retlw	252
  4272  03BD                     l2171:	
  4273  03BD  0837               	movf	Sensor_Acquisition@sensor,w
  4274  03BE  2286               	fcall	_Sensor_Acq_ExecutePacket
  4275  03BF  3A00               	xorlw	0
  4276  03C0  1D03               	skipz
  4277  03C1  2BBA               	goto	l2163
  4278                           
  4279                           ;mtouch_sensor.c: 216: }
  4280                           ;mtouch_sensor.c: 217: }
  4281                           ;mtouch_sensor.c: 219: if ( ( mtouch_sensor_packetsample_t ) abs ( packet_sample - senso
      +                          r->rawSample ) > (mtouch_sensor_packetsample_t)(sensor->oversampling)<<2 ) {
  4282  03C2  085D               	movf	_packet_sample+1,w
  4283  03C3  00A1               	movwf	abs@a+1
  4284  03C4  085C               	movf	_packet_sample,w
  4285  03C5  00A0               	movwf	abs@a
  4286  03C6  0837               	movf	Sensor_Acquisition@sensor,w
  4287  03C7  3E06               	addlw	6
  4288  03C8  0086               	movwf	6
  4289  03C9  0187               	clrf	7
  4290  03CA  3F40               	moviw [0]fsr1
  4291  03CB  00B2               	movwf	??_Sensor_Acquisition
  4292  03CC  3F41               	moviw [1]fsr1
  4293  03CD  00B3               	movwf	??_Sensor_Acquisition+1
  4294  03CE  0832               	movf	??_Sensor_Acquisition,w
  4295  03CF  02A0               	subwf	abs@a,f
  4296  03D0  0833               	movf	??_Sensor_Acquisition+1,w
  4297  03D1  3BA1               	subwfb	abs@a+1,f
  4298  03D2  26ED               	fcall	_abs
  4299  03D3  0837               	movf	Sensor_Acquisition@sensor,w
  4300  03D4  3E05               	addlw	5
  4301  03D5  0086               	movwf	6
  4302  03D6  0187               	clrf	7
  4303  03D7  0801               	movf	1,w
  4304  03D8  00B4               	movwf	??_Sensor_Acquisition+2
  4305  03D9  01B5               	clrf	??_Sensor_Acquisition+3
  4306  03DA  35B4               	lslf	??_Sensor_Acquisition+2,f
  4307  03DB  0DB5               	rlf	??_Sensor_Acquisition+3,f
  4308  03DC  35B4               	lslf	??_Sensor_Acquisition+2,f
  4309  03DD  0DB5               	rlf	??_Sensor_Acquisition+3,f
  4310  03DE  0821               	movf	?_abs+1,w
  4311  03DF  0235               	subwf	??_Sensor_Acquisition+3,w
  4312  03E0  1D03               	skipz
  4313  03E1  2BE4               	goto	u1205
  4314  03E2  0820               	movf	?_abs,w
  4315  03E3  0234               	subwf	??_Sensor_Acquisition+2,w
  4316  03E4                     u1205:	
  4317                           
  4318                           ;mtouch_sensor.c: 220: Sensor_setActive ( sensor );
  4319  03E4  0837               	movf	Sensor_Acquisition@sensor,w
  4320                           
  4321                           ;psect for function _Sensor_setActive
  4322  03E5  1803               	skipnc
  4323  03E6  2BEF               	goto	i3L_Sensor_setInactive
  4324                           
  4325                           ;incstack = 0
  4326                           ; Regs used in _Sensor_setActive: [wreg+fsr1l+fsr1h+status,2+status,0]
  4327                           ;Sensor_setActive@sensor stored from wreg
  4328  03E7  00A0               	movwf	Sensor_setActive@sensor
  4329  03E8                     i2Ll2001:	
  4330                           
  4331                           ;mtouch_sensor.c: 462: sensor->acitve = 1;
  4332  03E8  0820               	movf	Sensor_setActive@sensor,w
  4333  03E9  3E08               	addlw	8
  4334  03EA  0086               	movwf	6
  4335  03EB  0187               	clrf	7
  4336  03EC  1501               	bsf	1,2
  4337  03ED                     i2Ll351:	
  4338                           
  4339                           ;mtouch_sensor.c: 221: return Sensor_Scanfrequency_Evaluation ( sensor );
  4340  03ED  0837               	movf	Sensor_Acquisition@sensor,w
  4341  03EE  2AD6               	ljmp	_Sensor_Scanfrequency_Evaluation
  4342  03EF                     i3L__ptext22:	
  4343                           ;mtouch_sensor.c: 223: Sensor_setInactive ( sensor );
  4344                           
  4345                           
  4346                           ;psect for function _Sensor_setInactive
  4347  03EF                     i3L_Sensor_setInactive:	
  4348                           
  4349                           ;incstack = 0
  4350                           ; Regs used in _Sensor_setInactive: [wreg+fsr1l+fsr1h+status,2+status,0]
  4351                           ;Sensor_setInactive@sensor stored from wreg
  4352  03EF  00A0               	movwf	Sensor_setInactive@sensor
  4353  03F0                     i3Ll2047:	
  4354                           
  4355                           ;mtouch_sensor.c: 466: sensor->acitve = 0;
  4356  03F0  0820               	movf	Sensor_setInactive@sensor,w
  4357  03F1  3E08               	addlw	8
  4358  03F2  0086               	movwf	6
  4359  03F3  0187               	clrf	7
  4360  03F4  1101               	bcf	1,2
  4361  03F5                     i3Ll354:	
  4362  03F5  3400               	retlw	0
  4363  03F6                     __end_of_Sensor_Acquisition:	
  4364                           
  4365                           	psect	text21
  4366  06ED                     __ptext21:	
  4367 ;; *************** function _abs *****************
  4368 ;; Defined at:
  4369 ;;		line 4 in file "D:\Program Files\Microchip\xc8\v1.45\sources\common\abs.c"
  4370 ;; Parameters:    Size  Location     Type
  4371 ;;  a               2    0[BANK0 ] int 
  4372 ;; Auto vars:     Size  Location     Type
  4373 ;;		None
  4374 ;; Return value:  Size  Location     Type
  4375 ;;                  2    0[BANK0 ] int 
  4376 ;; Registers used:
  4377 ;;		wreg, status,2, status,0
  4378 ;; Tracked objects:
  4379 ;;		On entry : 1F/0
  4380 ;;		On exit  : 1F/0
  4381 ;;		Unchanged: 0/0
  4382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4383 ;;      Params:         0       2       0       0
  4384 ;;      Locals:         0       0       0       0
  4385 ;;      Temps:          0       2       0       0
  4386 ;;      Totals:         0       4       0       0
  4387 ;;Total ram usage:        4 bytes
  4388 ;; Hardware stack levels used:    1
  4389 ;; Hardware stack levels required when called:    4
  4390 ;; This function calls:
  4391 ;;		Nothing
  4392 ;; This function is called by:
  4393 ;;		_Sensor_Acquisition
  4394 ;; This function uses a non-reentrant model
  4395 ;;
  4396                           
  4397                           
  4398                           ;psect for function _abs
  4399  06ED                     _abs:	
  4400                           
  4401                           ;incstack = 0
  4402                           ; Regs used in _abs: [wreg+status,2+status,0]
  4403  06ED  1FA1               	btfss	abs@a+1,7
  4404  06EE  0008               	return
  4405  06EF  0920               	comf	abs@a,w
  4406  06F0  00A2               	movwf	??_abs
  4407  06F1  0921               	comf	abs@a+1,w
  4408  06F2  00A3               	movwf	??_abs+1
  4409  06F3  0AA2               	incf	??_abs,f
  4410  06F4  1903               	skipnz
  4411  06F5  0AA3               	incf	??_abs+1,f
  4412  06F6  0822               	movf	??_abs,w
  4413  06F7  00A0               	movwf	?_abs
  4414  06F8  0823               	movf	??_abs+1,w
  4415  06F9  00A1               	movwf	?_abs+1
  4416  06FA  0008               	return
  4417  06FB                     __end_of_abs:	
  4418                           
  4419                           	psect	text22
  4420  0000                     __ptext22:	
  4421 ;; *************** function _Sensor_setInactive *****************
  4422 ;; Defined at:
  4423 ;;		line 465 in file "mtouch/mtouch_sensor.c"
  4424 ;; Parameters:    Size  Location     Type
  4425 ;;  sensor          1    wreg     PTR struct .
  4426 ;;		 -> mtouch_sensor(9), 
  4427 ;; Auto vars:     Size  Location     Type
  4428 ;;  sensor          1    0[BANK0 ] PTR struct .
  4429 ;;		 -> mtouch_sensor(9), 
  4430 ;; Return value:  Size  Location     Type
  4431 ;;                  1    wreg      void 
  4432 ;; Registers used:
  4433 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4434 ;; Tracked objects:
  4435 ;;		On entry : 1F/0
  4436 ;;		On exit  : 1F/0
  4437 ;;		Unchanged: 0/0
  4438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4439 ;;      Params:         0       0       0       0
  4440 ;;      Locals:         0       1       0       0
  4441 ;;      Temps:          0       0       0       0
  4442 ;;      Totals:         0       1       0       0
  4443 ;;Total ram usage:        1 bytes
  4444 ;; Hardware stack levels used:    1
  4445 ;; Hardware stack levels required when called:    4
  4446 ;; This function calls:
  4447 ;;		Nothing
  4448 ;; This function is called by:
  4449 ;;		_Sensor_Acquisition
  4450 ;; This function uses a non-reentrant model
  4451 ;;
  4452                           
  4453  0000                     _Sensor_setInactive:	
  4454                           ;psect for function _Sensor_setInactive
  4455                           
  4456  0000                     __end_of_Sensor_setInactive:	
  4457                           ;mtouch_sensor.c: 466: sensor->acitve = 0;
  4458                           
  4459                           ;incstack = 0
  4460                           ; Regs used in _Sensor_setInactive: [wreg+fsr1l+fsr1h+status,2+status,0]
  4461                           ;Sensor_setInactive@sensor stored from wreg
  4462                           
  4463                           
  4464                           	psect	text23
  4465  0000                     __ptext23:	
  4466 ;; *************** function _Sensor_setActive *****************
  4467 ;; Defined at:
  4468 ;;		line 461 in file "mtouch/mtouch_sensor.c"
  4469 ;; Parameters:    Size  Location     Type
  4470 ;;  sensor          1    wreg     PTR struct .
  4471 ;;		 -> mtouch_sensor(9), 
  4472 ;; Auto vars:     Size  Location     Type
  4473 ;;  sensor          1    0[BANK0 ] PTR struct .
  4474 ;;		 -> mtouch_sensor(9), 
  4475 ;; Return value:  Size  Location     Type
  4476 ;;                  1    wreg      void 
  4477 ;; Registers used:
  4478 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4479 ;; Tracked objects:
  4480 ;;		On entry : 1F/0
  4481 ;;		On exit  : 1F/0
  4482 ;;		Unchanged: 0/0
  4483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4484 ;;      Params:         0       0       0       0
  4485 ;;      Locals:         0       1       0       0
  4486 ;;      Temps:          0       0       0       0
  4487 ;;      Totals:         0       1       0       0
  4488 ;;Total ram usage:        1 bytes
  4489 ;; Hardware stack levels used:    1
  4490 ;; Hardware stack levels required when called:    4
  4491 ;; This function calls:
  4492 ;;		Nothing
  4493 ;; This function is called by:
  4494 ;;		_Sensor_Acquisition
  4495 ;; This function uses a non-reentrant model
  4496 ;;
  4497                           
  4498  0000                     _Sensor_setActive:	
  4499                           ;psect for function _Sensor_setActive
  4500                           
  4501  0000                     __end_of_Sensor_setActive:	
  4502                           ;mtouch_sensor.c: 462: sensor->acitve = 1;
  4503                           
  4504                           ;incstack = 0
  4505                           ; Regs used in _Sensor_setActive: [wreg+fsr1l+fsr1h+status,2+status,0]
  4506                           ;Sensor_setActive@sensor stored from wreg
  4507                           
  4508                           
  4509                           	psect	text24
  4510  0749                     __ptext24:	
  4511 ;; *************** function _Sensor_isEnabled *****************
  4512 ;; Defined at:
  4513 ;;		line 447 in file "mtouch/mtouch_sensor.c"
  4514 ;; Parameters:    Size  Location     Type
  4515 ;;  sensor          1    wreg     PTR struct .
  4516 ;;		 -> mtouch_sensor(9), 
  4517 ;; Auto vars:     Size  Location     Type
  4518 ;;  sensor          1    0[BANK0 ] PTR struct .
  4519 ;;		 -> mtouch_sensor(9), 
  4520 ;; Return value:  Size  Location     Type
  4521 ;;                  1    wreg      unsigned char 
  4522 ;; Registers used:
  4523 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4524 ;; Tracked objects:
  4525 ;;		On entry : 1F/0
  4526 ;;		On exit  : 1F/0
  4527 ;;		Unchanged: 0/0
  4528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4529 ;;      Params:         0       0       0       0
  4530 ;;      Locals:         0       1       0       0
  4531 ;;      Temps:          0       0       0       0
  4532 ;;      Totals:         0       1       0       0
  4533 ;;Total ram usage:        1 bytes
  4534 ;; Hardware stack levels used:    1
  4535 ;; Hardware stack levels required when called:    4
  4536 ;; This function calls:
  4537 ;;		Nothing
  4538 ;; This function is called by:
  4539 ;;		_Sensor_Acquisition
  4540 ;; This function uses a non-reentrant model
  4541 ;;
  4542                           
  4543                           
  4544                           ;psect for function _Sensor_isEnabled
  4545  0749                     _Sensor_isEnabled:	
  4546                           
  4547                           ;incstack = 0
  4548                           ; Regs used in _Sensor_isEnabled: [wreg+fsr1l+fsr1h+status,2+status,0]
  4549                           ;Sensor_isEnabled@sensor stored from wreg
  4550  0749  00A0               	movwf	Sensor_isEnabled@sensor
  4551                           
  4552                           ;mtouch_sensor.c: 448: if ( sensor != (0) )
  4553  074A  0820               	movf	Sensor_isEnabled@sensor,w
  4554  074B  1903               	btfsc	3,2
  4555  074C  3400               	retlw	0
  4556                           
  4557                           ;mtouch_sensor.c: 449: return ( bool ) sensor->enabled;
  4558  074D  0820               	movf	Sensor_isEnabled@sensor,w
  4559  074E  3E08               	addlw	8
  4560  074F  0086               	movwf	6
  4561  0750  0187               	clrf	7
  4562  0751  0801               	movf	1,w
  4563  0752  3901               	andlw	1
  4564  0753  0008               	return
  4565  0754                     __end_of_Sensor_isEnabled:	
  4566                           ;mtouch_sensor.c: 450: else
  4567                           ;mtouch_sensor.c: 451: return 0;
  4568                           
  4569                           
  4570                           	psect	text25
  4571  02D6                     __ptext25:	
  4572 ;; *************** function _Sensor_Scanfrequency_Evaluation *****************
  4573 ;; Defined at:
  4574 ;;		line 336 in file "mtouch/mtouch_sensor.c"
  4575 ;; Parameters:    Size  Location     Type
  4576 ;;  sensor          1    wreg     PTR struct .
  4577 ;;		 -> mtouch_sensor(9), 
  4578 ;; Auto vars:     Size  Location     Type
  4579 ;;  sensor          1   14[BANK0 ] PTR struct .
  4580 ;;		 -> mtouch_sensor(9), 
  4581 ;;  best_packet_    2   12[BANK0 ] unsigned int 
  4582 ;;  packet_noise    2   10[BANK0 ] unsigned int 
  4583 ;;  i               1   17[BANK0 ] unsigned char 
  4584 ;;  retry           1   16[BANK0 ] unsigned char 
  4585 ;;  best_sample_    1   15[BANK0 ] unsigned char 
  4586 ;; Return value:  Size  Location     Type
  4587 ;;                  1    wreg      enum E32
  4588 ;; Registers used:
  4589 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4590 ;; Tracked objects:
  4591 ;;		On entry : 1F/0
  4592 ;;		On exit  : 1F/0
  4593 ;;		Unchanged: 0/0
  4594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4595 ;;      Params:         0       0       0       0
  4596 ;;      Locals:         0       8       0       0
  4597 ;;      Temps:          0       2       0       0
  4598 ;;      Totals:         0      10       0       0
  4599 ;;Total ram usage:       10 bytes
  4600 ;; Hardware stack levels used:    1
  4601 ;; Hardware stack levels required when called:    6
  4602 ;; This function calls:
  4603 ;;		_Sensor_Acq_ExecutePacket
  4604 ;; This function is called by:
  4605 ;;		_Sensor_Acquisition
  4606 ;; This function uses a non-reentrant model
  4607 ;;
  4608                           
  4609                           
  4610                           ;psect for function _Sensor_Scanfrequency_Evaluation
  4611  02D6                     _Sensor_Scanfrequency_Evaluation:	
  4612                           
  4613                           ;incstack = 0
  4614                           ; Regs used in _Sensor_Scanfrequency_Evaluation: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  4615                           ;Sensor_Scanfrequency_Evaluation@sensor stored from wreg
  4616  02D6  00AE               	movwf	Sensor_Scanfrequency_Evaluation@sensor
  4617                           
  4618                           ;mtouch_sensor.c: 337: uint8_t i;
  4619                           ;mtouch_sensor.c: 338: const mtouch_sensor_sampleperiod_t frequency_hop[5] = { 3, 13, 14
      +                          , 20, 13 };
  4620                           ;mtouch_sensor.c: 339: mtouch_sensor_packetnoise_t packet_noise_Max;
  4621                           ;mtouch_sensor.c: 340: mtouch_sensor_sampleperiod_t best_sample_period;
  4622                           ;mtouch_sensor.c: 341: mtouch_sensor_packetsample_t best_packet_sample;
  4623                           ;mtouch_sensor.c: 342: uint8_t retry;
  4624                           ;mtouch_sensor.c: 344: packet_noise_Max = packet_noise + ( packet_noise >> 2 );
  4625  02D7  085B               	movf	_packet_noise+1,w
  4626  02D8  00A9               	movwf	??_Sensor_Scanfrequency_Evaluation+1
  4627  02D9  085A               	movf	_packet_noise,w
  4628  02DA  00A8               	movwf	??_Sensor_Scanfrequency_Evaluation
  4629  02DB  36A9               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  4630  02DC  0CA8               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  4631  02DD  36A9               	lsrf	??_Sensor_Scanfrequency_Evaluation+1,f
  4632  02DE  0CA8               	rrf	??_Sensor_Scanfrequency_Evaluation,f
  4633  02DF  085A               	movf	_packet_noise,w
  4634  02E0  0728               	addwf	??_Sensor_Scanfrequency_Evaluation,w
  4635  02E1  00AA               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  4636  02E2  085B               	movf	_packet_noise+1,w
  4637  02E3  3D29               	addwfc	??_Sensor_Scanfrequency_Evaluation+1,w
  4638  02E4  00AB               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  4639                           
  4640                           ;mtouch_sensor.c: 345: best_sample_period = sample_period;
  4641                           
  4642                           ;mtouch_sensor.c: 346: best_packet_sample = packet_sample;
  4643  02E5  231B               	fcall	PL80	;call to abstracted procedure
  4644                           
  4645                           ;mtouch_sensor.c: 348: for ( i = ( uint8_t ) 0; i < ( uint8_t ) 5; i++ ) {
  4646  02E6  01B1               	clrf	Sensor_Scanfrequency_Evaluation@i
  4647  02E7                     l2015:	
  4648                           
  4649                           ;mtouch_sensor.c: 349: sample_period += frequency_hop[i];
  4650  02E7  0831               	movf	Sensor_Scanfrequency_Evaluation@i,w
  4651  02E8  3E98               	addlw	low (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  4652  02E9  0084               	movwf	4
  4653  02EA  3087               	movlw	high (Sensor_Scanfrequency_Evaluation@frequency_hop| (0+32768))
  4654  02EB  1803               	skipnc
  4655  02EC  3E01               	addlw	1
  4656  02ED  0085               	movwf	5
  4657  02EE  0800               	movf	0,w	;code access
  4658  02EF  07CC               	addwf	_sample_period,f
  4659                           
  4660                           ;mtouch_sensor.c: 350: if ( sample_period > ((mtouch_sensor_sampleperiod_t)255) ) {
  4661  02F0  30C8               	movlw	200
  4662  02F1  024C               	subwf	_sample_period,w
  4663  02F2  1803               	skipnc
  4664  02F3  2AF6               	goto	l2023
  4665                           
  4666                           ;mtouch_sensor.c: 354: sample_period += ((mtouch_sensor_sampleperiod_t)200);
  4667  02F4  30C8               	movlw	200
  4668  02F5  07CC               	addwf	_sample_period,f
  4669  02F6                     l2023:	
  4670                           
  4671                           ;mtouch_sensor.c: 355: }
  4672                           ;mtouch_sensor.c: 357: retry = (uint8_t)5;
  4673  02F6  3005               	movlw	5
  4674  02F7  00B0               	movwf	Sensor_Scanfrequency_Evaluation@retry
  4675  02F8                     l2033:	
  4676                           ;mtouch_sensor.c: 359: while ( Sensor_Acq_ExecutePacket ( sensor ) ) {
  4677                           
  4678  02F8  082E               	movf	Sensor_Scanfrequency_Evaluation@sensor,w
  4679  02F9  2286               	fcall	_Sensor_Acq_ExecutePacket
  4680  02FA  3A00               	xorlw	0
  4681  02FB  1903               	btfsc	3,2
  4682  02FC  2B02               	goto	l2035
  4683                           
  4684                           ;mtouch_sensor.c: 360: retry--;
  4685  02FD  03B0               	decf	Sensor_Scanfrequency_Evaluation@retry,f
  4686                           
  4687                           ;mtouch_sensor.c: 361: if ( retry == 0 ) {
  4688  02FE  0830               	movf	Sensor_Scanfrequency_Evaluation@retry,w
  4689  02FF  1903               	btfsc	3,2
  4690                           
  4691                           ;mtouch_sensor.c: 362: return MTOUCH_SENSOR_ERROR_tooManyRetries;
  4692  0300  34FC               	retlw	252
  4693  0301  2AF8               	goto	l2033
  4694  0302                     l2035:	
  4695                           
  4696                           ;mtouch_sensor.c: 363: }
  4697                           ;mtouch_sensor.c: 364: }
  4698                           ;mtouch_sensor.c: 366: if ( packet_noise_Max < packet_noise ) {
  4699  0302  085B               	movf	_packet_noise+1,w
  4700  0303  022B               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1,w
  4701  0304  1D03               	skipz
  4702  0305  2B08               	goto	u1005
  4703  0306  085A               	movf	_packet_noise,w
  4704  0307  022A               	subwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max,w
  4705  0308                     u1005:	
  4706  0308  1803               	skipnc
  4707  0309  2B0F               	goto	l2039
  4708                           
  4709                           ;mtouch_sensor.c: 367: packet_noise_Max = packet_noise;
  4710  030A  085B               	movf	_packet_noise+1,w
  4711  030B  00AB               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max+1
  4712  030C  085A               	movf	_packet_noise,w
  4713  030D  00AA               	movwf	Sensor_Scanfrequency_Evaluation@packet_noise_Max
  4714                           
  4715                           ;mtouch_sensor.c: 368: best_sample_period = sample_period;
  4716                           
  4717                           ;mtouch_sensor.c: 369: best_packet_sample = packet_sample;
  4718  030E  231B               	fcall	PL80	;call to abstracted procedure
  4719  030F                     l2039:	
  4720  030F  3005               	movlw	5
  4721  0310  0AB1               	incf	Sensor_Scanfrequency_Evaluation@i,f
  4722  0311  0231               	subwf	Sensor_Scanfrequency_Evaluation@i,w
  4723  0312  1C03               	skipc
  4724  0313  2AE7               	goto	l2015
  4725                           
  4726                           ;mtouch_sensor.c: 370: }
  4727                           ;mtouch_sensor.c: 371: }
  4728                           ;mtouch_sensor.c: 373: sample_period = best_sample_period;
  4729  0314  082F               	movf	Sensor_Scanfrequency_Evaluation@best_sample_period,w
  4730  0315  00CC               	movwf	_sample_period
  4731                           
  4732                           ;mtouch_sensor.c: 374: packet_sample = best_packet_sample;
  4733  0316  082D               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1,w
  4734  0317  00DD               	movwf	_packet_sample+1
  4735  0318  082C               	movf	Sensor_Scanfrequency_Evaluation@best_packet_sample,w
  4736  0319  00DC               	movwf	_packet_sample
  4737                           
  4738                           ;mtouch_sensor.c: 376: return MTOUCH_SENSOR_ERROR_none;
  4739  031A  3400               	retlw	0
  4740  031B                     __end_of_Sensor_Scanfrequency_Evaluation:	
  4741  031B                     PL80:	
  4742  031B  084C               	movf	_sample_period,w
  4743  031C  00AF               	movwf	Sensor_Scanfrequency_Evaluation@best_sample_period
  4744  031D  085D               	movf	_packet_sample+1,w
  4745  031E  00AD               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample+1
  4746  031F  085C               	movf	_packet_sample,w
  4747  0320  00AC               	movwf	Sensor_Scanfrequency_Evaluation@best_packet_sample
  4748  0321  0008               	return
  4749  0322                     __end_ofPL80:	
  4750                           
  4751                           	psect	text26
  4752  0286                     __ptext26:	
  4753 ;; *************** function _Sensor_Acq_ExecutePacket *****************
  4754 ;; Defined at:
  4755 ;;		line 234 in file "mtouch/mtouch_sensor.c"
  4756 ;; Parameters:    Size  Location     Type
  4757 ;;  sensor          1    wreg     PTR struct .
  4758 ;;		 -> mtouch_sensor(9), 
  4759 ;; Auto vars:     Size  Location     Type
  4760 ;;  sensor          1    7[BANK0 ] PTR struct .
  4761 ;;		 -> mtouch_sensor(9), 
  4762 ;;  error           1    6[BANK0 ] enum E32
  4763 ;;  ADCON2_temp     1    5[BANK0 ] unsigned char 
  4764 ;;  ADCON1_temp     1    4[BANK0 ] unsigned char 
  4765 ;;  ADCON0_temp     1    3[BANK0 ] unsigned char 
  4766 ;; Return value:  Size  Location     Type
  4767 ;;                  1    wreg      enum E32
  4768 ;; Registers used:
  4769 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4770 ;; Tracked objects:
  4771 ;;		On entry : 1F/0
  4772 ;;		On exit  : 1F/0
  4773 ;;		Unchanged: 0/0
  4774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4775 ;;      Params:         0       0       0       0
  4776 ;;      Locals:         0       5       0       0
  4777 ;;      Temps:          0       1       0       0
  4778 ;;      Totals:         0       6       0       0
  4779 ;;Total ram usage:        6 bytes
  4780 ;; Hardware stack levels used:    1
  4781 ;; Hardware stack levels required when called:    5
  4782 ;; This function calls:
  4783 ;;		_MTOUCH_Sensor_Scan_Initialize
  4784 ;;		_Sensor_setScanFunction
  4785 ;;		_TMR2_SetInterruptHandler
  4786 ;;		tmr2@TMR2_LoadPeriodRegister
  4787 ;;		tmr2@TMR2_StartTimer
  4788 ;;		tmr2@TMR2_StopTimer
  4789 ;; This function is called by:
  4790 ;;		_Sensor_Acquisition
  4791 ;;		_Sensor_Scanfrequency_Evaluation
  4792 ;; This function uses a non-reentrant model
  4793 ;;
  4794                           
  4795                           
  4796                           ;psect for function _Sensor_Acq_ExecutePacket
  4797  0286                     _Sensor_Acq_ExecutePacket:	
  4798                           
  4799                           ;incstack = 0
  4800                           ; Regs used in _Sensor_Acq_ExecutePacket: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  4801                           ;Sensor_Acq_ExecutePacket@sensor stored from wreg
  4802  0286  00A7               	movwf	Sensor_Acq_ExecutePacket@sensor
  4803                           
  4804                           ;mtouch_sensor.c: 236: if ( !( INTCONbits.GIE & INTCONbits.PEIE ) )
  4805  0287  0E0B               	swapf	11,w	;volatile
  4806  0288  0C89               	rrf	9,f
  4807  0289  0C89               	rrf	9,f
  4808  028A  3901               	andlw	1
  4809  028B  00A2               	movwf	??_Sensor_Acq_ExecutePacket
  4810  028C  0D0B               	rlf	11,w	;volatile
  4811  028D  0D0B               	rlf	11,w	;volatile
  4812  028E  3901               	andlw	1
  4813  028F  0522               	andwf	??_Sensor_Acq_ExecutePacket,w
  4814  0290  1903               	btfsc	3,2
  4815                           
  4816                           ;mtouch_sensor.c: 237: return MTOUCH_SENSOR_ERROR_interrupt_notEnabled;
  4817  0291  34FE               	retlw	254
  4818                           
  4819                           ;mtouch_sensor.c: 239: enum mtouch_sensor_error error = MTOUCH_SENSOR_ERROR_none;
  4820  0292  01A6               	clrf	Sensor_Acq_ExecutePacket@error
  4821                           
  4822                           ;mtouch_sensor.c: 240: uint8_t ADCON0_temp;
  4823                           ;mtouch_sensor.c: 241: uint8_t ADCON1_temp;
  4824                           ;mtouch_sensor.c: 242: uint8_t ADCON2_temp;
  4825                           ;mtouch_sensor.c: 244: ADCON0_temp = ADCON0;
  4826  0293  0021               	movlb	1	; select bank1
  4827  0294  081D               	movf	29,w	;volatile
  4828  0295  0020               	movlb	0	; select bank0
  4829  0296  00A3               	movwf	Sensor_Acq_ExecutePacket@ADCON0_temp
  4830                           
  4831                           ;mtouch_sensor.c: 245: ADCON1_temp = ADCON1;
  4832  0297  0021               	movlb	1	; select bank1
  4833  0298  081E               	movf	30,w	;volatile
  4834  0299  0020               	movlb	0	; select bank0
  4835  029A  00A4               	movwf	Sensor_Acq_ExecutePacket@ADCON1_temp
  4836                           
  4837                           ;mtouch_sensor.c: 246: ADCON2_temp = ADCON2;
  4838  029B  0021               	movlb	1	; select bank1
  4839  029C  081F               	movf	31,w	;volatile
  4840  029D  0020               	movlb	0	; select bank0
  4841  029E  00A5               	movwf	Sensor_Acq_ExecutePacket@ADCON2_temp
  4842                           
  4843                           ;mtouch_sensor.c: 247: MTOUCH_Sensor_Scan_Initialize ( );
  4844  029F  2770               	fcall	_MTOUCH_Sensor_Scan_Initialize
  4845                           
  4846                           ;mtouch_sensor.c: 249: Sensor_setScanFunction ( sensor );
  4847  02A0  0020               	movlb	0	; select bank0
  4848  02A1  0827               	movf	Sensor_Acq_ExecutePacket@sensor,w
  4849  02A2  26C1               	fcall	_Sensor_setScanFunction
  4850                           
  4851                           ;mtouch_sensor.c: 251: currentScannSensor = sensor->sensor_name;
  4852  02A3  0827               	movf	Sensor_Acq_ExecutePacket@sensor,w
  4853  02A4  0086               	movwf	6
  4854  02A5  0187               	clrf	7
  4855  02A6  0801               	movf	1,w
  4856  02A7  00F9               	movwf	_currentScannSensor
  4857                           
  4858                           ;mtouch_sensor.c: 252: packet_counter = sensor->oversampling;
  4859  02A8  0827               	movf	Sensor_Acq_ExecutePacket@sensor,w
  4860  02A9  0086               	movwf	6
  4861  02AA  3F45               	moviw [5]fsr1
  4862  02AB  00F8               	movwf	_packet_counter
  4863                           
  4864                           ;mtouch_sensor.c: 253: packet_sample = 0;
  4865  02AC  01DC               	clrf	_packet_sample
  4866  02AD  01DD               	clrf	_packet_sample+1
  4867                           
  4868                           ;mtouch_sensor.c: 254: sensor_globalFlags.packet_done = 0;
  4869  02AE  1060               	bcf	_sensor_globalFlags,0	;volatile
  4870  02AF  308F               	movlw	low _Sensor_Acq_ExecuteScan
  4871                           
  4872                           ;mtouch_sensor.c: 255: packet_noise = 0;
  4873  02B0  01DA               	clrf	_packet_noise
  4874  02B1  01DB               	clrf	_packet_noise+1
  4875                           
  4876                           ;mtouch_sensor.c: 257: TMR2_SetInterruptHandler ( Sensor_Acq_ExecuteScan );
  4877  02B2  00A0               	movwf	TMR2_SetInterruptHandler@handler
  4878  02B3  3001               	movlw	high _Sensor_Acq_ExecuteScan
  4879  02B4  00A1               	movwf	TMR2_SetInterruptHandler@handler+1
  4880  02B5  279D               	fcall	_TMR2_SetInterruptHandler
  4881                           
  4882                           ;mtouch_sensor.c: 258: TMR2_LoadPeriodRegister ( sample_period );
  4883  02B6  084C               	movf	_sample_period,w
  4884  02B7                     i4L__ptext29:	
  4885                           
  4886                           ;psect for function tmr2@TMR2_LoadPeriodRegister
  4887  02B7                     i4Ltmr2@TMR2_LoadPeriodRegister:	
  4888                           
  4889                           ;incstack = 0
  4890                           ; Regs used in tmr2@TMR2_LoadPeriodRegister: [wreg]
  4891                           ;tmr2@TMR2_LoadPeriodRegister@period stored from wreg
  4892  02B7  00A0               	movwf	tmr2@TMR2_LoadPeriodRegister@period
  4893  02B8                     i4Ll1869:	
  4894                           
  4895                           ;tmr2.h: 64: PR2 = period;
  4896  02B8  0820               	movf	tmr2@TMR2_LoadPeriodRegister@period,w
  4897  02B9  009B               	movwf	27	;volatile
  4898  02BA                     i4Ll202:	
  4899  02BA                     i5L__ptext28:	
  4900                           ;mtouch_sensor.c: 259: TMR2_StartTimer ( );
  4901                           
  4902                           
  4903                           ;psect for function tmr2@TMR2_StartTimer
  4904  02BA                     i5Ltmr2@TMR2_StartTimer:	
  4905  02BA                     i5Ll1865:	
  4906                           
  4907                           ;tmr2.h: 49: T2CONbits.TMR2ON = 1;
  4908  02BA  151C               	bsf	28,2	;volatile
  4909  02BB                     i5Ll190:	
  4910                           
  4911                           ;mtouch_sensor.c: 261: sensor_globalFlags.interrupted = 0;
  4912  02BB  10E0               	bcf	_sensor_globalFlags,1	;volatile
  4913  02BC                     l273:	
  4914  02BC  1F11               	btfss	17,6	;volatile
  4915                           
  4916                           ;mtouch_sensor.c: 266: if ( sensor_globalFlags.packet_done == ( uint8_t ) 1 )
  4917  02BD  1860               	btfsc	_sensor_globalFlags,0	;volatile
  4918  02BE  2AC0               	goto	l276
  4919  02BF  2ABC               	goto	l273
  4920  02C0                     l276:	
  4921                           
  4922                           ;mtouch_sensor.c: 268: }
  4923                           ;mtouch_sensor.c: 269: PIR1bits.ADIF = 0;
  4924  02C0  1311               	bcf	17,6	;volatile
  4925                           
  4926                           ;mtouch_sensor.c: 270: } while ( sensor_globalFlags.packet_done == 0 );
  4927  02C1  1C60               	btfss	_sensor_globalFlags,0	;volatile
  4928  02C2  2ABC               	goto	l273
  4929                           
  4930                           ;psect for function tmr2@TMR2_StopTimer
  4931                           
  4932                           ;mtouch_sensor.c: 272: TMR2_StopTimer ( );
  4933  02C3                     i6Ltmr2@TMR2_StopTimer:	
  4934  02C3                     i6Ll1867:	
  4935                           
  4936                           ;tmr2.h: 53: T2CONbits.TMR2ON = 0;
  4937  02C3  111C               	bcf	28,2	;volatile
  4938  02C4                     i6Ll193:	
  4939                           
  4940                           ;mtouch_sensor.c: 273: ADCON0 = ADCON0_temp;
  4941  02C4  0823               	movf	Sensor_Acq_ExecutePacket@ADCON0_temp,w
  4942  02C5  0021               	movlb	1	; select bank1
  4943  02C6  009D               	movwf	29	;volatile
  4944                           
  4945                           ;mtouch_sensor.c: 274: ADCON1 = ADCON1_temp;
  4946  02C7  0020               	movlb	0	; select bank0
  4947  02C8  0824               	movf	Sensor_Acq_ExecutePacket@ADCON1_temp,w
  4948  02C9  0021               	movlb	1	; select bank1
  4949  02CA  009E               	movwf	30	;volatile
  4950                           
  4951                           ;mtouch_sensor.c: 275: ADCON2 = ADCON2_temp;
  4952  02CB  0020               	movlb	0	; select bank0
  4953  02CC  0825               	movf	Sensor_Acq_ExecutePacket@ADCON2_temp,w
  4954  02CD  0021               	movlb	1	; select bank1
  4955  02CE  009F               	movwf	31	;volatile
  4956                           
  4957                           ;mtouch_sensor.c: 277: if ( sensor_globalFlags.interrupted ) {
  4958  02CF  0020               	movlb	0	; select bank0
  4959  02D0  1CE0               	btfss	_sensor_globalFlags,1	;volatile
  4960  02D1  2AD4               	goto	l278
  4961                           
  4962                           ;mtouch_sensor.c: 278: error = MTOUCH_SENSOR_ERROR_interruptedScan;
  4963  02D2  30FA               	movlw	250
  4964  02D3  00A6               	movwf	Sensor_Acq_ExecutePacket@error
  4965  02D4                     l278:	
  4966                           
  4967                           ;mtouch_sensor.c: 279: }
  4968                           ;mtouch_sensor.c: 281: return error;
  4969  02D4  0826               	movf	Sensor_Acq_ExecutePacket@error,w
  4970  02D5  0008               	return
  4971  02D6                     __end_of_Sensor_Acq_ExecutePacket:	
  4972                           
  4973                           	psect	text27
  4974  0000                     __ptext27:	
  4975 ;; *************** function tmr2@TMR2_StopTimer *****************
  4976 ;; Defined at:
  4977 ;;		line 52 in file "mtouch/../driver/tmr2.h"
  4978 ;; Parameters:    Size  Location     Type
  4979 ;;		None
  4980 ;; Auto vars:     Size  Location     Type
  4981 ;;		None
  4982 ;; Return value:  Size  Location     Type
  4983 ;;                  1    wreg      void 
  4984 ;; Registers used:
  4985 ;;		None
  4986 ;; Tracked objects:
  4987 ;;		On entry : 1F/0
  4988 ;;		On exit  : 1F/0
  4989 ;;		Unchanged: 0/0
  4990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4991 ;;      Params:         0       0       0       0
  4992 ;;      Locals:         0       0       0       0
  4993 ;;      Temps:          0       0       0       0
  4994 ;;      Totals:         0       0       0       0
  4995 ;;Total ram usage:        0 bytes
  4996 ;; Hardware stack levels used:    1
  4997 ;; Hardware stack levels required when called:    4
  4998 ;; This function calls:
  4999 ;;		Nothing
  5000 ;; This function is called by:
  5001 ;;		_Sensor_Acq_ExecutePacket
  5002 ;; This function uses a non-reentrant model
  5003 ;;
  5004                           
  5005  0000                     __end_oftmr2@TMR2_StopTimer:	
  5006                           ;tmr2.h: 53: T2CONbits.TMR2ON = 0;
  5007                           
  5008                           ;incstack = 0
  5009                           ; Regs used in tmr2@TMR2_StopTimer: []
  5010                           
  5011                           ;psect for function tmr2@TMR2_StopTimer
  5012                           
  5013                           
  5014                           	psect	text28
  5015  0000                     __ptext28:	
  5016 ;; *************** function tmr2@TMR2_StartTimer *****************
  5017 ;; Defined at:
  5018 ;;		line 48 in file "mtouch/../driver/tmr2.h"
  5019 ;; Parameters:    Size  Location     Type
  5020 ;;		None
  5021 ;; Auto vars:     Size  Location     Type
  5022 ;;		None
  5023 ;; Return value:  Size  Location     Type
  5024 ;;                  1    wreg      void 
  5025 ;; Registers used:
  5026 ;;		None
  5027 ;; Tracked objects:
  5028 ;;		On entry : 1F/0
  5029 ;;		On exit  : 1F/0
  5030 ;;		Unchanged: 0/0
  5031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5032 ;;      Params:         0       0       0       0
  5033 ;;      Locals:         0       0       0       0
  5034 ;;      Temps:          0       0       0       0
  5035 ;;      Totals:         0       0       0       0
  5036 ;;Total ram usage:        0 bytes
  5037 ;; Hardware stack levels used:    1
  5038 ;; Hardware stack levels required when called:    4
  5039 ;; This function calls:
  5040 ;;		Nothing
  5041 ;; This function is called by:
  5042 ;;		_Sensor_Acq_ExecutePacket
  5043 ;; This function uses a non-reentrant model
  5044 ;;
  5045                           
  5046  0000                     __end_oftmr2@TMR2_StartTimer:	
  5047                           ;tmr2.h: 49: T2CONbits.TMR2ON = 1;
  5048                           
  5049                           ;incstack = 0
  5050                           ; Regs used in tmr2@TMR2_StartTimer: []
  5051                           
  5052                           ;psect for function tmr2@TMR2_StartTimer
  5053                           
  5054                           
  5055                           	psect	text29
  5056  0000                     __ptext29:	
  5057 ;; *************** function tmr2@TMR2_LoadPeriodRegister *****************
  5058 ;; Defined at:
  5059 ;;		line 63 in file "mtouch/../driver/tmr2.h"
  5060 ;; Parameters:    Size  Location     Type
  5061 ;;  period          1    wreg     unsigned char 
  5062 ;; Auto vars:     Size  Location     Type
  5063 ;;  period          1    0[BANK0 ] unsigned char 
  5064 ;; Return value:  Size  Location     Type
  5065 ;;                  1    wreg      void 
  5066 ;; Registers used:
  5067 ;;		wreg
  5068 ;; Tracked objects:
  5069 ;;		On entry : 1F/0
  5070 ;;		On exit  : 1F/0
  5071 ;;		Unchanged: 0/0
  5072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5073 ;;      Params:         0       0       0       0
  5074 ;;      Locals:         0       1       0       0
  5075 ;;      Temps:          0       0       0       0
  5076 ;;      Totals:         0       1       0       0
  5077 ;;Total ram usage:        1 bytes
  5078 ;; Hardware stack levels used:    1
  5079 ;; Hardware stack levels required when called:    4
  5080 ;; This function calls:
  5081 ;;		Nothing
  5082 ;; This function is called by:
  5083 ;;		_Sensor_Acq_ExecutePacket
  5084 ;; This function uses a non-reentrant model
  5085 ;;
  5086                           
  5087  0000                     __end_oftmr2@TMR2_LoadPeriodRegister:	
  5088                           ;tmr2.h: 64: PR2 = period;
  5089                           
  5090                           ;incstack = 0
  5091                           ; Regs used in tmr2@TMR2_LoadPeriodRegister: [wreg]
  5092                           ;tmr2@TMR2_LoadPeriodRegister@period stored from wreg
  5093                           
  5094                           ;psect for function tmr2@TMR2_LoadPeriodRegister
  5095                           
  5096                           
  5097                           	psect	text30
  5098  079D                     __ptext30:	
  5099 ;; *************** function _TMR2_SetInterruptHandler *****************
  5100 ;; Defined at:
  5101 ;;		line 26 in file "driver/tmr2.c"
  5102 ;; Parameters:    Size  Location     Type
  5103 ;;  handler         2    0[BANK0 ] PTR FTN()void 
  5104 ;;		 -> Sensor_Acq_ExecuteScan(1), 
  5105 ;; Auto vars:     Size  Location     Type
  5106 ;;		None
  5107 ;; Return value:  Size  Location     Type
  5108 ;;                  1    wreg      void 
  5109 ;; Registers used:
  5110 ;;		wreg
  5111 ;; Tracked objects:
  5112 ;;		On entry : 1F/0
  5113 ;;		On exit  : 1F/0
  5114 ;;		Unchanged: 0/0
  5115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5116 ;;      Params:         0       2       0       0
  5117 ;;      Locals:         0       0       0       0
  5118 ;;      Temps:          0       0       0       0
  5119 ;;      Totals:         0       2       0       0
  5120 ;;Total ram usage:        2 bytes
  5121 ;; Hardware stack levels used:    1
  5122 ;; Hardware stack levels required when called:    4
  5123 ;; This function calls:
  5124 ;;		Nothing
  5125 ;; This function is called by:
  5126 ;;		_Sensor_Acq_ExecutePacket
  5127 ;; This function uses a non-reentrant model
  5128 ;;
  5129                           
  5130                           
  5131                           ;psect for function _TMR2_SetInterruptHandler
  5132  079D                     _TMR2_SetInterruptHandler:	
  5133                           
  5134                           ;tmr2.c: 27: tmr2_isr_handler = handler;
  5135                           
  5136                           ;incstack = 0
  5137                           ; Regs used in _TMR2_SetInterruptHandler: [wreg]
  5138  079D  0821               	movf	TMR2_SetInterruptHandler@handler+1,w
  5139  079E  00DF               	movwf	_tmr2_isr_handler+1
  5140  079F  0820               	movf	TMR2_SetInterruptHandler@handler,w
  5141  07A0  00DE               	movwf	_tmr2_isr_handler
  5142  07A1  0008               	return
  5143  07A2                     __end_of_TMR2_SetInterruptHandler:	
  5144                           
  5145                           	psect	text31
  5146  06C1                     __ptext31:	
  5147 ;; *************** function _Sensor_setScanFunction *****************
  5148 ;; Defined at:
  5149 ;;		line 419 in file "mtouch/mtouch_sensor.c"
  5150 ;; Parameters:    Size  Location     Type
  5151 ;;  sensor          1    wreg     PTR struct .
  5152 ;;		 -> mtouch_sensor(9), 
  5153 ;; Auto vars:     Size  Location     Type
  5154 ;;  sensor          1    0[BANK0 ] PTR struct .
  5155 ;;		 -> mtouch_sensor(9), 
  5156 ;; Return value:  Size  Location     Type
  5157 ;;                  1    wreg      void 
  5158 ;; Registers used:
  5159 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5160 ;; Tracked objects:
  5161 ;;		On entry : 1F/0
  5162 ;;		On exit  : 1F/0
  5163 ;;		Unchanged: 0/0
  5164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5165 ;;      Params:         0       0       0       0
  5166 ;;      Locals:         0       1       0       0
  5167 ;;      Temps:          0       0       0       0
  5168 ;;      Totals:         0       1       0       0
  5169 ;;Total ram usage:        1 bytes
  5170 ;; Hardware stack levels used:    1
  5171 ;; Hardware stack levels required when called:    4
  5172 ;; This function calls:
  5173 ;;		Nothing
  5174 ;; This function is called by:
  5175 ;;		_Sensor_Acq_ExecutePacket
  5176 ;; This function uses a non-reentrant model
  5177 ;;
  5178                           
  5179                           
  5180                           ;psect for function _Sensor_setScanFunction
  5181  06C1                     _Sensor_setScanFunction:	
  5182                           
  5183                           ;incstack = 0
  5184                           ; Regs used in _Sensor_setScanFunction: [wreg+fsr1l+fsr1h+status,2+status,0]
  5185                           ;Sensor_setScanFunction@sensor stored from wreg
  5186  06C1  00A0               	movwf	Sensor_setScanFunction@sensor
  5187                           
  5188                           ;mtouch_sensor.c: 420: Sensor_scanA = sensor->scanA;
  5189  06C2  0A20               	incf	Sensor_setScanFunction@sensor,w
  5190  06C3  0086               	movwf	6
  5191  06C4  0187               	clrf	7
  5192  06C5  3F40               	moviw [0]fsr1
  5193  06C6  00C8               	movwf	_Sensor_scanA
  5194  06C7  3F41               	moviw [1]fsr1
  5195  06C8  00C9               	movwf	_Sensor_scanA+1
  5196                           
  5197                           ;mtouch_sensor.c: 421: Sensor_scanB = sensor->scanB;
  5198  06C9  0820               	movf	Sensor_setScanFunction@sensor,w
  5199  06CA  3E03               	addlw	3
  5200  06CB  0086               	movwf	6
  5201  06CC  3F40               	moviw [0]fsr1
  5202  06CD  00C6               	movwf	_Sensor_scanB
  5203  06CE  3F41               	moviw [1]fsr1
  5204  06CF  00C7               	movwf	_Sensor_scanB+1
  5205  06D0  0008               	return
  5206  06D1                     __end_of_Sensor_setScanFunction:	
  5207                           
  5208                           	psect	text32
  5209  075E                     __ptext32:	
  5210 ;; *************** function _MTOUCH_Button_ServiceAll *****************
  5211 ;; Defined at:
  5212 ;;		line 116 in file "mtouch/mtouch_button.c"
  5213 ;; Parameters:    Size  Location     Type
  5214 ;;		None
  5215 ;; Auto vars:     Size  Location     Type
  5216 ;;  button          1   20[BANK0 ] enum E3654
  5217 ;; Return value:  Size  Location     Type
  5218 ;;                  1    wreg      void 
  5219 ;; Registers used:
  5220 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5221 ;; Tracked objects:
  5222 ;;		On entry : 1F/0
  5223 ;;		On exit  : 1F/0
  5224 ;;		Unchanged: 0/0
  5225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5226 ;;      Params:         0       0       0       0
  5227 ;;      Locals:         0       1       0       0
  5228 ;;      Temps:          0       0       0       0
  5229 ;;      Totals:         0       1       0       0
  5230 ;;Total ram usage:        1 bytes
  5231 ;; Hardware stack levels used:    1
  5232 ;; Hardware stack levels required when called:    9
  5233 ;; This function calls:
  5234 ;;		_Button_Service
  5235 ;; This function is called by:
  5236 ;;		_MTOUCH_Service_Mainloop
  5237 ;; This function uses a non-reentrant model
  5238 ;;
  5239                           
  5240                           
  5241                           ;psect for function _MTOUCH_Button_ServiceAll
  5242  075E                     _MTOUCH_Button_ServiceAll:	
  5243                           
  5244                           ;mtouch_button.c: 117: enum mtouch_button_names button;
  5245                           ;mtouch_button.c: 118: for ( button = 0; button < 1; button++ ) {
  5246                           
  5247                           ;incstack = 0
  5248                           ; Regs used in _MTOUCH_Button_ServiceAll: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  5249  075E  01B4               	clrf	MTOUCH_Button_ServiceAll@button
  5250  075F                     l2507:	
  5251                           
  5252                           ;mtouch_button.c: 119: Button_Service ( button );
  5253  075F  0834               	movf	MTOUCH_Button_ServiceAll@button,w
  5254  0760  2430               	fcall	_Button_Service
  5255  0761  0020               	movlb	0	; select bank0
  5256  0762  0AB4               	incf	MTOUCH_Button_ServiceAll@button,f
  5257  0763  0834               	movf	MTOUCH_Button_ServiceAll@button,w
  5258  0764  1D03               	btfss	3,2
  5259  0765  0008               	return
  5260  0766  2F5F               	goto	l2507
  5261  0767                     __end_of_MTOUCH_Button_ServiceAll:	
  5262                           
  5263                           	psect	text33
  5264  0430                     __ptext33:	
  5265 ;; *************** function _Button_Service *****************
  5266 ;; Defined at:
  5267 ;;		line 123 in file "mtouch/mtouch_button.c"
  5268 ;; Parameters:    Size  Location     Type
  5269 ;;  name            1    wreg     enum E3654
  5270 ;; Auto vars:     Size  Location     Type
  5271 ;;  name            1   18[BANK0 ] enum E3654
  5272 ;;  button          1   19[BANK0 ] PTR struct .
  5273 ;;		 -> mtouch_button(22), 
  5274 ;; Return value:  Size  Location     Type
  5275 ;;                  1    wreg      void 
  5276 ;; Registers used:
  5277 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5278 ;; Tracked objects:
  5279 ;;		On entry : 1F/0
  5280 ;;		On exit  : 0/0
  5281 ;;		Unchanged: 0/0
  5282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5283 ;;      Params:         0       0       0       0
  5284 ;;      Locals:         0       2       0       0
  5285 ;;      Temps:          0       0       0       0
  5286 ;;      Totals:         0       2       0       0
  5287 ;;Total ram usage:        2 bytes
  5288 ;; Hardware stack levels used:    1
  5289 ;; Hardware stack levels required when called:    8
  5290 ;; This function calls:
  5291 ;;		_Button_Deviation_Update
  5292 ;;		_Button_Reading_Update
  5293 ;;		_Button_State_Initializing
  5294 ;;		_Button_State_NotPressed
  5295 ;;		_Button_State_Pressed
  5296 ;;		_MTOUCH_Button_Initialize
  5297 ;;		_MTOUCH_Sensor_isCalibrated
  5298 ;;		_MTOUCH_Sensor_wasSampled
  5299 ;;		___bmul
  5300 ;; This function is called by:
  5301 ;;		_MTOUCH_Button_ServiceAll
  5302 ;; This function uses a non-reentrant model
  5303 ;;
  5304                           
  5305                           
  5306                           ;psect for function _Button_Service
  5307  0430                     _Button_Service:	
  5308                           
  5309                           ;incstack = 0
  5310                           ; Regs used in _Button_Service: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5311                           ;Button_Service@name stored from wreg
  5312  0430  00B2               	movwf	Button_Service@name
  5313                           
  5314                           ;mtouch_button.c: 124: mtouch_button_t* button = &mtouch_button[name];
  5315  0431  3016               	movlw	22
  5316  0432  00A0               	movwf	___bmul@multiplicand
  5317  0433  0832               	movf	Button_Service@name,w
  5318  0434  2731               	fcall	___bmul
  5319  0435  3EC0               	addlw	(low (_mtouch_button| 0))& (0+255)
  5320  0436  00B3               	movwf	Button_Service@button
  5321                           
  5322                           ;mtouch_button.c: 126: if ( MTOUCH_Sensor_wasSampled ( button->sensor ) && MTOUCH_Sensor
      +                          _isCalibrated ( button->sensor ) ) {
  5323  0437  2460               	fcall	PL92	;call to abstracted procedure
  5324  0438  26FB               	fcall	_MTOUCH_Sensor_wasSampled
  5325  0439  3A00               	xorlw	0
  5326  043A  1903               	skipnz
  5327  043B  0008               	return
  5328  043C  2460               	fcall	PL92	;call to abstracted procedure
  5329  043D  27C5               	fcall	_MTOUCH_Sensor_isCalibrated
  5330  043E  3A00               	xorlw	0
  5331  043F  1903               	skipnz
  5332  0440  0008               	return
  5333                           
  5334                           ;mtouch_button.c: 127: Button_Reading_Update ( button );
  5335  0441  0833               	movf	Button_Service@button,w
  5336  0442  23F6               	fcall	_Button_Reading_Update
  5337                           
  5338                           ;mtouch_button.c: 128: Button_Deviation_Update ( button );
  5339  0443  0833               	movf	Button_Service@button,w
  5340  0444  2108               	fcall	_Button_Deviation_Update
  5341                           
  5342                           ;mtouch_button.c: 130: if ( button->state >= (uint8_t)(sizeof(Button_StateMachine)/sizeo
      +                          f(button_statemachine_state_t)) ) {
  5343  0445  0833               	movf	Button_Service@button,w
  5344  0446  3E06               	addlw	6
  5345  0447  0086               	movwf	6
  5346  0448  3003               	movlw	3
  5347  0449  0187               	clrf	7
  5348  044A  0201               	subwf	1,w
  5349                           
  5350                           ;mtouch_button.c: 131: MTOUCH_Button_Initialize ( button->name );
  5351  044B  0833               	movf	Button_Service@button,w
  5352  044C  1C03               	skipc
  5353  044D  2C52               	goto	L3
  5354  044E  0086               	movwf	6
  5355  044F  0801               	movf	1,w
  5356  0450  2557               	fcall	_MTOUCH_Button_Initialize
  5357                           
  5358                           ;mtouch_button.c: 132: }
  5359                           ;mtouch_button.c: 133: Button_StateMachine[button->state]( button );
  5360  0451  0833               	movf	Button_Service@button,w
  5361  0452                     L3:	
  5362  0452  00AC               	movwf	Button_State_Pressed@button
  5363  0453  0833               	movf	Button_Service@button,w
  5364  0454  3E06               	addlw	6
  5365  0455  0086               	movwf	6
  5366  0456  0187               	clrf	7
  5367  0457  3501               	lslf	1,w
  5368  0458  3E3C               	addlw	(low (_Button_StateMachine| 0))& (0+255)
  5369  0459  0086               	movwf	6
  5370  045A  3F41               	moviw [1]fsr1
  5371  045B  008A               	movwf	10
  5372  045C  3F40               	moviw [0]fsr1
  5373  045D  000A               	callw
  5374  045E  3184               	pagesel	$
  5375  045F  0008               	return
  5376  0460                     __end_of_Button_Service:	
  5377  0460                     PL92:	
  5378  0460  0A33               	incf	Button_Service@button,w
  5379  0461  0086               	movwf	6
  5380  0462  0187               	clrf	7
  5381  0463  0801               	movf	1,w
  5382  0464  0008               	return
  5383  0465                     __end_ofPL92:	
  5384                           
  5385                           	psect	text34
  5386  06FB                     __ptext34:	
  5387 ;; *************** function _MTOUCH_Sensor_wasSampled *****************
  5388 ;; Defined at:
  5389 ;;		line 498 in file "mtouch/mtouch_sensor.c"
  5390 ;; Parameters:    Size  Location     Type
  5391 ;;  sensor          1    wreg     enum E30
  5392 ;; Auto vars:     Size  Location     Type
  5393 ;;  sensor          1    3[BANK0 ] enum E30
  5394 ;; Return value:  Size  Location     Type
  5395 ;;                  1    wreg      unsigned char 
  5396 ;; Registers used:
  5397 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5398 ;; Tracked objects:
  5399 ;;		On entry : 1F/0
  5400 ;;		On exit  : 1F/0
  5401 ;;		Unchanged: 0/0
  5402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5403 ;;      Params:         0       0       0       0
  5404 ;;      Locals:         0       1       0       0
  5405 ;;      Temps:          0       0       0       0
  5406 ;;      Totals:         0       1       0       0
  5407 ;;Total ram usage:        1 bytes
  5408 ;; Hardware stack levels used:    1
  5409 ;; Hardware stack levels required when called:    5
  5410 ;; This function calls:
  5411 ;;		___bmul
  5412 ;; This function is called by:
  5413 ;;		_Button_Service
  5414 ;; This function uses a non-reentrant model
  5415 ;;
  5416                           
  5417                           
  5418                           ;psect for function _MTOUCH_Sensor_wasSampled
  5419  06FB                     _MTOUCH_Sensor_wasSampled:	
  5420                           
  5421                           ;incstack = 0
  5422                           ; Regs used in _MTOUCH_Sensor_wasSampled: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  5423                           ;MTOUCH_Sensor_wasSampled@sensor stored from wreg
  5424  06FB  00A3               	movwf	MTOUCH_Sensor_wasSampled@sensor
  5425                           
  5426                           ;mtouch_sensor.c: 499: if ( sensor < 1 )
  5427  06FC  0823               	movf	MTOUCH_Sensor_wasSampled@sensor,w
  5428  06FD  1D03               	btfss	3,2
  5429  06FE  3400               	retlw	0
  5430                           
  5431                           ;mtouch_sensor.c: 500: return ( bool ) mtouch_sensor[sensor].sampled;
  5432  06FF  3009               	movlw	9
  5433  0700  00A0               	movwf	___bmul@multiplicand
  5434  0701  0823               	movf	MTOUCH_Sensor_wasSampled@sensor,w
  5435  0702  2731               	fcall	___bmul
  5436  0703  3E55               	addlw	(low ((_mtouch_sensor| 0+8)))& (0+255)
  5437  0704  0086               	movwf	6
  5438  0705  0187               	clrf	7
  5439  0706  0C01               	rrf	1,w
  5440  0707  3901               	andlw	1
  5441  0708  0008               	return
  5442  0709                     __end_of_MTOUCH_Sensor_wasSampled:	
  5443                           ;mtouch_sensor.c: 501: else
  5444                           ;mtouch_sensor.c: 502: return 0;
  5445                           
  5446                           
  5447                           	psect	text35
  5448  07C5                     __ptext35:	
  5449 ;; *************** function _MTOUCH_Sensor_isCalibrated *****************
  5450 ;; Defined at:
  5451 ;;		line 475 in file "mtouch/mtouch_sensor.c"
  5452 ;; Parameters:    Size  Location     Type
  5453 ;;  sensor          1    wreg     enum E30
  5454 ;; Auto vars:     Size  Location     Type
  5455 ;;  sensor          1    0[COMMON] enum E30
  5456 ;; Return value:  Size  Location     Type
  5457 ;;                  1    wreg      unsigned char 
  5458 ;; Registers used:
  5459 ;;		wreg
  5460 ;; Tracked objects:
  5461 ;;		On entry : 1F/0
  5462 ;;		On exit  : 1F/0
  5463 ;;		Unchanged: 1F/0
  5464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5465 ;;      Params:         0       0       0       0
  5466 ;;      Locals:         0       0       0       0
  5467 ;;      Temps:          0       0       0       0
  5468 ;;      Totals:         0       0       0       0
  5469 ;;Total ram usage:        0 bytes
  5470 ;; Hardware stack levels used:    1
  5471 ;; Hardware stack levels required when called:    4
  5472 ;; This function calls:
  5473 ;;		Nothing
  5474 ;; This function is called by:
  5475 ;;		_Button_Service
  5476 ;; This function uses a non-reentrant model
  5477 ;;
  5478                           
  5479                           
  5480                           ;psect for function _MTOUCH_Sensor_isCalibrated
  5481  07C5                     _MTOUCH_Sensor_isCalibrated:	
  5482                           
  5483                           ;mtouch_sensor.c: 477: return 1;
  5484                           
  5485                           ;incstack = 0
  5486                           ; Regs used in _MTOUCH_Sensor_isCalibrated: [wreg]
  5487  07C5  3401               	retlw	1
  5488  07C6                     __end_of_MTOUCH_Sensor_isCalibrated:	
  5489                           
  5490                           	psect	text36
  5491  020C                     __ptext36:	
  5492 ;; *************** function _Button_State_NotPressed *****************
  5493 ;; Defined at:
  5494 ;;		line 154 in file "mtouch/mtouch_button.c"
  5495 ;; Parameters:    Size  Location     Type
  5496 ;;  button          1   12[BANK0 ] PTR struct .
  5497 ;;		 -> mtouch_button(22), 
  5498 ;; Auto vars:     Size  Location     Type
  5499 ;;		None
  5500 ;; Return value:  Size  Location     Type
  5501 ;;                  1    wreg      void 
  5502 ;; Registers used:
  5503 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5504 ;; Tracked objects:
  5505 ;;		On entry : 1F/0
  5506 ;;		On exit  : 1F/0
  5507 ;;		Unchanged: 0/0
  5508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5509 ;;      Params:         0       1       0       0
  5510 ;;      Locals:         0       0       0       0
  5511 ;;      Temps:          0       5       0       0
  5512 ;;      Totals:         0       6       0       0
  5513 ;;Total ram usage:        6 bytes
  5514 ;; Hardware stack levels used:    1
  5515 ;; Hardware stack levels required when called:    6
  5516 ;; This function calls:
  5517 ;;		_Button_Baseline_Update
  5518 ;;		_Button_DefaultCallback
  5519 ;;		_MTOUCH_Button_Initialize
  5520 ;;		_led_on
  5521 ;; This function is called by:
  5522 ;;		_Button_Service
  5523 ;; This function uses a non-reentrant model
  5524 ;;
  5525                           
  5526                           
  5527                           ;psect for function _Button_State_NotPressed
  5528  020C                     _Button_State_NotPressed:	
  5529                           
  5530                           ;mtouch_button.c: 156: if ( ( button->deviation ) < ( mtouch_button_deviation_t ) (mtouc
      +                          h_button_deviation_t)-10 ) {
  5531                           
  5532                           ;incstack = 0
  5533                           ; Regs used in _Button_State_NotPressed: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
  5534  020C  082C               	movf	Button_State_NotPressed@button,w
  5535  020D  3E0D               	addlw	13
  5536  020E  2271               	fcall	PL58	;call to abstracted procedure
  5537  020F  3A80               	xorlw	128
  5538  0210  00AF               	movwf	??_Button_State_NotPressed+2
  5539  0211  307F               	movlw	127
  5540  0212  022F               	subwf	??_Button_State_NotPressed+2,w
  5541  0213  1D03               	skipz
  5542  0214  2A17               	goto	u1325
  5543  0215  30F6               	movlw	246
  5544  0216  022D               	subwf	??_Button_State_NotPressed,w
  5545  0217                     u1325:	
  5546  0217  1803               	skipnc
  5547  0218  2A2E               	goto	l2269
  5548                           
  5549                           ;mtouch_button.c: 157: ( button->counter )++;
  5550  0219  0020               	movlb	0	; select bank0
  5551  021A  082C               	movf	Button_State_NotPressed@button,w
  5552  021B  3E0F               	addlw	15
  5553  021C  0086               	movwf	6
  5554                           
  5555                           ;mtouch_button.c: 158: if ( ( button->counter ) > ( mtouch_button_statecounter_t ) ((mto
      +                          uch_button_statecounter_t)32) ) {
  5556  021D  227E               	fcall	PL76	;call to abstracted procedure
  5557  021E  3E0F               	addlw	15
  5558  021F  2271               	fcall	PL58	;call to abstracted procedure
  5559  0220  3000               	movlw	0
  5560  0221  022E               	subwf	??_Button_State_NotPressed+1,w
  5561  0222  3021               	movlw	33
  5562  0223  1903               	skipnz
  5563  0224  022D               	subwf	??_Button_State_NotPressed,w
  5564  0225  1C03               	skipc
  5565  0226  2A5F               	goto	l451
  5566                           
  5567                           ;mtouch_button.c: 159: button->counter = ( mtouch_button_statecounter_t ) 0;
  5568  0227  082C               	movf	Button_State_NotPressed@button,w
  5569  0228  2278               	fcall	PL64	;call to abstracted procedure
  5570                           
  5571                           ;mtouch_button.c: 160: MTOUCH_Button_Initialize ( button->name );
  5572  0229  082C               	movf	Button_State_NotPressed@button,w
  5573  022A  0086               	movwf	6
  5574  022B  0801               	movf	1,w
  5575  022C  2557               	fcall	_MTOUCH_Button_Initialize
  5576  022D  2A5F               	goto	l451
  5577  022E                     l2269:	
  5578                           
  5579                           ;mtouch_button.c: 163: else if ( ( button->deviation ) > ( button->threshold ) ) {
  5580  022E  0020               	movlb	0	; select bank0
  5581  022F  082C               	movf	Button_State_NotPressed@button,w
  5582  0230  3E0D               	addlw	13
  5583  0231  2271               	fcall	PL58	;call to abstracted procedure
  5584  0232  082C               	movf	Button_State_NotPressed@button,w
  5585  0233  3E13               	addlw	19
  5586  0234  0086               	movwf	6
  5587  0235  3F40               	moviw [0]fsr1
  5588  0236  00AF               	movwf	??_Button_State_NotPressed+2
  5589  0237  3F41               	moviw [1]fsr1
  5590  0238  00B0               	movwf	??_Button_State_NotPressed+3
  5591  0239  3A80               	xorlw	128
  5592  023A  00B1               	movwf	??_Button_State_NotPressed+4
  5593  023B  082E               	movf	??_Button_State_NotPressed+1,w
  5594  023C  3A80               	xorlw	128
  5595  023D  0231               	subwf	??_Button_State_NotPressed+4,w
  5596  023E  1D03               	skipz
  5597  023F  2A42               	goto	u1345
  5598  0240  082D               	movf	??_Button_State_NotPressed,w
  5599  0241  022F               	subwf	??_Button_State_NotPressed+2,w
  5600  0242                     u1345:	
  5601  0242  1803               	skipnc
  5602  0243  2A57               	goto	l2275
  5603                           
  5604                           ;mtouch_button.c: 164: button->state = MTOUCH_BUTTON_STATE_pressed;
  5605  0244  0020               	movlb	0	; select bank0
  5606  0245  082C               	movf	Button_State_NotPressed@button,w
  5607  0246  3E06               	addlw	6
  5608  0247  0086               	movwf	6
  5609  0248  3002               	movlw	2
  5610  0249  0187               	clrf	7
  5611  024A  0081               	movwf	1
  5612                           
  5613                           ;mtouch_button.c: 165: button->counter = ( mtouch_button_statecounter_t ) 0;
  5614  024B  082C               	movf	Button_State_NotPressed@button,w
  5615  024C  2278               	fcall	PL64	;call to abstracted procedure
  5616                           
  5617                           ;mtouch_button.c: 166: callback_pressed ( button->name );
  5618  024D  082C               	movf	Button_State_NotPressed@button,w
  5619  024E  0086               	movwf	6
  5620  024F  0801               	movf	1,w
  5621  0250  00A0               	movwf	?_led_on
  5622  0251  0845               	movf	_callback_pressed+1,w
  5623  0252  008A               	movwf	10
  5624  0253  0844               	movf	_callback_pressed,w
  5625  0254  000A               	callw
  5626  0255  3182               	pagesel	$
  5627                           
  5628                           ;mtouch_button.c: 167: } else {
  5629  0256  2A5F               	goto	l451
  5630  0257                     l2275:	
  5631                           
  5632                           ;mtouch_button.c: 169: button->counter = ( mtouch_button_statecounter_t ) 0;
  5633  0257  0020               	movlb	0	; select bank0
  5634  0258  082C               	movf	Button_State_NotPressed@button,w
  5635  0259  3E0F               	addlw	15
  5636  025A  0086               	movwf	6
  5637  025B  3000               	movlw	0
  5638  025C  0187               	clrf	7
  5639  025D  3FC0               	movwi [0]fsr1
  5640  025E  3FC1               	movwi [1]fsr1
  5641  025F                     l451:	
  5642                           
  5643                           ;mtouch_button.c: 170: }
  5644                           ;mtouch_button.c: 173: ( button->baseline_count )++;
  5645  025F  0020               	movlb	0	; select bank0
  5646  0260  082C               	movf	Button_State_NotPressed@button,w
  5647  0261  3E11               	addlw	17
  5648  0262  0086               	movwf	6
  5649                           
  5650                           ;mtouch_button.c: 174: if ( ( button->baseline_count ) > ((mtouch_button_baselinecounter
      +                          _t)32) ) {
  5651  0263  227E               	fcall	PL76	;call to abstracted procedure
  5652  0264  3E11               	addlw	17
  5653  0265  2271               	fcall	PL58	;call to abstracted procedure
  5654  0266  3000               	movlw	0
  5655  0267  022E               	subwf	??_Button_State_NotPressed+1,w
  5656  0268  3021               	movlw	33
  5657  0269  1903               	skipnz
  5658  026A  022D               	subwf	??_Button_State_NotPressed,w
  5659  026B  1C03               	skipc
  5660  026C  0008               	return
  5661                           
  5662                           ;mtouch_button.c: 175: button->baseline_count = ( mtouch_button_baselinecounter_t ) 0;
  5663  026D  082C               	movf	Button_State_NotPressed@button,w
  5664  026E  2572               	fcall	PL82	;call to abstracted procedure
  5665                           
  5666                           ;mtouch_button.c: 176: Button_Baseline_Update ( button );
  5667  026F  082C               	movf	Button_State_NotPressed@button,w
  5668  0270  2B22               	ljmp	_Button_Baseline_Update
  5669  0271                     __end_of_Button_State_NotPressed:	
  5670  0271                     PL58:	
  5671  0271  0086               	movwf	6
  5672  0272  0187               	clrf	7
  5673  0273  3F40               	moviw [0]fsr1
  5674  0274  00AD               	movwf	??_Button_State_NotPressed
  5675  0275  3F41               	moviw [1]fsr1
  5676  0276  00AE               	movwf	??_Button_State_NotPressed+1
  5677  0277  0008               	return
  5678  0278                     __end_ofPL58:	
  5679  0278                     PL64:	
  5680  0278  3E0F               	addlw	15
  5681  0279  0086               	movwf	6
  5682  027A  3000               	movlw	0
  5683  027B  3FC0               	movwi [0]fsr1
  5684  027C  3FC1               	movwi [1]fsr1
  5685  027D  0008               	return
  5686  027E                     __end_ofPL64:	
  5687  027E                     PL76:	
  5688  027E  3001               	movlw	1
  5689  027F  0187               	clrf	7
  5690  0280  0781               	addwf	1,f
  5691  0281  3141               	addfsr 1,1
  5692  0282  1803               	skipnc
  5693  0283  0A81               	incf	1,f
  5694  0284  082C               	movf	Button_State_NotPressed@button,w
  5695  0285  0008               	return
  5696  0286                     __end_ofPL76:	
  5697                           
  5698                           	psect	text37
  5699  036B                     __ptext37:	
  5700 ;; *************** function _Button_State_Initializing *****************
  5701 ;; Defined at:
  5702 ;;		line 137 in file "mtouch/mtouch_button.c"
  5703 ;; Parameters:    Size  Location     Type
  5704 ;;  button          1   12[BANK0 ] PTR struct .
  5705 ;;		 -> mtouch_button(22), 
  5706 ;; Auto vars:     Size  Location     Type
  5707 ;;		None
  5708 ;; Return value:  Size  Location     Type
  5709 ;;                  1    wreg      void 
  5710 ;; Registers used:
  5711 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5712 ;; Tracked objects:
  5713 ;;		On entry : 1F/0
  5714 ;;		On exit  : 1F/0
  5715 ;;		Unchanged: 0/0
  5716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5717 ;;      Params:         0       1       0       0
  5718 ;;      Locals:         0       0       0       0
  5719 ;;      Temps:          0       4       0       0
  5720 ;;      Totals:         0       5       0       0
  5721 ;;Total ram usage:        5 bytes
  5722 ;; Hardware stack levels used:    1
  5723 ;; Hardware stack levels required when called:    7
  5724 ;; This function calls:
  5725 ;;		_Button_Baseline_Initialize
  5726 ;;		_Button_Baseline_Update
  5727 ;; This function is called by:
  5728 ;;		_Button_Service
  5729 ;; This function uses a non-reentrant model
  5730 ;;
  5731                           
  5732                           
  5733                           ;psect for function _Button_State_Initializing
  5734  036B                     _Button_State_Initializing:	
  5735                           
  5736                           ;mtouch_button.c: 139: if ( ( button->counter ) <= ( mtouch_button_statecounter_t ) ((mt
      +                          ouch_button_statecounter_t)16) / 2 ) {
  5737                           
  5738                           ;incstack = 0
  5739                           ; Regs used in _Button_State_Initializing: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  5740  036B  23A6               	fcall	PL62	;call to abstracted procedure
  5741  036C  3009               	movlw	9
  5742  036D  1903               	skipnz
  5743  036E  022D               	subwf	??_Button_State_Initializing,w
  5744                           
  5745                           ;mtouch_button.c: 140: Button_Baseline_Initialize ( button );
  5746  036F  082C               	movf	Button_State_Initializing@button,w
  5747  0370  1803               	skipnc
  5748  0371  2B74               	goto	L4
  5749  0372  24C1               	fcall	_Button_Baseline_Initialize
  5750                           
  5751                           ;mtouch_button.c: 141: } else {
  5752  0373  2B75               	goto	l2255
  5753  0374                     L4:	
  5754                           ;mtouch_button.c: 142: Button_Baseline_Update ( button );
  5755                           
  5756  0374  2322               	fcall	_Button_Baseline_Update
  5757  0375                     l2255:	
  5758                           
  5759                           ;mtouch_button.c: 143: }
  5760                           ;mtouch_button.c: 146: ( button->counter )++;
  5761  0375  082C               	movf	Button_State_Initializing@button,w
  5762  0376  3E0F               	addlw	15
  5763  0377  0086               	movwf	6
  5764  0378  3001               	movlw	1
  5765  0379  0187               	clrf	7
  5766  037A  0781               	addwf	1,f
  5767  037B  3141               	addfsr 1,1
  5768  037C  1803               	skipnc
  5769  037D  0A81               	incf	1,f
  5770                           
  5771                           ;mtouch_button.c: 147: if ( ( button->counter ) >= ( mtouch_button_statecounter_t ) ((mt
      +                          ouch_button_statecounter_t)16) ) {
  5772  037E  23A6               	fcall	PL62	;call to abstracted procedure
  5773  037F  3010               	movlw	16
  5774  0380  1903               	skipnz
  5775  0381  022D               	subwf	??_Button_State_Initializing,w
  5776  0382  1C03               	skipc
  5777  0383  0008               	return
  5778                           
  5779                           ;mtouch_button.c: 148: button->reading = ( mtouch_button_reading_t ) ( ( button->baselin
      +                          e ) >> ((uint8_t)4) );
  5780  0384  082C               	movf	Button_State_Initializing@button,w
  5781  0385  3E09               	addlw	9
  5782  0386  0086               	movwf	6
  5783  0387  3F40               	moviw [0]fsr1
  5784  0388  00AD               	movwf	??_Button_State_Initializing
  5785  0389  3F41               	moviw [1]fsr1
  5786  038A  00AE               	movwf	??_Button_State_Initializing+1
  5787  038B  3F42               	moviw [2]fsr1
  5788  038C  00AF               	movwf	??_Button_State_Initializing+2
  5789  038D  3F43               	moviw [3]fsr1
  5790  038E  00B0               	movwf	??_Button_State_Initializing+3
  5791  038F  3004               	movlw	4
  5792  0390                     u1315:	
  5793  0390  36B0               	lsrf	??_Button_State_Initializing+3,f
  5794  0391  0CAF               	rrf	??_Button_State_Initializing+2,f
  5795  0392  0CAE               	rrf	??_Button_State_Initializing+1,f
  5796  0393  0CAD               	rrf	??_Button_State_Initializing,f
  5797  0394  0B89               	decfsz	9,f
  5798  0395  2B90               	goto	u1315
  5799  0396  082C               	movf	Button_State_Initializing@button,w
  5800  0397  3E07               	addlw	7
  5801  0398  0086               	movwf	6
  5802  0399  0187               	clrf	7
  5803  039A  082D               	movf	??_Button_State_Initializing,w
  5804  039B  3FC0               	movwi [0]fsr1
  5805  039C  082E               	movf	??_Button_State_Initializing+1,w
  5806  039D  3FC1               	movwi [1]fsr1
  5807                           
  5808                           ;mtouch_button.c: 149: button->state = MTOUCH_BUTTON_STATE_notPressed;
  5809  039E  082C               	movf	Button_State_Initializing@button,w
  5810  039F  3E06               	addlw	6
  5811  03A0  0086               	movwf	6
  5812  03A1  0181               	clrf	1
  5813  03A2  0A81               	incf	1,f
  5814                           
  5815                           ;mtouch_button.c: 150: button->counter = ( mtouch_button_statecounter_t ) 0;
  5816  03A3  082C               	movf	Button_State_Initializing@button,w
  5817  03A4  2278               	fcall	PL64	;call to abstracted procedure
  5818  03A5  0008               	return
  5819  03A6                     __end_of_Button_State_Initializing:	
  5820  03A6                     PL62:	
  5821  03A6  082C               	movf	Button_State_Initializing@button,w
  5822  03A7  3E0F               	addlw	15
  5823  03A8  0086               	movwf	6
  5824  03A9  0187               	clrf	7
  5825  03AA  3F40               	moviw [0]fsr1
  5826  03AB  00AD               	movwf	??_Button_State_Initializing
  5827  03AC  3F41               	moviw [1]fsr1
  5828  03AD  00AE               	movwf	??_Button_State_Initializing+1
  5829  03AE  3000               	movlw	0
  5830  03AF  022E               	subwf	??_Button_State_Initializing+1,w
  5831  03B0  0008               	return
  5832  03B1                     __end_ofPL62:	
  5833                           
  5834                           	psect	text38
  5835  0465                     __ptext38:	
  5836 ;; *************** function _Button_State_Pressed *****************
  5837 ;; Defined at:
  5838 ;;		line 180 in file "mtouch/mtouch_button.c"
  5839 ;; Parameters:    Size  Location     Type
  5840 ;;  button          1   12[BANK0 ] PTR struct .
  5841 ;;		 -> mtouch_button(22), 
  5842 ;; Auto vars:     Size  Location     Type
  5843 ;;		None
  5844 ;; Return value:  Size  Location     Type
  5845 ;;                  1    wreg      void 
  5846 ;; Registers used:
  5847 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5848 ;; Tracked objects:
  5849 ;;		On entry : 1F/0
  5850 ;;		On exit  : 0/0
  5851 ;;		Unchanged: 0/0
  5852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5853 ;;      Params:         0       1       0       0
  5854 ;;      Locals:         0       0       0       0
  5855 ;;      Temps:          0       5       0       0
  5856 ;;      Totals:         0       6       0       0
  5857 ;;Total ram usage:        6 bytes
  5858 ;; Hardware stack levels used:    1
  5859 ;; Hardware stack levels required when called:    5
  5860 ;; This function calls:
  5861 ;;		_Button_DefaultCallback
  5862 ;;		_led_off
  5863 ;; This function is called by:
  5864 ;;		_Button_Service
  5865 ;; This function uses a non-reentrant model
  5866 ;;
  5867                           
  5868                           
  5869                           ;psect for function _Button_State_Pressed
  5870  0465                     _Button_State_Pressed:	
  5871                           
  5872                           ;mtouch_button.c: 183: if ( ( button->deviation ) < ( mtouch_button_deviation_t ) ( ( bu
      +                          tton->threshold ) >> 1 ) ) {
  5873                           
  5874                           ;incstack = 0
  5875                           ; Regs used in _Button_State_Pressed: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5876  0465  082C               	movf	Button_State_Pressed@button,w
  5877  0466  3E13               	addlw	19
  5878  0467  0086               	movwf	6
  5879  0468  0187               	clrf	7
  5880  0469  3F40               	moviw [0]fsr1
  5881  046A  00AD               	movwf	??_Button_State_Pressed
  5882  046B  3F41               	moviw [1]fsr1
  5883  046C  00AE               	movwf	??_Button_State_Pressed+1
  5884  046D  0D2E               	rlf	??_Button_State_Pressed+1,w
  5885  046E  0CAE               	rrf	??_Button_State_Pressed+1,f
  5886  046F  0CAD               	rrf	??_Button_State_Pressed,f
  5887  0470  082C               	movf	Button_State_Pressed@button,w
  5888  0471  3E0D               	addlw	13
  5889  0472  0086               	movwf	6
  5890  0473  3F40               	moviw [0]fsr1
  5891  0474  00AF               	movwf	??_Button_State_Pressed+2
  5892  0475  3F41               	moviw [1]fsr1
  5893  0476  00B0               	movwf	??_Button_State_Pressed+3
  5894  0477  3A80               	xorlw	128
  5895  0478  00B1               	movwf	??_Button_State_Pressed+4
  5896  0479  082E               	movf	??_Button_State_Pressed+1,w
  5897  047A  3A80               	xorlw	128
  5898  047B  0231               	subwf	??_Button_State_Pressed+4,w
  5899  047C  1D03               	skipz
  5900  047D  2C80               	goto	u1365
  5901  047E  082D               	movf	??_Button_State_Pressed,w
  5902  047F  022F               	subwf	??_Button_State_Pressed+2,w
  5903  0480                     u1365:	
  5904  0480  1803               	skipnc
  5905  0481  0008               	return
  5906                           
  5907                           ;mtouch_button.c: 184: button->state = MTOUCH_BUTTON_STATE_notPressed;
  5908  0482  0020               	movlb	0	; select bank0
  5909  0483  082C               	movf	Button_State_Pressed@button,w
  5910  0484  3E06               	addlw	6
  5911  0485  0086               	movwf	6
  5912  0486  0187               	clrf	7
  5913  0487  0181               	clrf	1
  5914  0488  0A81               	incf	1,f
  5915                           
  5916                           ;mtouch_button.c: 185: button->counter = ( mtouch_button_statecounter_t ) 0;
  5917  0489  082C               	movf	Button_State_Pressed@button,w
  5918  048A  2278               	fcall	PL64	;call to abstracted procedure
  5919                           
  5920                           ;mtouch_button.c: 186: callback_notPressed ( button->name );
  5921  048B  082C               	movf	Button_State_Pressed@button,w
  5922  048C  0086               	movwf	6
  5923  048D  0801               	movf	1,w
  5924  048E  00A0               	movwf	?_led_off
  5925  048F  0843               	movf	_callback_notPressed+1,w
  5926  0490  008A               	movwf	10
  5927  0491  0842               	movf	_callback_notPressed,w
  5928  0492  000A               	callw
  5929  0493  3184               	pagesel	$
  5930  0494  0008               	return
  5931  0495                     __end_of_Button_State_Pressed:	
  5932                           
  5933                           	psect	text39
  5934  07BD                     __ptext39:	
  5935 ;; *************** function _led_on *****************
  5936 ;; Defined at:
  5937 ;;		line 113 in file "main.c"
  5938 ;; Parameters:    Size  Location     Type
  5939 ;;		None
  5940 ;; Auto vars:     Size  Location     Type
  5941 ;;		None
  5942 ;; Return value:  Size  Location     Type
  5943 ;;                  1    wreg      void 
  5944 ;; Registers used:
  5945 ;;		None
  5946 ;; Tracked objects:
  5947 ;;		On entry : 1F/0
  5948 ;;		On exit  : 1F/2
  5949 ;;		Unchanged: 0/0
  5950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5951 ;;      Params:         0       1       0       0
  5952 ;;      Locals:         0       0       0       0
  5953 ;;      Temps:          0       0       0       0
  5954 ;;      Totals:         0       1       0       0
  5955 ;;Total ram usage:        1 bytes
  5956 ;; Hardware stack levels used:    1
  5957 ;; Hardware stack levels required when called:    4
  5958 ;; This function calls:
  5959 ;;		Nothing
  5960 ;; This function is called by:
  5961 ;;		_main
  5962 ;;		_Button_State_NotPressed
  5963 ;; This function uses a non-reentrant model
  5964 ;;
  5965                           
  5966                           
  5967                           ;psect for function _led_on
  5968  07BD                     _led_on:	
  5969                           
  5970                           ;main.c: 115: LATAbits.LATA5 = 0;
  5971                           
  5972                           ;incstack = 0
  5973                           ; Regs used in _led_on: []
  5974  07BD  0022               	movlb	2	; select bank2
  5975  07BE  128C               	bcf	12,5	;volatile
  5976  07BF  0008               	return
  5977  07C0                     __end_of_led_on:	
  5978                           
  5979                           	psect	text40
  5980  07C6                     __ptext40:	
  5981 ;; *************** function _Button_DefaultCallback *****************
  5982 ;; Defined at:
  5983 ;;		line 340 in file "mtouch/mtouch_button.c"
  5984 ;; Parameters:    Size  Location     Type
  5985 ;;  button          1    0[BANK0 ] enum E3654
  5986 ;; Auto vars:     Size  Location     Type
  5987 ;;		None
  5988 ;; Return value:  Size  Location     Type
  5989 ;;                  1    wreg      void 
  5990 ;; Registers used:
  5991 ;;		None
  5992 ;; Tracked objects:
  5993 ;;		On entry : 1F/0
  5994 ;;		On exit  : 1F/0
  5995 ;;		Unchanged: 1F/0
  5996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5997 ;;      Params:         0       1       0       0
  5998 ;;      Locals:         0       0       0       0
  5999 ;;      Temps:          0       0       0       0
  6000 ;;      Totals:         0       1       0       0
  6001 ;;Total ram usage:        1 bytes
  6002 ;; Hardware stack levels used:    1
  6003 ;; Hardware stack levels required when called:    4
  6004 ;; This function calls:
  6005 ;;		Nothing
  6006 ;; This function is called by:
  6007 ;;		_Button_State_NotPressed
  6008 ;;		_Button_State_Pressed
  6009 ;; This function uses a non-reentrant model
  6010 ;;
  6011                           
  6012                           
  6013                           ;psect for function _Button_DefaultCallback
  6014  07C6                     _Button_DefaultCallback:	
  6015                           
  6016                           ;incstack = 0
  6017                           ; Regs used in _Button_DefaultCallback: []
  6018  07C6  0008               	return
  6019  07C7                     __end_of_Button_DefaultCallback:	
  6020                           
  6021                           	psect	text41
  6022  07C0                     __ptext41:	
  6023 ;; *************** function _led_off *****************
  6024 ;; Defined at:
  6025 ;;		line 118 in file "main.c"
  6026 ;; Parameters:    Size  Location     Type
  6027 ;;		None
  6028 ;; Auto vars:     Size  Location     Type
  6029 ;;		None
  6030 ;; Return value:  Size  Location     Type
  6031 ;;                  1    wreg      void 
  6032 ;; Registers used:
  6033 ;;		None
  6034 ;; Tracked objects:
  6035 ;;		On entry : 1F/0
  6036 ;;		On exit  : 1F/2
  6037 ;;		Unchanged: 0/0
  6038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6039 ;;      Params:         0       1       0       0
  6040 ;;      Locals:         0       0       0       0
  6041 ;;      Temps:          0       0       0       0
  6042 ;;      Totals:         0       1       0       0
  6043 ;;Total ram usage:        1 bytes
  6044 ;; Hardware stack levels used:    1
  6045 ;; Hardware stack levels required when called:    4
  6046 ;; This function calls:
  6047 ;;		Nothing
  6048 ;; This function is called by:
  6049 ;;		_main
  6050 ;;		_Button_State_Pressed
  6051 ;; This function uses a non-reentrant model
  6052 ;;
  6053                           
  6054                           
  6055                           ;psect for function _led_off
  6056  07C0                     _led_off:	
  6057                           
  6058                           ;main.c: 120: LATAbits.LATA5 = 1;
  6059                           
  6060                           ;incstack = 0
  6061                           ; Regs used in _led_off: []
  6062  07C0  0022               	movlb	2	; select bank2
  6063  07C1  168C               	bsf	12,5	;volatile
  6064  07C2  0008               	return
  6065  07C3                     __end_of_led_off:	
  6066                           
  6067                           	psect	text42
  6068  0322                     __ptext42:	
  6069 ;; *************** function _Button_Baseline_Update *****************
  6070 ;; Defined at:
  6071 ;;		line 312 in file "mtouch/mtouch_button.c"
  6072 ;; Parameters:    Size  Location     Type
  6073 ;;  button          1    wreg     PTR struct .
  6074 ;;		 -> mtouch_button(22), 
  6075 ;; Auto vars:     Size  Location     Type
  6076 ;;  button          1    6[BANK0 ] PTR struct .
  6077 ;;		 -> mtouch_button(22), 
  6078 ;; Return value:  Size  Location     Type
  6079 ;;                  1    wreg      void 
  6080 ;; Registers used:
  6081 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6082 ;; Tracked objects:
  6083 ;;		On entry : 1F/0
  6084 ;;		On exit  : 1F/0
  6085 ;;		Unchanged: 0/0
  6086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6087 ;;      Params:         0       0       0       0
  6088 ;;      Locals:         0       1       0       0
  6089 ;;      Temps:          0       6       0       0
  6090 ;;      Totals:         0       7       0       0
  6091 ;;Total ram usage:        7 bytes
  6092 ;; Hardware stack levels used:    1
  6093 ;; Hardware stack levels required when called:    4
  6094 ;; This function calls:
  6095 ;;		Nothing
  6096 ;; This function is called by:
  6097 ;;		_Button_State_Initializing
  6098 ;;		_Button_State_NotPressed
  6099 ;; This function uses a non-reentrant model
  6100 ;;
  6101                           
  6102                           
  6103                           ;psect for function _Button_Baseline_Update
  6104  0322                     _Button_Baseline_Update:	
  6105                           
  6106                           ;incstack = 0
  6107                           ; Regs used in _Button_Baseline_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
  6108                           ;Button_Baseline_Update@button stored from wreg
  6109  0322  00A6               	movwf	Button_Baseline_Update@button
  6110                           
  6111                           ;mtouch_button.c: 313: if ( GIE == ( uint8_t ) 1 ) {
  6112  0323  1F8B               	btfss	11,7	;volatile
  6113  0324  2B29               	goto	l2073
  6114                           
  6115                           ;mtouch_button.c: 314: GIE = ( uint8_t ) 0;
  6116  0325  138B               	bcf	11,7	;volatile
  6117                           
  6118                           ;mtouch_button.c: 315: button->baseline -= ( button->baseline ) >> ((uint8_t)4);
  6119                           
  6120                           ;mtouch_button.c: 316: button->baseline += button->reading;
  6121  0326  232C               	fcall	PL50	;call to abstracted procedure
  6122                           
  6123                           ;mtouch_button.c: 317: GIE = ( uint8_t ) 1;
  6124  0327  178B               	bsf	11,7	;volatile
  6125                           
  6126                           ;mtouch_button.c: 318: } else {
  6127  0328  0008               	return
  6128  0329                     l2073:	
  6129                           
  6130                           ;mtouch_button.c: 319: button->baseline -= ( button->baseline ) >> ((uint8_t)4);
  6131  0329  0826               	movf	Button_Baseline_Update@button,w
  6132                           
  6133                           ;mtouch_button.c: 320: button->baseline += button->reading;
  6134  032A  232C               	fcall	PL50	;call to abstracted procedure
  6135  032B  0008               	return
  6136  032C                     __end_of_Button_Baseline_Update:	
  6137  032C                     PL50:	
  6138  032C  3E09               	addlw	9
  6139  032D  0086               	movwf	6
  6140  032E  0187               	clrf	7
  6141  032F  3F40               	moviw [0]fsr1
  6142  0330  00A0               	movwf	??_Button_Baseline_Update
  6143  0331  3F41               	moviw [1]fsr1
  6144  0332  00A1               	movwf	??_Button_Baseline_Update+1
  6145  0333  3F42               	moviw [2]fsr1
  6146  0334  00A2               	movwf	??_Button_Baseline_Update+2
  6147  0335  3F43               	moviw [3]fsr1
  6148  0336  00A3               	movwf	??_Button_Baseline_Update+3
  6149  0337  3004               	movlw	4
  6150  0338                     u1045:	
  6151  0338  36A3               	lsrf	??_Button_Baseline_Update+3,f
  6152  0339  0CA2               	rrf	??_Button_Baseline_Update+2,f
  6153  033A  0CA1               	rrf	??_Button_Baseline_Update+1,f
  6154  033B  0CA0               	rrf	??_Button_Baseline_Update,f
  6155  033C  0B89               	decfsz	9,f
  6156  033D  2B38               	goto	u1045
  6157  033E  0826               	movf	Button_Baseline_Update@button,w
  6158  033F  3E09               	addlw	9
  6159  0340  0086               	movwf	6
  6160  0341  0187               	clrf	7
  6161  0342  0820               	movf	??_Button_Baseline_Update,w
  6162  0343  0281               	subwf	1,f
  6163  0344  3141               	addfsr 1,1
  6164  0345  0821               	movf	??_Button_Baseline_Update+1,w
  6165  0346  3B81               	subwfb	1,f
  6166  0347  3141               	addfsr 1,1
  6167  0348  0822               	movf	??_Button_Baseline_Update+2,w
  6168  0349  3B81               	subwfb	1,f
  6169  034A  3141               	addfsr 1,1
  6170  034B  0823               	movf	??_Button_Baseline_Update+3,w
  6171  034C  3B81               	subwfb	1,f
  6172  034D  317D               	addfsr 1,-3
  6173  034E  0826               	movf	Button_Baseline_Update@button,w
  6174  034F  3E07               	addlw	7
  6175  0350  0086               	movwf	6
  6176  0351  0187               	clrf	7
  6177  0352  3F40               	moviw [0]fsr1
  6178  0353  00A0               	movwf	??_Button_Baseline_Update
  6179  0354  3F41               	moviw [1]fsr1
  6180  0355  00A1               	movwf	??_Button_Baseline_Update+1
  6181  0356  0820               	movf	??_Button_Baseline_Update,w
  6182  0357  00A2               	movwf	??_Button_Baseline_Update+2
  6183  0358  0821               	movf	??_Button_Baseline_Update+1,w
  6184  0359  00A3               	movwf	??_Button_Baseline_Update+3
  6185  035A  01A4               	clrf	??_Button_Baseline_Update+4
  6186  035B  01A5               	clrf	??_Button_Baseline_Update+5
  6187  035C  0826               	movf	Button_Baseline_Update@button,w
  6188  035D  3E09               	addlw	9
  6189  035E  0086               	movwf	6
  6190  035F  0822               	movf	??_Button_Baseline_Update+2,w
  6191  0360  0781               	addwf	1,f
  6192  0361  3141               	addfsr 1,1
  6193  0362  0823               	movf	??_Button_Baseline_Update+3,w
  6194  0363  3D81               	addwfc	1,f
  6195  0364  3141               	addfsr 1,1
  6196  0365  0824               	movf	??_Button_Baseline_Update+4,w
  6197  0366  3D81               	addwfc	1,f
  6198  0367  3141               	addfsr 1,1
  6199  0368  0825               	movf	??_Button_Baseline_Update+5,w
  6200  0369  3D81               	addwfc	1,f
  6201  036A  0008               	return
  6202  036B                     __end_ofPL50:	
  6203                           
  6204                           	psect	text43
  6205  04C1                     __ptext43:	
  6206 ;; *************** function _Button_Baseline_Initialize *****************
  6207 ;; Defined at:
  6208 ;;		line 307 in file "mtouch/mtouch_button.c"
  6209 ;; Parameters:    Size  Location     Type
  6210 ;;  button          1    wreg     PTR struct .
  6211 ;;		 -> mtouch_button(22), 
  6212 ;; Auto vars:     Size  Location     Type
  6213 ;;  button          1   11[BANK0 ] PTR struct .
  6214 ;;		 -> mtouch_button(22), 
  6215 ;; Return value:  Size  Location     Type
  6216 ;;                  1    wreg      void 
  6217 ;; Registers used:
  6218 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6219 ;; Tracked objects:
  6220 ;;		On entry : 1F/0
  6221 ;;		On exit  : 1F/0
  6222 ;;		Unchanged: 0/0
  6223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6224 ;;      Params:         0       0       0       0
  6225 ;;      Locals:         0       1       0       0
  6226 ;;      Temps:          0       4       0       0
  6227 ;;      Totals:         0       5       0       0
  6228 ;;Total ram usage:        5 bytes
  6229 ;; Hardware stack levels used:    1
  6230 ;; Hardware stack levels required when called:    6
  6231 ;; This function calls:
  6232 ;;		_MTOUCH_Sensor_RawSample_Get
  6233 ;; This function is called by:
  6234 ;;		_Button_State_Initializing
  6235 ;; This function uses a non-reentrant model
  6236 ;;
  6237                           
  6238                           
  6239                           ;psect for function _Button_Baseline_Initialize
  6240  04C1                     _Button_Baseline_Initialize:	
  6241                           
  6242                           ;incstack = 0
  6243                           ; Regs used in _Button_Baseline_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6244                           ;Button_Baseline_Initialize@button stored from wreg
  6245  04C1  00AB               	movwf	Button_Baseline_Initialize@button
  6246                           
  6247                           ;mtouch_button.c: 308: button->baseline = MTOUCH_Sensor_RawSample_Get ( button->sensor )
      +                          ;
  6248  04C2  0A2B               	incf	Button_Baseline_Initialize@button,w
  6249  04C3  0086               	movwf	6
  6250  04C4  0187               	clrf	7
  6251  04C5  0801               	movf	1,w
  6252  04C6  2678               	fcall	_MTOUCH_Sensor_RawSample_Get
  6253  04C7  0823               	movf	?_MTOUCH_Sensor_RawSample_Get,w
  6254  04C8  00A7               	movwf	??_Button_Baseline_Initialize
  6255  04C9  0824               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
  6256  04CA  00A8               	movwf	??_Button_Baseline_Initialize+1
  6257  04CB  01A9               	clrf	??_Button_Baseline_Initialize+2
  6258  04CC  01AA               	clrf	??_Button_Baseline_Initialize+3
  6259  04CD  082B               	movf	Button_Baseline_Initialize@button,w
  6260  04CE  3E09               	addlw	9
  6261  04CF  0086               	movwf	6
  6262  04D0  0187               	clrf	7
  6263  04D1  0827               	movf	??_Button_Baseline_Initialize,w
  6264  04D2  3FC0               	movwi [0]fsr1
  6265  04D3  0828               	movf	??_Button_Baseline_Initialize+1,w
  6266  04D4  3FC1               	movwi [1]fsr1
  6267  04D5  0829               	movf	??_Button_Baseline_Initialize+2,w
  6268  04D6  3FC2               	movwi [2]fsr1
  6269  04D7  082A               	movf	??_Button_Baseline_Initialize+3,w
  6270  04D8  3FC3               	movwi [3]fsr1
  6271                           
  6272                           ;mtouch_button.c: 309: button->baseline <<= ((uint8_t)4);
  6273  04D9  082B               	movf	Button_Baseline_Initialize@button,w
  6274  04DA  3E09               	addlw	9
  6275  04DB  0086               	movwf	6
  6276  04DC  3004               	movlw	4
  6277  04DD                     u1025:	
  6278  04DD  3581               	lslf	1,f
  6279  04DE  3141               	addfsr 1,1
  6280  04DF  0D81               	rlf	1,f
  6281  04E0  3141               	addfsr 1,1
  6282  04E1  0D81               	rlf	1,f
  6283  04E2  3141               	addfsr 1,1
  6284  04E3  0D81               	rlf	1,f
  6285  04E4  317D               	addfsr 1,-3
  6286  04E5  0B89               	decfsz	9,f
  6287  04E6  2CDD               	goto	u1025
  6288  04E7  0008               	return
  6289  04E8                     __end_of_Button_Baseline_Initialize:	
  6290                           
  6291                           	psect	text44
  6292  03F6                     __ptext44:	
  6293 ;; *************** function _Button_Reading_Update *****************
  6294 ;; Defined at:
  6295 ;;		line 295 in file "mtouch/mtouch_button.c"
  6296 ;; Parameters:    Size  Location     Type
  6297 ;;  button          1    wreg     PTR struct .
  6298 ;;		 -> mtouch_button(22), 
  6299 ;; Auto vars:     Size  Location     Type
  6300 ;;  button          1    9[BANK0 ] PTR struct .
  6301 ;;		 -> mtouch_button(22), 
  6302 ;; Return value:  Size  Location     Type
  6303 ;;                  1    wreg      void 
  6304 ;; Registers used:
  6305 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6306 ;; Tracked objects:
  6307 ;;		On entry : 1F/0
  6308 ;;		On exit  : 1F/0
  6309 ;;		Unchanged: 0/0
  6310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6311 ;;      Params:         0       0       0       0
  6312 ;;      Locals:         0       1       0       0
  6313 ;;      Temps:          0       2       0       0
  6314 ;;      Totals:         0       3       0       0
  6315 ;;Total ram usage:        3 bytes
  6316 ;; Hardware stack levels used:    1
  6317 ;; Hardware stack levels required when called:    6
  6318 ;; This function calls:
  6319 ;;		_MTOUCH_Sensor_RawSample_Get
  6320 ;; This function is called by:
  6321 ;;		_Button_Service
  6322 ;; This function uses a non-reentrant model
  6323 ;;
  6324                           
  6325                           
  6326                           ;psect for function _Button_Reading_Update
  6327  03F6                     _Button_Reading_Update:	
  6328                           
  6329                           ;incstack = 0
  6330                           ; Regs used in _Button_Reading_Update: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6331                           ;Button_Reading_Update@button stored from wreg
  6332  03F6  00A9               	movwf	Button_Reading_Update@button
  6333                           
  6334                           ;mtouch_button.c: 296: if ( GIE == ( uint8_t ) 1 ) {
  6335  03F7  1F8B               	btfss	11,7	;volatile
  6336  03F8  2BFF               	goto	l2227
  6337                           
  6338                           ;mtouch_button.c: 297: GIE = ( uint8_t ) 0;
  6339  03F9  138B               	bcf	11,7	;volatile
  6340                           
  6341                           ;mtouch_button.c: 298: button->reading -= button->reading>>(uint8_t)2;
  6342                           
  6343                           ;mtouch_button.c: 299: button->reading += MTOUCH_Sensor_RawSample_Get ( button->sensor )
      +                           >> (uint8_t)2;
  6344  03FA  2404               	fcall	PL52	;call to abstracted procedure
  6345  03FB  2678               	fcall	_MTOUCH_Sensor_RawSample_Get
  6346  03FC  241D               	fcall	PL54	;call to abstracted procedure
  6347                           
  6348                           ;mtouch_button.c: 300: GIE = ( uint8_t ) 1;
  6349  03FD  178B               	bsf	11,7	;volatile
  6350                           
  6351                           ;mtouch_button.c: 301: } else {
  6352  03FE  0008               	return
  6353  03FF                     l2227:	
  6354                           
  6355                           ;mtouch_button.c: 302: button->reading -= button->reading>>(uint8_t)2;
  6356  03FF  0829               	movf	Button_Reading_Update@button,w
  6357                           
  6358                           ;mtouch_button.c: 303: button->reading += MTOUCH_Sensor_RawSample_Get ( button->sensor )
      +                           >> (uint8_t)2;
  6359  0400  2404               	fcall	PL52	;call to abstracted procedure
  6360  0401  2678               	fcall	_MTOUCH_Sensor_RawSample_Get
  6361  0402  241D               	fcall	PL54	;call to abstracted procedure
  6362  0403  0008               	return
  6363  0404                     __end_of_Button_Reading_Update:	
  6364  0404                     PL52:	
  6365  0404  3E07               	addlw	7
  6366  0405  0086               	movwf	6
  6367  0406  0187               	clrf	7
  6368  0407  3F40               	moviw [0]fsr1
  6369  0408  00A7               	movwf	??_Button_Reading_Update
  6370  0409  3F41               	moviw [1]fsr1
  6371  040A  00A8               	movwf	??_Button_Reading_Update+1
  6372  040B  36A8               	lsrf	??_Button_Reading_Update+1,f
  6373  040C  0CA7               	rrf	??_Button_Reading_Update,f
  6374  040D  36A8               	lsrf	??_Button_Reading_Update+1,f
  6375  040E  0CA7               	rrf	??_Button_Reading_Update,f
  6376  040F  0829               	movf	Button_Reading_Update@button,w
  6377  0410  3E07               	addlw	7
  6378  0411  0086               	movwf	6
  6379  0412  0827               	movf	??_Button_Reading_Update,w
  6380  0413  0281               	subwf	1,f
  6381  0414  3141               	addfsr 1,1
  6382  0415  0828               	movf	??_Button_Reading_Update+1,w
  6383  0416  3B81               	subwfb	1,f
  6384  0417  317F               	addfsr 1,-1
  6385  0418  0A29               	incf	Button_Reading_Update@button,w
  6386  0419  0086               	movwf	6
  6387  041A  0187               	clrf	7
  6388  041B  0801               	movf	1,w
  6389  041C  0008               	return
  6390  041D                     __end_ofPL52:	
  6391  041D                     PL54:	
  6392  041D  0823               	movf	?_MTOUCH_Sensor_RawSample_Get,w
  6393  041E  00A7               	movwf	??_Button_Reading_Update
  6394  041F  0824               	movf	?_MTOUCH_Sensor_RawSample_Get+1,w
  6395  0420  00A8               	movwf	??_Button_Reading_Update+1
  6396  0421  36A8               	lsrf	??_Button_Reading_Update+1,f
  6397  0422  0CA7               	rrf	??_Button_Reading_Update,f
  6398  0423  36A8               	lsrf	??_Button_Reading_Update+1,f
  6399  0424  0CA7               	rrf	??_Button_Reading_Update,f
  6400  0425  0829               	movf	Button_Reading_Update@button,w
  6401  0426  3E07               	addlw	7
  6402  0427  0086               	movwf	6
  6403  0428  0187               	clrf	7
  6404  0429  0827               	movf	??_Button_Reading_Update,w
  6405  042A  0781               	addwf	1,f
  6406  042B  3141               	addfsr 1,1
  6407  042C  0828               	movf	??_Button_Reading_Update+1,w
  6408  042D  3D81               	addwfc	1,f
  6409  042E  317F               	addfsr 1,-1
  6410  042F  0008               	return
  6411  0430                     __end_ofPL54:	
  6412                           
  6413                           	psect	text45
  6414  0678                     __ptext45:	
  6415 ;; *************** function _MTOUCH_Sensor_RawSample_Get *****************
  6416 ;; Defined at:
  6417 ;;		line 384 in file "mtouch/mtouch_sensor.c"
  6418 ;; Parameters:    Size  Location     Type
  6419 ;;  name            1    wreg     enum E30
  6420 ;; Auto vars:     Size  Location     Type
  6421 ;;  name            1    6[BANK0 ] enum E30
  6422 ;; Return value:  Size  Location     Type
  6423 ;;                  2    3[BANK0 ] unsigned int 
  6424 ;; Registers used:
  6425 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6426 ;; Tracked objects:
  6427 ;;		On entry : 1F/0
  6428 ;;		On exit  : 1F/0
  6429 ;;		Unchanged: 0/0
  6430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6431 ;;      Params:         0       3       0       0
  6432 ;;      Locals:         0       1       0       0
  6433 ;;      Temps:          0       0       0       0
  6434 ;;      Totals:         0       4       0       0
  6435 ;;Total ram usage:        4 bytes
  6436 ;; Hardware stack levels used:    1
  6437 ;; Hardware stack levels required when called:    5
  6438 ;; This function calls:
  6439 ;;		___bmul
  6440 ;; This function is called by:
  6441 ;;		_Button_Reading_Update
  6442 ;;		_Button_Baseline_Initialize
  6443 ;;		_log_info
  6444 ;; This function uses a non-reentrant model
  6445 ;;
  6446                           
  6447                           
  6448                           ;psect for function _MTOUCH_Sensor_RawSample_Get
  6449  0678                     _MTOUCH_Sensor_RawSample_Get:	
  6450                           
  6451                           ;incstack = 0
  6452                           ; Regs used in _MTOUCH_Sensor_RawSample_Get: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
  6453                           ;MTOUCH_Sensor_RawSample_Get@name stored from wreg
  6454  0678  00A6               	movwf	MTOUCH_Sensor_RawSample_Get@name
  6455                           
  6456                           ;mtouch_sensor.c: 385: if ( name < 1 ) {
  6457  0679  0826               	movf	MTOUCH_Sensor_RawSample_Get@name,w
  6458  067A  1D03               	btfss	3,2
  6459  067B  2E88               	goto	l1955
  6460                           
  6461                           ;mtouch_sensor.c: 386: return mtouch_sensor[name].rawSample;
  6462  067C  3009               	movlw	9
  6463  067D  00A0               	movwf	___bmul@multiplicand
  6464  067E  0826               	movf	MTOUCH_Sensor_RawSample_Get@name,w
  6465  067F  2731               	fcall	___bmul
  6466  0680  3E53               	addlw	(low ((_mtouch_sensor| 0+6)))& (0+255)
  6467  0681  0086               	movwf	6
  6468  0682  0187               	clrf	7
  6469  0683  3F40               	moviw [0]fsr1
  6470  0684  00A3               	movwf	?_MTOUCH_Sensor_RawSample_Get
  6471  0685  3F41               	moviw [1]fsr1
  6472  0686  00A4               	movwf	?_MTOUCH_Sensor_RawSample_Get+1
  6473  0687  0008               	return
  6474  0688                     l1955:	
  6475                           
  6476                           ;mtouch_sensor.c: 388: return ( mtouch_sensor_sample_t ) 0;
  6477  0688  01A3               	clrf	?_MTOUCH_Sensor_RawSample_Get
  6478  0689  01A4               	clrf	?_MTOUCH_Sensor_RawSample_Get+1
  6479  068A  0008               	return
  6480  068B                     __end_of_MTOUCH_Sensor_RawSample_Get:	
  6481                           
  6482                           	psect	text46
  6483  0108                     __ptext46:	
  6484 ;; *************** function _Button_Deviation_Update *****************
  6485 ;; Defined at:
  6486 ;;		line 245 in file "mtouch/mtouch_button.c"
  6487 ;; Parameters:    Size  Location     Type
  6488 ;;  button          1    wreg     PTR struct .
  6489 ;;		 -> mtouch_button(22), 
  6490 ;; Auto vars:     Size  Location     Type
  6491 ;;  button          1   12[BANK0 ] PTR struct .
  6492 ;;		 -> mtouch_button(22), 
  6493 ;;  deviation       4    8[BANK0 ] long 
  6494 ;;  baseline        4    4[BANK0 ] long 
  6495 ;; Return value:  Size  Location     Type
  6496 ;;                  1    wreg      void 
  6497 ;; Registers used:
  6498 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6499 ;; Tracked objects:
  6500 ;;		On entry : 1F/0
  6501 ;;		On exit  : 1F/0
  6502 ;;		Unchanged: 0/0
  6503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6504 ;;      Params:         0       0       0       0
  6505 ;;      Locals:         0       9       0       0
  6506 ;;      Temps:          0       4       0       0
  6507 ;;      Totals:         0      13       0       0
  6508 ;;Total ram usage:       13 bytes
  6509 ;; Hardware stack levels used:    1
  6510 ;; Hardware stack levels required when called:    4
  6511 ;; This function calls:
  6512 ;;		Nothing
  6513 ;; This function is called by:
  6514 ;;		_Button_Service
  6515 ;; This function uses a non-reentrant model
  6516 ;;
  6517                           
  6518                           
  6519                           ;psect for function _Button_Deviation_Update
  6520  0108                     _Button_Deviation_Update:	
  6521                           
  6522                           ;incstack = 0
  6523                           ; Regs used in _Button_Deviation_Update: [wreg+fsr1l+fsr1h+status,2+status,0]
  6524                           ;Button_Deviation_Update@button stored from wreg
  6525  0108  00AC               	movwf	Button_Deviation_Update@button
  6526                           
  6527                           ;mtouch_button.c: 246: int32_t deviation;
  6528                           ;mtouch_button.c: 249: int32_t baseline = ( int32_t ) ( ( button->baseline ) >> ((uint8_
      +                          t)4) );
  6529  0109  3E09               	addlw	9
  6530  010A  2188               	fcall	PL66	;call to abstracted procedure
  6531  010B  3F42               	moviw [2]fsr1
  6532  010C  00A2               	movwf	??_Button_Deviation_Update+2
  6533  010D  3F43               	moviw [3]fsr1
  6534  010E  00A3               	movwf	??_Button_Deviation_Update+3
  6535  010F  3004               	movlw	4
  6536  0110                     u1245:	
  6537  0110  36A3               	lsrf	??_Button_Deviation_Update+3,f
  6538  0111  0CA2               	rrf	??_Button_Deviation_Update+2,f
  6539  0112  0CA1               	rrf	??_Button_Deviation_Update+1,f
  6540  0113  0CA0               	rrf	??_Button_Deviation_Update,f
  6541  0114  0B89               	decfsz	9,f
  6542  0115  2910               	goto	u1245
  6543  0116  0823               	movf	??_Button_Deviation_Update+3,w
  6544  0117  00A7               	movwf	Button_Deviation_Update@baseline+3
  6545  0118  0822               	movf	??_Button_Deviation_Update+2,w
  6546  0119  00A6               	movwf	Button_Deviation_Update@baseline+2
  6547  011A  0821               	movf	??_Button_Deviation_Update+1,w
  6548  011B  00A5               	movwf	Button_Deviation_Update@baseline+1
  6549  011C  0820               	movf	??_Button_Deviation_Update,w
  6550  011D  00A4               	movwf	Button_Deviation_Update@baseline
  6551                           
  6552                           ;mtouch_button.c: 250: if ( baseline > button->default_baseline )
  6553  011E  082C               	movf	Button_Deviation_Update@button,w
  6554  011F  3E02               	addlw	2
  6555  0120  2188               	fcall	PL66	;call to abstracted procedure
  6556  0121  3F42               	moviw [2]fsr1
  6557  0122  00A2               	movwf	??_Button_Deviation_Update+2
  6558  0123  3F43               	moviw [3]fsr1
  6559  0124  00A3               	movwf	??_Button_Deviation_Update+3
  6560  0125  0827               	movf	Button_Deviation_Update@baseline+3,w
  6561  0126  0223               	subwf	??_Button_Deviation_Update+3,w
  6562  0127  1D03               	skipz
  6563  0128  2933               	goto	u1255
  6564  0129  0826               	movf	Button_Deviation_Update@baseline+2,w
  6565  012A  0222               	subwf	??_Button_Deviation_Update+2,w
  6566  012B  1D03               	skipz
  6567  012C  2933               	goto	u1255
  6568  012D  0825               	movf	Button_Deviation_Update@baseline+1,w
  6569  012E  0221               	subwf	??_Button_Deviation_Update+1,w
  6570  012F  1D03               	skipz
  6571  0130  2933               	goto	u1255
  6572  0131  0824               	movf	Button_Deviation_Update@baseline,w
  6573  0132  0220               	subwf	??_Button_Deviation_Update,w
  6574  0133                     u1255:	
  6575                           
  6576                           ;mtouch_button.c: 251: {
  6577                           ;mtouch_button.c: 252: baseline = button->default_baseline;
  6578  0133  082C               	movf	Button_Deviation_Update@button,w
  6579  0134  1803               	skipnc
  6580  0135  2942               	goto	L5
  6581  0136  3E02               	addlw	2
  6582  0137  0086               	movwf	6
  6583  0138  0187               	clrf	7
  6584  0139  3F40               	moviw [0]fsr1
  6585  013A  00A4               	movwf	Button_Deviation_Update@baseline
  6586  013B  3F41               	moviw [1]fsr1
  6587  013C  00A5               	movwf	Button_Deviation_Update@baseline+1
  6588  013D  3F42               	moviw [2]fsr1
  6589  013E  00A6               	movwf	Button_Deviation_Update@baseline+2
  6590  013F  3F43               	moviw [3]fsr1
  6591  0140  00A7               	movwf	Button_Deviation_Update@baseline+3
  6592                           
  6593                           ;mtouch_button.c: 253: }
  6594                           ;mtouch_button.c: 256: deviation = ( int32_t ) ( ( int32_t ) ( button->reading ) - basel
      +                          ine );
  6595  0141  082C               	movf	Button_Deviation_Update@button,w
  6596  0142                     L5:	
  6597  0142  3E07               	addlw	7
  6598  0143  2188               	fcall	PL66	;call to abstracted procedure
  6599  0144  0820               	movf	??_Button_Deviation_Update,w
  6600  0145  00A8               	movwf	Button_Deviation_Update@deviation
  6601  0146  0821               	movf	??_Button_Deviation_Update+1,w
  6602  0147  00A9               	movwf	Button_Deviation_Update@deviation+1
  6603  0148  01AA               	clrf	Button_Deviation_Update@deviation+2
  6604  0149  01AB               	clrf	Button_Deviation_Update@deviation+3
  6605  014A  0824               	movf	Button_Deviation_Update@baseline,w
  6606  014B  02A8               	subwf	Button_Deviation_Update@deviation,f
  6607  014C  0825               	movf	Button_Deviation_Update@baseline+1,w
  6608  014D  3BA9               	subwfb	Button_Deviation_Update@deviation+1,f
  6609  014E  0826               	movf	Button_Deviation_Update@baseline+2,w
  6610  014F  3BAA               	subwfb	Button_Deviation_Update@deviation+2,f
  6611  0150  0827               	movf	Button_Deviation_Update@baseline+3,w
  6612  0151  3BAB               	subwfb	Button_Deviation_Update@deviation+3,f
  6613                           
  6614                           ;mtouch_button.c: 259: deviation = deviation >> ( button->scaling );
  6615  0152  082C               	movf	Button_Deviation_Update@button,w
  6616  0153  3E15               	addlw	21
  6617  0154  0086               	movwf	6
  6618  0155  0A01               	incf	1,w
  6619  0156  295B               	goto	u1260
  6620  0157                     u1265:	
  6621  0157  37AB               	asrf	Button_Deviation_Update@deviation+3,f
  6622  0158  0CAA               	rrf	Button_Deviation_Update@deviation+2,f
  6623  0159  0CA9               	rrf	Button_Deviation_Update@deviation+1,f
  6624  015A  0CA8               	rrf	Button_Deviation_Update@deviation,f
  6625  015B                     u1260:	
  6626  015B  0B89               	decfsz	9,f
  6627  015C  2957               	goto	u1265
  6628                           
  6629                           ;mtouch_button.c: 262: if ( deviation > ((32767)) ) {
  6630  015D  1BAB               	btfsc	Button_Deviation_Update@deviation+3,7
  6631  015E  296F               	goto	l2243
  6632  015F  082B               	movf	Button_Deviation_Update@deviation+3,w
  6633  0160  1D03               	btfss	3,2
  6634  0161  2969               	goto	l2241
  6635  0162  082A               	movf	Button_Deviation_Update@deviation+2,w
  6636  0163  1D03               	btfss	3,2
  6637  0164  2969               	goto	l2241
  6638  0165  3080               	movlw	128
  6639  0166  0229               	subwf	Button_Deviation_Update@deviation+1,w
  6640  0167  1C03               	btfss	3,0
  6641  0168  296F               	goto	l2243
  6642  0169                     l2241:	
  6643                           
  6644                           ;mtouch_button.c: 263: deviation = ((32767));
  6645  0169  307F               	movlw	127
  6646  016A  01AB               	clrf	Button_Deviation_Update@deviation+3
  6647  016B  01AA               	clrf	Button_Deviation_Update@deviation+2
  6648  016C  00A9               	movwf	Button_Deviation_Update@deviation+1
  6649  016D  30FF               	movlw	255
  6650  016E  00A8               	movwf	Button_Deviation_Update@deviation
  6651  016F                     l2243:	
  6652                           
  6653                           ;mtouch_button.c: 264: }
  6654                           ;mtouch_button.c: 265: if ( deviation < ((-32768)) ) {
  6655  016F  1FAB               	btfss	Button_Deviation_Update@deviation+3,7
  6656  0170  297F               	goto	l2247
  6657  0171  3080               	movlw	128
  6658  0172  0229               	subwf	Button_Deviation_Update@deviation+1,w
  6659  0173  30FF               	movlw	255
  6660  0174  3B2A               	subwfb	Button_Deviation_Update@deviation+2,w
  6661  0175  30FF               	movlw	255
  6662  0176  3B2B               	subwfb	Button_Deviation_Update@deviation+3,w
  6663  0177  1803               	btfsc	3,0
  6664  0178  297F               	goto	l2247
  6665                           
  6666                           ;mtouch_button.c: 266: deviation = ((-32768));
  6667  0179  30FF               	movlw	255
  6668  017A  00AB               	movwf	Button_Deviation_Update@deviation+3
  6669  017B  00AA               	movwf	Button_Deviation_Update@deviation+2
  6670  017C  3080               	movlw	128
  6671  017D  00A9               	movwf	Button_Deviation_Update@deviation+1
  6672  017E  01A8               	clrf	Button_Deviation_Update@deviation
  6673  017F                     l2247:	
  6674                           
  6675                           ;mtouch_button.c: 267: }
  6676                           ;mtouch_button.c: 269: button->deviation = ( mtouch_button_deviation_t ) deviation;
  6677  017F  082C               	movf	Button_Deviation_Update@button,w
  6678  0180  3E0D               	addlw	13
  6679  0181  0086               	movwf	6
  6680  0182  0187               	clrf	7
  6681  0183  0828               	movf	Button_Deviation_Update@deviation,w
  6682  0184  3FC0               	movwi [0]fsr1
  6683  0185  0829               	movf	Button_Deviation_Update@deviation+1,w
  6684  0186  3FC1               	movwi [1]fsr1
  6685  0187  0008               	return
  6686  0188                     __end_of_Button_Deviation_Update:	
  6687  0188                     PL66:	
  6688  0188  0086               	movwf	6
  6689  0189  0187               	clrf	7
  6690  018A  3F40               	moviw [0]fsr1
  6691  018B  00A0               	movwf	??_Button_Deviation_Update
  6692  018C  3F41               	moviw [1]fsr1
  6693  018D  00A1               	movwf	??_Button_Deviation_Update+1
  6694  018E  0008               	return
  6695  018F                     __end_ofPL66:	
  6696                           
  6697                           	psect	text47
  6698  07A2                     __ptext47:	
  6699 ;; *************** function _MTOUCH_Sensor_SetSampledCallback *****************
  6700 ;; Defined at:
  6701 ;;		line 409 in file "mtouch/mtouch_sensor.c"
  6702 ;; Parameters:    Size  Location     Type
  6703 ;;  callback        2    0[BANK0 ] PTR FTN(enum E30,)void 
  6704 ;;		 -> log_info(1), 
  6705 ;; Auto vars:     Size  Location     Type
  6706 ;;		None
  6707 ;; Return value:  Size  Location     Type
  6708 ;;                  1    wreg      void 
  6709 ;; Registers used:
  6710 ;;		wreg
  6711 ;; Tracked objects:
  6712 ;;		On entry : 1F/0
  6713 ;;		On exit  : 1F/0
  6714 ;;		Unchanged: 0/0
  6715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6716 ;;      Params:         0       2       0       0
  6717 ;;      Locals:         0       0       0       0
  6718 ;;      Temps:          0       0       0       0
  6719 ;;      Totals:         0       2       0       0
  6720 ;;Total ram usage:        2 bytes
  6721 ;; Hardware stack levels used:    1
  6722 ;; Hardware stack levels required when called:    4
  6723 ;; This function calls:
  6724 ;;		Nothing
  6725 ;; This function is called by:
  6726 ;;		_main
  6727 ;; This function uses a non-reentrant model
  6728 ;;
  6729                           
  6730                           
  6731                           ;psect for function _MTOUCH_Sensor_SetSampledCallback
  6732  07A2                     _MTOUCH_Sensor_SetSampledCallback:	
  6733                           
  6734                           ;mtouch_sensor.c: 410: callback_sampled = callback;
  6735                           
  6736                           ;incstack = 0
  6737                           ; Regs used in _MTOUCH_Sensor_SetSampledCallback: [wreg]
  6738  07A2  0821               	movf	MTOUCH_Sensor_SetSampledCallback@callback+1,w
  6739  07A3  00CB               	movwf	_callback_sampled+1
  6740  07A4  0820               	movf	MTOUCH_Sensor_SetSampledCallback@callback,w
  6741  07A5  00CA               	movwf	_callback_sampled
  6742  07A6  0008               	return
  6743  07A7                     __end_of_MTOUCH_Sensor_SetSampledCallback:	
  6744                           
  6745                           	psect	text48
  6746  07B5                     __ptext48:	
  6747 ;; *************** function _MTOUCH_Initialize *****************
  6748 ;; Defined at:
  6749 ;;		line 12 in file "mtouch/mtouch.c"
  6750 ;; Parameters:    Size  Location     Type
  6751 ;;		None
  6752 ;; Auto vars:     Size  Location     Type
  6753 ;;		None
  6754 ;; Return value:  Size  Location     Type
  6755 ;;                  1    wreg      void 
  6756 ;; Registers used:
  6757 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6758 ;; Tracked objects:
  6759 ;;		On entry : B1F/3
  6760 ;;		On exit  : 1F/1
  6761 ;;		Unchanged: 0/0
  6762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6763 ;;      Params:         0       0       0       0
  6764 ;;      Locals:         0       0       0       0
  6765 ;;      Temps:          0       0       0       0
  6766 ;;      Totals:         0       0       0       0
  6767 ;;Total ram usage:        0 bytes
  6768 ;; Hardware stack levels used:    1
  6769 ;; Hardware stack levels required when called:    8
  6770 ;; This function calls:
  6771 ;;		_MTOUCH_Button_InitializeAll
  6772 ;;		_MTOUCH_Sensor_InitializeAll
  6773 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  6774 ;;		_MTOUCH_Sensor_Scan_Initialize
  6775 ;; This function is called by:
  6776 ;;		_main
  6777 ;; This function uses a non-reentrant model
  6778 ;;
  6779                           
  6780                           
  6781                           ;psect for function _MTOUCH_Initialize
  6782  07B5                     _MTOUCH_Initialize:	
  6783                           
  6784                           ;mtouch.c: 13: MTOUCH_Sensor_InitializeAll ( );
  6785                           
  6786                           ;incstack = 0
  6787                           ; Regs used in _MTOUCH_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6788  07B5  2767               	fcall	_MTOUCH_Sensor_InitializeAll
  6789                           
  6790                           ;mtouch.c: 14: MTOUCH_Button_InitializeAll ( );
  6791  07B6  2609               	fcall	_MTOUCH_Button_InitializeAll
  6792                           
  6793                           ;mtouch.c: 15: MTOUCH_Sensor_Sampled_ResetAll ( );
  6794  07B7  26AF               	fcall	_MTOUCH_Sensor_Sampled_ResetAll
  6795                           
  6796                           ;mtouch.c: 16: MTOUCH_Sensor_Scan_Initialize ( );
  6797  07B8  2F70               	ljmp	l1871
  6798  07B9                     __end_of_MTOUCH_Initialize:	
  6799                           
  6800                           	psect	text49
  6801  0770                     __ptext49:	
  6802 ;; *************** function _MTOUCH_Sensor_Scan_Initialize *****************
  6803 ;; Defined at:
  6804 ;;		line 143 in file "mtouch/mtouch_sensor.c"
  6805 ;; Parameters:    Size  Location     Type
  6806 ;;		None
  6807 ;; Auto vars:     Size  Location     Type
  6808 ;;		None
  6809 ;; Return value:  Size  Location     Type
  6810 ;;                  1    wreg      void 
  6811 ;; Registers used:
  6812 ;;		wreg, status,2, status,0
  6813 ;; Tracked objects:
  6814 ;;		On entry : 1F/0
  6815 ;;		On exit  : 1F/1
  6816 ;;		Unchanged: 0/0
  6817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6818 ;;      Params:         0       0       0       0
  6819 ;;      Locals:         0       0       0       0
  6820 ;;      Temps:          0       0       0       0
  6821 ;;      Totals:         0       0       0       0
  6822 ;;Total ram usage:        0 bytes
  6823 ;; Hardware stack levels used:    1
  6824 ;; Hardware stack levels required when called:    4
  6825 ;; This function calls:
  6826 ;;		Nothing
  6827 ;; This function is called by:
  6828 ;;		_Sensor_Acq_ExecutePacket
  6829 ;;		_MTOUCH_Initialize
  6830 ;; This function uses a non-reentrant model
  6831 ;;
  6832                           
  6833                           
  6834                           ;psect for function _MTOUCH_Sensor_Scan_Initialize
  6835  0770                     _MTOUCH_Sensor_Scan_Initialize:	
  6836  0770                     l1871:	
  6837                           ;incstack = 0
  6838                           ; Regs used in _MTOUCH_Sensor_Scan_Initialize: [wreg+status,2+status,0]
  6839                           
  6840                           
  6841                           ;mtouch_sensor.c: 144: T2CONbits.T2CKPS = 0x0;
  6842  0770  30FC               	movlw	-4
  6843  0771  059C               	andwf	28,f	;volatile
  6844                           
  6845                           ;mtouch_sensor.c: 146: ADCON0 = ( uint8_t ) 0;
  6846  0772  0021               	movlb	1	; select bank1
  6847  0773  019D               	clrf	29	;volatile
  6848                           
  6849                           ;mtouch_sensor.c: 147: ADCON1 = ( uint8_t ) ( 0x1 << 7 | 0x5 << 4 | 0x0 );
  6850  0774  30D0               	movlw	208
  6851  0775  009E               	movwf	30	;volatile
  6852                           
  6853                           ;mtouch_sensor.c: 148: ADCON2 = ( uint8_t ) 0;
  6854  0776  019F               	clrf	31	;volatile
  6855  0777  0008               	return
  6856  0778                     __end_of_MTOUCH_Sensor_Scan_Initialize:	
  6857                           
  6858                           	psect	text50
  6859  06AF                     __ptext50:	
  6860 ;; *************** function _MTOUCH_Sensor_Sampled_ResetAll *****************
  6861 ;; Defined at:
  6862 ;;		line 491 in file "mtouch/mtouch_sensor.c"
  6863 ;; Parameters:    Size  Location     Type
  6864 ;;		None
  6865 ;; Auto vars:     Size  Location     Type
  6866 ;;  sensor          1    2[BANK0 ] PTR struct .
  6867 ;;		 -> mtouch_sensor(9), 
  6868 ;; Return value:  Size  Location     Type
  6869 ;;                  1    wreg      void 
  6870 ;; Registers used:
  6871 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6872 ;; Tracked objects:
  6873 ;;		On entry : 1F/0
  6874 ;;		On exit  : 1F/0
  6875 ;;		Unchanged: 0/0
  6876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6877 ;;      Params:         0       0       0       0
  6878 ;;      Locals:         0       1       0       0
  6879 ;;      Temps:          0       1       0       0
  6880 ;;      Totals:         0       2       0       0
  6881 ;;Total ram usage:        2 bytes
  6882 ;; Hardware stack levels used:    1
  6883 ;; Hardware stack levels required when called:    5
  6884 ;; This function calls:
  6885 ;;		_Sensor_Sampled_Reset
  6886 ;; This function is called by:
  6887 ;;		_MTOUCH_Initialize
  6888 ;;		_MTOUCH_Service_Mainloop
  6889 ;; This function uses a non-reentrant model
  6890 ;;
  6891                           
  6892                           
  6893                           ;psect for function _MTOUCH_Sensor_Sampled_ResetAll
  6894  06AF                     _MTOUCH_Sensor_Sampled_ResetAll:	
  6895                           
  6896                           ;mtouch_sensor.c: 492: mtouch_sensor_t* sensor;
  6897                           ;mtouch_sensor.c: 493: for ( sensor = &mtouch_sensor[0]; sensor <= &mtouch_sensor[1 - 1]
      +                          ; sensor++ ) {
  6898                           
  6899                           ;incstack = 0
  6900                           ; Regs used in _MTOUCH_Sensor_Sampled_ResetAll: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
  6901  06AF  304D               	movlw	(low (_mtouch_sensor| 0))& (0+255)
  6902  06B0  00A2               	movwf	MTOUCH_Sensor_Sampled_ResetAll@sensor
  6903  06B1                     L6:	
  6904  06B1  00A1               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll
  6905  06B2  0822               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  6906  06B3  0221               	subwf	??_MTOUCH_Sensor_Sampled_ResetAll,w
  6907  06B4  1C03               	btfss	3,0
  6908  06B5  0008               	return
  6909                           
  6910                           ;mtouch_sensor.c: 494: Sensor_Sampled_Reset ( sensor );
  6911  06B6  0822               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor,w
  6912  06B7                     i7L__ptext53:	
  6913                           
  6914                           ;psect for function _Sensor_Sampled_Reset
  6915  06B7                     i7L_Sensor_Sampled_Reset:	
  6916                           
  6917                           ;incstack = 0
  6918                           ; Regs used in _Sensor_Sampled_Reset: [wreg+fsr1l+fsr1h+status,2+status,0]
  6919                           ;Sensor_Sampled_Reset@sensor stored from wreg
  6920  06B7  00A0               	movwf	Sensor_Sampled_Reset@sensor
  6921  06B8                     i7Ll2153:	
  6922                           
  6923                           ;mtouch_sensor.c: 506: sensor->sampled = 0;
  6924  06B8  0820               	movf	Sensor_Sampled_Reset@sensor,w
  6925  06B9  3E08               	addlw	8
  6926  06BA  0086               	movwf	6
  6927  06BB  0187               	clrf	7
  6928  06BC  1081               	bcf	1,1
  6929  06BD                     i7Ll377:	
  6930  06BD  3009               	movlw	9
  6931  06BE  07A2               	addwf	MTOUCH_Sensor_Sampled_ResetAll@sensor,f
  6932  06BF  304D               	movlw	(low (_mtouch_sensor| 0))& (0+255)
  6933  06C0  2EB1               	goto	L6
  6934  06C1                     __end_of_MTOUCH_Sensor_Sampled_ResetAll:	
  6935                           
  6936                           	psect	text51
  6937  0767                     __ptext51:	
  6938 ;; *************** function _MTOUCH_Sensor_InitializeAll *****************
  6939 ;; Defined at:
  6940 ;;		line 130 in file "mtouch/mtouch_sensor.c"
  6941 ;; Parameters:    Size  Location     Type
  6942 ;;		None
  6943 ;; Auto vars:     Size  Location     Type
  6944 ;;  sensor          1    5[BANK0 ] enum E30
  6945 ;; Return value:  Size  Location     Type
  6946 ;;                  1    wreg      void 
  6947 ;; Registers used:
  6948 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6949 ;; Tracked objects:
  6950 ;;		On entry : B1F/3
  6951 ;;		On exit  : 1F/0
  6952 ;;		Unchanged: 0/0
  6953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6954 ;;      Params:         0       0       0       0
  6955 ;;      Locals:         0       1       0       0
  6956 ;;      Temps:          0       0       0       0
  6957 ;;      Totals:         0       1       0       0
  6958 ;;Total ram usage:        1 bytes
  6959 ;; Hardware stack levels used:    1
  6960 ;; Hardware stack levels required when called:    7
  6961 ;; This function calls:
  6962 ;;		_MTOUCH_Sensor_Initialize
  6963 ;; This function is called by:
  6964 ;;		_MTOUCH_Initialize
  6965 ;; This function uses a non-reentrant model
  6966 ;;
  6967                           
  6968                           
  6969                           ;psect for function _MTOUCH_Sensor_InitializeAll
  6970  0767                     _MTOUCH_Sensor_InitializeAll:	
  6971                           
  6972                           ;mtouch_sensor.c: 131: enum mtouch_sensor_names sensor;
  6973                           ;mtouch_sensor.c: 132: for ( sensor = 0; sensor < 1; sensor++ ) {
  6974                           
  6975                           ;incstack = 0
  6976                           ; Regs used in _MTOUCH_Sensor_InitializeAll: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6977  0767  0020               	movlb	0	; select bank0
  6978  0768  01A5               	clrf	MTOUCH_Sensor_InitializeAll@sensor
  6979  0769                     l2397:	
  6980                           
  6981                           ;mtouch_sensor.c: 133: MTOUCH_Sensor_Initialize ( sensor );
  6982  0769  0825               	movf	MTOUCH_Sensor_InitializeAll@sensor,w
  6983  076A  25B6               	fcall	_MTOUCH_Sensor_Initialize
  6984  076B  0AA5               	incf	MTOUCH_Sensor_InitializeAll@sensor,f
  6985  076C  0825               	movf	MTOUCH_Sensor_InitializeAll@sensor,w
  6986  076D  1D03               	btfss	3,2
  6987  076E  0008               	return
  6988  076F  2F69               	goto	l2397
  6989  0770                     __end_of_MTOUCH_Sensor_InitializeAll:	
  6990                           
  6991                           	psect	text52
  6992  05B6                     __ptext52:	
  6993 ;; *************** function _MTOUCH_Sensor_Initialize *****************
  6994 ;; Defined at:
  6995 ;;		line 109 in file "mtouch/mtouch_sensor.c"
  6996 ;; Parameters:    Size  Location     Type
  6997 ;;  sensor          1    wreg     enum E30
  6998 ;; Auto vars:     Size  Location     Type
  6999 ;;  sensor          1    4[BANK0 ] enum E30
  7000 ;; Return value:  Size  Location     Type
  7001 ;;                  1    wreg      enum E32
  7002 ;; Registers used:
  7003 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7004 ;; Tracked objects:
  7005 ;;		On entry : 1F/0
  7006 ;;		On exit  : 1F/0
  7007 ;;		Unchanged: 0/0
  7008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7009 ;;      Params:         0       0       0       0
  7010 ;;      Locals:         0       1       0       0
  7011 ;;      Temps:          0       0       0       0
  7012 ;;      Totals:         0       1       0       0
  7013 ;;Total ram usage:        1 bytes
  7014 ;; Hardware stack levels used:    1
  7015 ;; Hardware stack levels required when called:    6
  7016 ;; This function calls:
  7017 ;;		_MTOUCH_Sensor_Enable
  7018 ;;		_Sensor_Sampled_Reset
  7019 ;;		___bmul
  7020 ;; This function is called by:
  7021 ;;		_MTOUCH_Sensor_InitializeAll
  7022 ;; This function uses a non-reentrant model
  7023 ;;
  7024                           
  7025                           
  7026                           ;psect for function _MTOUCH_Sensor_Initialize
  7027  05B6                     _MTOUCH_Sensor_Initialize:	
  7028                           
  7029                           ;incstack = 0
  7030                           ; Regs used in _MTOUCH_Sensor_Initialize: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7031                           ;MTOUCH_Sensor_Initialize@sensor stored from wreg
  7032  05B6  00A4               	movwf	MTOUCH_Sensor_Initialize@sensor
  7033                           
  7034                           ;mtouch_sensor.c: 110: switch ( sensor ) {
  7035  05B7  2DBF               	goto	l2313
  7036  05B8                     l226:	
  7037                           ;mtouch_sensor.c: 111: case 0:
  7038                           
  7039                           
  7040                           ;mtouch_sensor.c: 112: WPUAbits.WPUA2 = 0;
  7041  05B8  0024               	movlb	4	; select bank4
  7042  05B9  110C               	bcf	12,2	;volatile
  7043                           
  7044                           ;mtouch_sensor.c: 113: ANSELAbits.ANSA2 = 0;
  7045  05BA  0023               	movlb	3	; select bank3
  7046  05BB  110C               	bcf	12,2	;volatile
  7047                           
  7048                           ;mtouch_sensor.c: 114: TRISAbits.TRISA2 = 0;
  7049  05BC  0021               	movlb	1	; select bank1
  7050  05BD  110C               	bcf	12,2	;volatile
  7051                           
  7052                           ;mtouch_sensor.c: 115: break;
  7053  05BE  2DC4               	goto	l2315
  7054  05BF                     l2313:	
  7055  05BF  0824               	movf	MTOUCH_Sensor_Initialize@sensor,w
  7056                           
  7057                           ; Switch size 1, requested type "space"
  7058                           ; Number of cases is 1, Range of values is 0 to 0
  7059                           ; switch strategies available:
  7060                           ; Name         Instructions Cycles
  7061                           ; simple_byte            4     3 (average)
  7062                           ; direct_byte            8     6 (fixed)
  7063                           ; jumptable            260     6 (fixed)
  7064                           ;	Chosen strategy is simple_byte
  7065  05C0  3A00               	xorlw	0	; case 0
  7066  05C1  1903               	skipnz
  7067  05C2  2DB8               	goto	l226
  7068  05C3  2DD2               	goto	l229
  7069  05C4                     l2315:	
  7070                           
  7071                           ;mtouch_sensor.c: 119: MTOUCH_Sensor_Enable ( sensor );
  7072  05C4  0020               	movlb	0	; select bank0
  7073  05C5  0824               	movf	MTOUCH_Sensor_Initialize@sensor,w
  7074  05C6  2724               	fcall	_MTOUCH_Sensor_Enable
  7075                           
  7076                           ;mtouch_sensor.c: 120: Sensor_Sampled_Reset ( &mtouch_sensor[sensor] );
  7077  05C7  3009               	movlw	9
  7078  05C8  00A0               	movwf	___bmul@multiplicand
  7079  05C9  0824               	movf	MTOUCH_Sensor_Initialize@sensor,w
  7080  05CA  2731               	fcall	___bmul
  7081  05CB  3E4D               	addlw	(low (_mtouch_sensor| 0))& (0+255)
  7082  05CC                     i8L__ptext53:	
  7083                           
  7084                           ;psect for function _Sensor_Sampled_Reset
  7085  05CC                     i8L_Sensor_Sampled_Reset:	
  7086                           
  7087                           ;incstack = 0
  7088                           ; Regs used in _Sensor_Sampled_Reset: [wreg+fsr1l+fsr1h+status,2+status,0]
  7089                           ;Sensor_Sampled_Reset@sensor stored from wreg
  7090  05CC  00A0               	movwf	Sensor_Sampled_Reset@sensor
  7091  05CD                     i8Ll2153:	
  7092                           
  7093                           ;mtouch_sensor.c: 506: sensor->sampled = 0;
  7094  05CD  0820               	movf	Sensor_Sampled_Reset@sensor,w
  7095  05CE  3E08               	addlw	8
  7096  05CF  0086               	movwf	6
  7097  05D0  0187               	clrf	7
  7098  05D1  1081               	bcf	1,1
  7099  05D2                     i8Ll377:	
  7100  05D2                     l229:	
  7101  05D2  0008               	return
  7102  05D3                     __end_of_MTOUCH_Sensor_Initialize:	
  7103                           
  7104                           	psect	text53
  7105  0000                     __ptext53:	
  7106 ;; *************** function _Sensor_Sampled_Reset *****************
  7107 ;; Defined at:
  7108 ;;		line 505 in file "mtouch/mtouch_sensor.c"
  7109 ;; Parameters:    Size  Location     Type
  7110 ;;  sensor          1    wreg     PTR struct .
  7111 ;;		 -> mtouch_sensor(9), 
  7112 ;; Auto vars:     Size  Location     Type
  7113 ;;  sensor          1    0[BANK0 ] PTR struct .
  7114 ;;		 -> mtouch_sensor(9), 
  7115 ;; Return value:  Size  Location     Type
  7116 ;;                  1    wreg      void 
  7117 ;; Registers used:
  7118 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7119 ;; Tracked objects:
  7120 ;;		On entry : 1F/0
  7121 ;;		On exit  : 1F/0
  7122 ;;		Unchanged: 0/0
  7123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7124 ;;      Params:         0       0       0       0
  7125 ;;      Locals:         0       1       0       0
  7126 ;;      Temps:          0       0       0       0
  7127 ;;      Totals:         0       1       0       0
  7128 ;;Total ram usage:        1 bytes
  7129 ;; Hardware stack levels used:    1
  7130 ;; Hardware stack levels required when called:    4
  7131 ;; This function calls:
  7132 ;;		Nothing
  7133 ;; This function is called by:
  7134 ;;		_MTOUCH_Sensor_Initialize
  7135 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  7136 ;; This function uses a non-reentrant model
  7137 ;;
  7138                           
  7139  0000                     _Sensor_Sampled_Reset:	
  7140                           ;psect for function _Sensor_Sampled_Reset
  7141                           
  7142  0000                     __end_of_Sensor_Sampled_Reset:	
  7143                           ;mtouch_sensor.c: 506: sensor->sampled = 0;
  7144                           
  7145                           ;incstack = 0
  7146                           ; Regs used in _Sensor_Sampled_Reset: [wreg+fsr1l+fsr1h+status,2+status,0]
  7147                           ;Sensor_Sampled_Reset@sensor stored from wreg
  7148                           
  7149                           
  7150                           	psect	text54
  7151  0724                     __ptext54:	
  7152 ;; *************** function _MTOUCH_Sensor_Enable *****************
  7153 ;; Defined at:
  7154 ;;		line 435 in file "mtouch/mtouch_sensor.c"
  7155 ;; Parameters:    Size  Location     Type
  7156 ;;  sensor          1    wreg     enum E30
  7157 ;; Auto vars:     Size  Location     Type
  7158 ;;  sensor          1    3[BANK0 ] enum E30
  7159 ;; Return value:  Size  Location     Type
  7160 ;;                  1    wreg      void 
  7161 ;; Registers used:
  7162 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7163 ;; Tracked objects:
  7164 ;;		On entry : 1F/0
  7165 ;;		On exit  : 1F/0
  7166 ;;		Unchanged: 0/0
  7167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7168 ;;      Params:         0       0       0       0
  7169 ;;      Locals:         0       1       0       0
  7170 ;;      Temps:          0       0       0       0
  7171 ;;      Totals:         0       1       0       0
  7172 ;;Total ram usage:        1 bytes
  7173 ;; Hardware stack levels used:    1
  7174 ;; Hardware stack levels required when called:    5
  7175 ;; This function calls:
  7176 ;;		___bmul
  7177 ;; This function is called by:
  7178 ;;		_MTOUCH_Sensor_Initialize
  7179 ;; This function uses a non-reentrant model
  7180 ;;
  7181                           
  7182                           
  7183                           ;psect for function _MTOUCH_Sensor_Enable
  7184  0724                     _MTOUCH_Sensor_Enable:	
  7185                           
  7186                           ;incstack = 0
  7187                           ; Regs used in _MTOUCH_Sensor_Enable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7188                           ;MTOUCH_Sensor_Enable@sensor stored from wreg
  7189  0724  00A3               	movwf	MTOUCH_Sensor_Enable@sensor
  7190                           
  7191                           ;mtouch_sensor.c: 436: if ( sensor < 1 )
  7192  0725  0823               	movf	MTOUCH_Sensor_Enable@sensor,w
  7193  0726  1D03               	btfss	3,2
  7194  0727  0008               	return
  7195                           
  7196                           ;mtouch_sensor.c: 437: mtouch_sensor[sensor].enabled = 1;
  7197  0728  3009               	movlw	9
  7198  0729  00A0               	movwf	___bmul@multiplicand
  7199  072A  0823               	movf	MTOUCH_Sensor_Enable@sensor,w
  7200  072B  2731               	fcall	___bmul
  7201  072C  3E55               	addlw	(low ((_mtouch_sensor| 0+8)))& (0+255)
  7202  072D  0086               	movwf	6
  7203  072E  0187               	clrf	7
  7204  072F  1401               	bsf	1,0
  7205  0730  0008               	return
  7206  0731                     __end_of_MTOUCH_Sensor_Enable:	
  7207                           
  7208                           	psect	text55
  7209  0609                     __ptext55:	
  7210 ;; *************** function _MTOUCH_Button_InitializeAll *****************
  7211 ;; Defined at:
  7212 ;;		line 100 in file "mtouch/mtouch_button.c"
  7213 ;; Parameters:    Size  Location     Type
  7214 ;;		None
  7215 ;; Auto vars:     Size  Location     Type
  7216 ;;  button          1    6[BANK0 ] enum E3654
  7217 ;; Return value:  Size  Location     Type
  7218 ;;                  1    wreg      void 
  7219 ;; Registers used:
  7220 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7221 ;; Tracked objects:
  7222 ;;		On entry : 1F/0
  7223 ;;		On exit  : 1F/0
  7224 ;;		Unchanged: 0/0
  7225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7226 ;;      Params:         0       0       0       0
  7227 ;;      Locals:         0       1       0       0
  7228 ;;      Temps:          0       1       0       0
  7229 ;;      Totals:         0       2       0       0
  7230 ;;Total ram usage:        2 bytes
  7231 ;; Hardware stack levels used:    1
  7232 ;; Hardware stack levels required when called:    6
  7233 ;; This function calls:
  7234 ;;		_MTOUCH_Button_Initialize
  7235 ;; This function is called by:
  7236 ;;		_MTOUCH_Initialize
  7237 ;; This function uses a non-reentrant model
  7238 ;;
  7239                           
  7240                           
  7241                           ;psect for function _MTOUCH_Button_InitializeAll
  7242  0609                     _MTOUCH_Button_InitializeAll:	
  7243                           
  7244                           ;mtouch_button.c: 101: enum mtouch_button_names button;
  7245                           ;mtouch_button.c: 103: __builtin_memcpy(mtouch_button,mtouch_button_init,sizeof (mtouch_
      +                          button_init ));
  7246                           
  7247                           ;incstack = 0
  7248                           ; Regs used in _MTOUCH_Button_InitializeAll: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  7249  0609  30C0               	movlw	low (_mtouch_button| 0)
  7250  060A  0086               	movwf	6
  7251  060B  303A               	movlw	low (_mtouch_button_init| (0+32768))
  7252  060C  0187               	clrf	7
  7253  060D  0084               	movwf	4
  7254  060E  3086               	movlw	high (_mtouch_button_init| (0+32768))
  7255  060F  0085               	movwf	5
  7256  0610  3016               	movlw	22
  7257  0611  0020               	movlb	0	; select bank0
  7258  0612  00A5               	movwf	??_MTOUCH_Button_InitializeAll
  7259  0613  0825               	movf	??_MTOUCH_Button_InitializeAll,w
  7260  0614  1903               	skipnz
  7261  0615  2E1A               	goto	l2489
  7262  0616                     u153m0:	
  7263  0616  0012               	moviw fsr0++
  7264  0617  001E               	movwi fsr1++
  7265  0618  0BA5               	decfsz	??_MTOUCH_Button_InitializeAll,f
  7266  0619  2E16               	goto	u153m0
  7267  061A                     l2489:	
  7268                           
  7269                           ;mtouch_button.c: 105: for ( button = 0; button < 1; button++ ) {
  7270  061A  0020               	movlb	0	; select bank0
  7271  061B  01A6               	clrf	MTOUCH_Button_InitializeAll@button
  7272  061C                     l2495:	
  7273                           
  7274                           ;mtouch_button.c: 106: MTOUCH_Button_Initialize ( button );
  7275  061C  0826               	movf	MTOUCH_Button_InitializeAll@button,w
  7276  061D  2557               	fcall	_MTOUCH_Button_Initialize
  7277  061E  0AA6               	incf	MTOUCH_Button_InitializeAll@button,f
  7278  061F  0826               	movf	MTOUCH_Button_InitializeAll@button,w
  7279  0620  1D03               	btfss	3,2
  7280  0621  0008               	return
  7281  0622  2E1C               	goto	l2495
  7282  0623                     __end_of_MTOUCH_Button_InitializeAll:	
  7283                           
  7284                           	psect	text56
  7285  0557                     __ptext56:	
  7286 ;; *************** function _MTOUCH_Button_Initialize *****************
  7287 ;; Defined at:
  7288 ;;		line 89 in file "mtouch/mtouch_button.c"
  7289 ;; Parameters:    Size  Location     Type
  7290 ;;  name            1    wreg     enum E3654
  7291 ;; Auto vars:     Size  Location     Type
  7292 ;;  name            1    3[BANK0 ] enum E3654
  7293 ;;  button          1    4[BANK0 ] PTR struct .
  7294 ;;		 -> mtouch_button(22), 
  7295 ;; Return value:  Size  Location     Type
  7296 ;;                  1    wreg      void 
  7297 ;; Registers used:
  7298 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7299 ;; Tracked objects:
  7300 ;;		On entry : 1F/0
  7301 ;;		On exit  : 1F/0
  7302 ;;		Unchanged: 0/0
  7303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7304 ;;      Params:         0       0       0       0
  7305 ;;      Locals:         0       2       0       0
  7306 ;;      Temps:          0       0       0       0
  7307 ;;      Totals:         0       2       0       0
  7308 ;;Total ram usage:        2 bytes
  7309 ;; Hardware stack levels used:    1
  7310 ;; Hardware stack levels required when called:    5
  7311 ;; This function calls:
  7312 ;;		_MTOUCH_Sensor_Calibrate
  7313 ;;		___bmul
  7314 ;; This function is called by:
  7315 ;;		_MTOUCH_Button_InitializeAll
  7316 ;;		_Button_Service
  7317 ;;		_Button_State_NotPressed
  7318 ;; This function uses a non-reentrant model
  7319 ;;
  7320                           
  7321                           
  7322                           ;psect for function _MTOUCH_Button_Initialize
  7323  0557                     _MTOUCH_Button_Initialize:	
  7324                           
  7325                           ;incstack = 0
  7326                           ; Regs used in _MTOUCH_Button_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
  7327                           ;MTOUCH_Button_Initialize@name stored from wreg
  7328  0557  00A3               	movwf	MTOUCH_Button_Initialize@name
  7329                           
  7330                           ;mtouch_button.c: 90: mtouch_button_t* button = &mtouch_button[name];
  7331  0558  3016               	movlw	22
  7332  0559  00A0               	movwf	___bmul@multiplicand
  7333  055A  0823               	movf	MTOUCH_Button_Initialize@name,w
  7334  055B  2731               	fcall	___bmul
  7335  055C  3EC0               	addlw	(low (_mtouch_button| 0))& (0+255)
  7336  055D  00A4               	movwf	MTOUCH_Button_Initialize@button
  7337                           
  7338                           ;mtouch_button.c: 92: button->state = MTOUCH_BUTTON_STATE_initializing;
  7339  055E  3E06               	addlw	6
  7340  055F  0086               	movwf	6
  7341  0560  0187               	clrf	7
  7342  0561  0181               	clrf	1
  7343                           
  7344                           ;mtouch_button.c: 93: button->baseline = ( mtouch_button_baseline_t ) 0;
  7345  0562  0824               	movf	MTOUCH_Button_Initialize@button,w
  7346  0563  3E09               	addlw	9
  7347  0564  0086               	movwf	6
  7348  0565  3000               	movlw	0
  7349  0566  3FC0               	movwi [0]fsr1
  7350  0567  3FC1               	movwi [1]fsr1
  7351  0568  3FC2               	movwi [2]fsr1
  7352  0569  3FC3               	movwi [3]fsr1
  7353                           
  7354                           ;mtouch_button.c: 94: button->counter = ( mtouch_button_statecounter_t ) 0;
  7355  056A  0824               	movf	MTOUCH_Button_Initialize@button,w
  7356  056B  2278               	fcall	PL64	;call to abstracted procedure
  7357                           
  7358                           ;mtouch_button.c: 95: button->baseline_count = ( mtouch_button_baselinecounter_t ) 0;
  7359  056C  0824               	movf	MTOUCH_Button_Initialize@button,w
  7360  056D  2572               	fcall	PL82	;call to abstracted procedure
  7361                           
  7362                           ;mtouch_button.c: 97: MTOUCH_Sensor_Calibrate ( button->sensor );
  7363  056E  0A24               	incf	MTOUCH_Button_Initialize@button,w
  7364  056F  0086               	movwf	6
  7365  0570  0801               	movf	1,w
  7366  0571  2FC7               	ljmp	l364
  7367  0572                     __end_of_MTOUCH_Button_Initialize:	
  7368  0572                     PL82:	
  7369  0572  3E11               	addlw	17
  7370  0573  0086               	movwf	6
  7371  0574  3000               	movlw	0
  7372  0575  3FC0               	movwi [0]fsr1
  7373  0576  3FC1               	movwi [1]fsr1
  7374  0577  0008               	return
  7375  0578                     __end_ofPL82:	
  7376                           
  7377                           	psect	text57
  7378  0731                     __ptext57:	
  7379 ;; *************** function ___bmul *****************
  7380 ;; Defined at:
  7381 ;;		line 4 in file "D:\Program Files\Microchip\xc8\v1.45\sources\common\Umul8.c"
  7382 ;; Parameters:    Size  Location     Type
  7383 ;;  multiplier      1    wreg     unsigned char 
  7384 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  7385 ;; Auto vars:     Size  Location     Type
  7386 ;;  multiplier      1    2[BANK0 ] unsigned char 
  7387 ;;  product         1    1[BANK0 ] unsigned char 
  7388 ;; Return value:  Size  Location     Type
  7389 ;;                  1    wreg      unsigned char 
  7390 ;; Registers used:
  7391 ;;		wreg, status,2, status,0
  7392 ;; Tracked objects:
  7393 ;;		On entry : 1F/0
  7394 ;;		On exit  : 1F/0
  7395 ;;		Unchanged: 0/0
  7396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7397 ;;      Params:         0       1       0       0
  7398 ;;      Locals:         0       2       0       0
  7399 ;;      Temps:          0       0       0       0
  7400 ;;      Totals:         0       3       0       0
  7401 ;;Total ram usage:        3 bytes
  7402 ;; Hardware stack levels used:    1
  7403 ;; Hardware stack levels required when called:    4
  7404 ;; This function calls:
  7405 ;;		Nothing
  7406 ;; This function is called by:
  7407 ;;		_MTOUCH_Sensor_Initialize
  7408 ;;		_Sensor_Service
  7409 ;;		_Sensor_Acq_ExecuteScan
  7410 ;;		_MTOUCH_Sensor_RawSample_Get
  7411 ;;		_MTOUCH_Sensor_Enable
  7412 ;;		_MTOUCH_Sensor_wasSampled
  7413 ;;		_MTOUCH_Button_Initialize
  7414 ;;		_Button_Service
  7415 ;;		_MTOUCH_Button_Reading_Get
  7416 ;;		_Button_Baseline_Get_helper
  7417 ;; This function uses a non-reentrant model
  7418 ;;
  7419                           
  7420                           
  7421                           ;psect for function ___bmul
  7422  0731                     ___bmul:	
  7423                           
  7424                           ;incstack = 0
  7425                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  7426                           ;___bmul@multiplier stored from wreg
  7427  0731  00A2               	movwf	___bmul@multiplier
  7428  0732  01A1               	clrf	___bmul@product
  7429  0733                     l1883:	
  7430  0733  0820               	movf	___bmul@multiplicand,w
  7431  0734  1822               	btfsc	___bmul@multiplier,0
  7432  0735  07A1               	addwf	___bmul@product,f
  7433  0736  35A0               	lslf	___bmul@multiplicand,f
  7434  0737  36A2               	lsrf	___bmul@multiplier,f
  7435  0738  0822               	movf	___bmul@multiplier,w
  7436  0739  1D03               	btfss	3,2
  7437  073A  2F33               	goto	l1883
  7438  073B  0821               	movf	___bmul@product,w
  7439  073C  0008               	return
  7440  073D                     __end_of___bmul:	
  7441                           
  7442                           	psect	text58
  7443  07C7                     __ptext58:	
  7444 ;; *************** function _MTOUCH_Sensor_Calibrate *****************
  7445 ;; Defined at:
  7446 ;;		line 480 in file "mtouch/mtouch_sensor.c"
  7447 ;; Parameters:    Size  Location     Type
  7448 ;;  sensor          1    wreg     enum E30
  7449 ;; Auto vars:     Size  Location     Type
  7450 ;;  sensor          1    0[COMMON] enum E30
  7451 ;; Return value:  Size  Location     Type
  7452 ;;                  1    wreg      void 
  7453 ;; Registers used:
  7454 ;;		wreg
  7455 ;; Tracked objects:
  7456 ;;		On entry : 1F/0
  7457 ;;		On exit  : 1F/0
  7458 ;;		Unchanged: 1F/0
  7459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7460 ;;      Params:         0       0       0       0
  7461 ;;      Locals:         0       0       0       0
  7462 ;;      Temps:          0       0       0       0
  7463 ;;      Totals:         0       0       0       0
  7464 ;;Total ram usage:        0 bytes
  7465 ;; Hardware stack levels used:    1
  7466 ;; Hardware stack levels required when called:    4
  7467 ;; This function calls:
  7468 ;;		Nothing
  7469 ;; This function is called by:
  7470 ;;		_MTOUCH_Button_Initialize
  7471 ;; This function uses a non-reentrant model
  7472 ;;
  7473                           
  7474                           
  7475                           ;psect for function _MTOUCH_Sensor_Calibrate
  7476  07C7                     _MTOUCH_Sensor_Calibrate:	
  7477  07C7                     l364:	
  7478                           ;incstack = 0
  7479                           ; Regs used in _MTOUCH_Sensor_Calibrate: [wreg]
  7480                           
  7481  07C7  0008               	return
  7482  07C8                     __end_of_MTOUCH_Sensor_Calibrate:	
  7483                           
  7484                           	psect	text59
  7485  07A7                     __ptext59:	
  7486 ;; *************** function _MTOUCH_Button_SetPressedCallback *****************
  7487 ;; Defined at:
  7488 ;;		line 343 in file "mtouch/mtouch_button.c"
  7489 ;; Parameters:    Size  Location     Type
  7490 ;;  callback        2    0[BANK0 ] PTR FTN(enum E3654,)void
  7491 ;;		 -> led_on(1), 
  7492 ;; Auto vars:     Size  Location     Type
  7493 ;;		None
  7494 ;; Return value:  Size  Location     Type
  7495 ;;                  1    wreg      void 
  7496 ;; Registers used:
  7497 ;;		wreg
  7498 ;; Tracked objects:
  7499 ;;		On entry : 1F/0
  7500 ;;		On exit  : 1F/0
  7501 ;;		Unchanged: 0/0
  7502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7503 ;;      Params:         0       2       0       0
  7504 ;;      Locals:         0       0       0       0
  7505 ;;      Temps:          0       0       0       0
  7506 ;;      Totals:         0       2       0       0
  7507 ;;Total ram usage:        2 bytes
  7508 ;; Hardware stack levels used:    1
  7509 ;; Hardware stack levels required when called:    4
  7510 ;; This function calls:
  7511 ;;		Nothing
  7512 ;; This function is called by:
  7513 ;;		_main
  7514 ;; This function uses a non-reentrant model
  7515 ;;
  7516                           
  7517                           
  7518                           ;psect for function _MTOUCH_Button_SetPressedCallback
  7519  07A7                     _MTOUCH_Button_SetPressedCallback:	
  7520                           
  7521                           ;mtouch_button.c: 344: callback_pressed = callback;
  7522                           
  7523                           ;incstack = 0
  7524                           ; Regs used in _MTOUCH_Button_SetPressedCallback: [wreg]
  7525  07A7  0821               	movf	MTOUCH_Button_SetPressedCallback@callback+1,w
  7526  07A8  00C5               	movwf	_callback_pressed+1
  7527  07A9  0820               	movf	MTOUCH_Button_SetPressedCallback@callback,w
  7528  07AA  00C4               	movwf	_callback_pressed
  7529  07AB  0008               	return
  7530  07AC                     __end_of_MTOUCH_Button_SetPressedCallback:	
  7531                           
  7532                           	psect	text60
  7533  07AC                     __ptext60:	
  7534 ;; *************** function _MTOUCH_Button_SetNotPressedCallback *****************
  7535 ;; Defined at:
  7536 ;;		line 347 in file "mtouch/mtouch_button.c"
  7537 ;; Parameters:    Size  Location     Type
  7538 ;;  callback        2    0[BANK0 ] PTR FTN(enum E3654,)void
  7539 ;;		 -> led_off(1), 
  7540 ;; Auto vars:     Size  Location     Type
  7541 ;;		None
  7542 ;; Return value:  Size  Location     Type
  7543 ;;                  1    wreg      void 
  7544 ;; Registers used:
  7545 ;;		wreg
  7546 ;; Tracked objects:
  7547 ;;		On entry : 1F/0
  7548 ;;		On exit  : 1F/0
  7549 ;;		Unchanged: 0/0
  7550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7551 ;;      Params:         0       2       0       0
  7552 ;;      Locals:         0       0       0       0
  7553 ;;      Temps:          0       0       0       0
  7554 ;;      Totals:         0       2       0       0
  7555 ;;Total ram usage:        2 bytes
  7556 ;; Hardware stack levels used:    1
  7557 ;; Hardware stack levels required when called:    4
  7558 ;; This function calls:
  7559 ;;		Nothing
  7560 ;; This function is called by:
  7561 ;;		_main
  7562 ;; This function uses a non-reentrant model
  7563 ;;
  7564                           
  7565                           
  7566                           ;psect for function _MTOUCH_Button_SetNotPressedCallback
  7567  07AC                     _MTOUCH_Button_SetNotPressedCallback:	
  7568                           
  7569                           ;mtouch_button.c: 348: callback_notPressed = callback;
  7570                           
  7571                           ;incstack = 0
  7572                           ; Regs used in _MTOUCH_Button_SetNotPressedCallback: [wreg]
  7573  07AC  0821               	movf	MTOUCH_Button_SetNotPressedCallback@callback+1,w
  7574  07AD  00C3               	movwf	_callback_notPressed+1
  7575  07AE  0820               	movf	MTOUCH_Button_SetNotPressedCallback@callback,w
  7576  07AF  00C2               	movwf	_callback_notPressed
  7577  07B0  0008               	return
  7578  07B1                     __end_of_MTOUCH_Button_SetNotPressedCallback:	
  7579                           
  7580                           	psect	intentry
  7581  0004                     __pintentry:	
  7582 ;; *************** function _INTERRUPT_Manager *****************
  7583 ;; Defined at:
  7584 ;;		line 75 in file "main.c"
  7585 ;; Parameters:    Size  Location     Type
  7586 ;;		None
  7587 ;; Auto vars:     Size  Location     Type
  7588 ;;		None
  7589 ;; Return value:  Size  Location     Type
  7590 ;;                  1    wreg      void 
  7591 ;; Registers used:
  7592 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7593 ;; Tracked objects:
  7594 ;;		On entry : 0/0
  7595 ;;		On exit  : 0/0
  7596 ;;		Unchanged: 0/0
  7597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7598 ;;      Params:         0       0       0       0
  7599 ;;      Locals:         0       0       0       0
  7600 ;;      Temps:          0       0       0       0
  7601 ;;      Totals:         0       0       0       0
  7602 ;;Total ram usage:        0 bytes
  7603 ;; Hardware stack levels used:    1
  7604 ;; Hardware stack levels required when called:    3
  7605 ;; This function calls:
  7606 ;;		_EUSART_Transmit_ISR
  7607 ;;		_MTOUCH_Sensor_NotifyInterruptOccurred
  7608 ;;		_TMR2_ISR
  7609 ;; This function is called by:
  7610 ;;		Interrupt level 1
  7611 ;; This function uses a non-reentrant model
  7612 ;;
  7613                           
  7614  0004                     _INTERRUPT_Manager:	
  7615                           
  7616                           ;incstack = 0
  7617  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  7618                           
  7619                           ; Regs used in _INTERRUPT_Manager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7620  0005  3180               	pagesel	$
  7621                           
  7622                           ;main.c: 76: if ( INTCONbits.PEIE ) {
  7623  0006  1F0B               	btfss	11,6	;volatile
  7624  0007  2818               	goto	i1l636
  7625                           
  7626                           ;main.c: 77: if ( PIE1bits.TMR2IE && PIR1bits.TMR2IF ) {
  7627  0008  0021               	movlb	1	; select bank1
  7628  0009  1C91               	btfss	17,1	;volatile
  7629  000A  2810               	goto	i1l633
  7630  000B  0020               	movlb	0	; select bank0
  7631  000C  1C91               	btfss	17,1	;volatile
  7632  000D  2810               	goto	i1l633
  7633                           
  7634                           ;main.c: 78: TMR2_ISR ();
  7635  000E  277F               	fcall	_TMR2_ISR
  7636                           
  7637                           ;main.c: 79: } else if ( PIE1bits.TXIE && PIR1bits.TXIF ) {
  7638  000F  2818               	goto	i1l636
  7639  0010                     i1l633:	
  7640  0010  0021               	movlb	1	; select bank1
  7641  0011  1E11               	btfss	17,4	;volatile
  7642  0012  2818               	goto	i1l636
  7643  0013  0020               	movlb	0	; select bank0
  7644  0014  1E11               	btfss	17,4	;volatile
  7645  0015  2818               	goto	i1l636
  7646                           
  7647                           ;main.c: 80: EUSART_Transmit_ISR ();
  7648  0016  2650               	fcall	_EUSART_Transmit_ISR
  7649                           
  7650                           ;main.c: 81: MTOUCH_Sensor_NotifyInterruptOccurred ();
  7651  0017  27B9               	fcall	_MTOUCH_Sensor_NotifyInterruptOccurred
  7652  0018                     i1l636:	
  7653  0018  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  7654  0019  0009               	retfie
  7655  001A                     __end_of_INTERRUPT_Manager:	
  7656                           
  7657                           	psect	text62
  7658  077F                     __ptext62:	
  7659 ;; *************** function _TMR2_ISR *****************
  7660 ;; Defined at:
  7661 ;;		line 18 in file "driver/tmr2.c"
  7662 ;; Parameters:    Size  Location     Type
  7663 ;;		None
  7664 ;; Auto vars:     Size  Location     Type
  7665 ;;		None
  7666 ;; Return value:  Size  Location     Type
  7667 ;;                  1    wreg      void 
  7668 ;; Registers used:
  7669 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7670 ;; Tracked objects:
  7671 ;;		On entry : 1F/0
  7672 ;;		On exit  : 0/0
  7673 ;;		Unchanged: 0/0
  7674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7675 ;;      Params:         0       0       0       0
  7676 ;;      Locals:         0       0       0       0
  7677 ;;      Temps:          0       0       0       0
  7678 ;;      Totals:         0       0       0       0
  7679 ;;Total ram usage:        0 bytes
  7680 ;; Hardware stack levels used:    1
  7681 ;; Hardware stack levels required when called:    2
  7682 ;; This function calls:
  7683 ;;		Absolute function
  7684 ;;		_Sensor_Acq_ExecuteScan
  7685 ;;		_TMR2_InterruptHandler_Default
  7686 ;; This function is called by:
  7687 ;;		_INTERRUPT_Manager
  7688 ;; This function uses a non-reentrant model
  7689 ;;
  7690                           
  7691                           
  7692                           ;psect for function _TMR2_ISR
  7693  077F                     _TMR2_ISR:	
  7694                           
  7695                           ;tmr2.c: 19: PIR1bits.TMR2IF = 0;
  7696                           
  7697                           ;incstack = 0
  7698                           ; Regs used in _TMR2_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7699  077F  1091               	bcf	17,1	;volatile
  7700                           
  7701                           ;tmr2.c: 20: tmr2_isr_handler ( );
  7702  0780  085F               	movf	_tmr2_isr_handler+1,w
  7703  0781  008A               	movwf	10
  7704  0782  085E               	movf	_tmr2_isr_handler,w
  7705  0783  000A               	callw
  7706  0784  3187               	pagesel	$
  7707  0785  0008               	return
  7708  0786                     __end_of_TMR2_ISR:	
  7709                           
  7710                           	psect	text63
  7711  018F                     __ptext63:	
  7712 ;; *************** function _Sensor_Acq_ExecuteScan *****************
  7713 ;; Defined at:
  7714 ;;		line 293 in file "mtouch/mtouch_sensor.c"
  7715 ;; Parameters:    Size  Location     Type
  7716 ;;		None
  7717 ;; Auto vars:     Size  Location     Type
  7718 ;;  result          2    6[COMMON] unsigned int 
  7719 ;; Return value:  Size  Location     Type
  7720 ;;                  1    wreg      void 
  7721 ;; Registers used:
  7722 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7723 ;; Tracked objects:
  7724 ;;		On entry : 1F/0
  7725 ;;		On exit  : 0/0
  7726 ;;		Unchanged: 0/0
  7727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7728 ;;      Params:         0       0       0       0
  7729 ;;      Locals:         2       0       0       0
  7730 ;;      Temps:          2       0       0       0
  7731 ;;      Totals:         4       0       0       0
  7732 ;;Total ram usage:        4 bytes
  7733 ;; Hardware stack levels used:    1
  7734 ;; Hardware stack levels required when called:    1
  7735 ;; This function calls:
  7736 ;;		_MTOUCH_CVD_ScanA_0
  7737 ;;		_MTOUCH_CVD_ScanB_0
  7738 ;;		i1___bmul
  7739 ;;		i1_abs
  7740 ;; This function is called by:
  7741 ;;		_Sensor_Acq_ExecutePacket
  7742 ;;		_TMR2_ISR
  7743 ;; This function uses a non-reentrant model
  7744 ;;
  7745                           
  7746                           
  7747                           ;psect for function _Sensor_Acq_ExecuteScan
  7748  018F                     _Sensor_Acq_ExecuteScan:	
  7749                           
  7750                           ;mtouch_sensor.c: 294: mtouch_sensor_adcsample_t result = ADRES;
  7751                           
  7752                           ;incstack = 0
  7753                           ; Regs used in _Sensor_Acq_ExecuteScan: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7754  018F  0021               	movlb	1	; select bank1
  7755  0190  081C               	movf	28,w	;volatile
  7756  0191  00F7               	movwf	Sensor_Acq_ExecuteScan@result+1
  7757  0192  081B               	movf	27,w	;volatile
  7758  0193  00F6               	movwf	Sensor_Acq_ExecuteScan@result
  7759                           
  7760                           ;mtouch_sensor.c: 295: static mtouch_sensor_adcsample_t last_a, last_b;
  7761                           ;mtouch_sensor.c: 297: if ( sensor_globalFlags.packet_done )
  7762  0194  0020               	movlb	0	; select bank0
  7763  0195  1860               	btfsc	_sensor_globalFlags,0	;volatile
  7764  0196  0008               	return
  7765                           
  7766                           ;mtouch_sensor.c: 300: if ( packet_counter != ( uint8_t ) 0 ) {
  7767  0197  0878               	movf	_packet_counter,w
  7768  0198  1D03               	btfss	3,2
  7769  0199  29A7               	goto	i1l2439
  7770  019A  29F1               	goto	i1l2459
  7771  019B                     i1l2433:	
  7772  019B  0849               	movf	_Sensor_scanA+1,w
  7773  019C  008A               	movwf	10
  7774  019D  0848               	movf	_Sensor_scanA,w
  7775  019E  000A               	callw
  7776  019F  3181               	pagesel	$
  7777                           
  7778                           ;mtouch_sensor.c: 304: break;
  7779  01A0  29BF               	goto	i1l2441
  7780  01A1                     i1l2435:	
  7781  01A1  0847               	movf	_Sensor_scanB+1,w
  7782  01A2  008A               	movwf	10
  7783  01A3  0846               	movf	_Sensor_scanB,w
  7784  01A4  000A               	callw
  7785  01A5  3181               	pagesel	$
  7786                           
  7787                           ;mtouch_sensor.c: 306: break;
  7788  01A6  29BF               	goto	i1l2441
  7789  01A7                     i1l2439:	
  7790  01A7  0878               	movf	_packet_counter,w
  7791  01A8  3901               	andlw	1
  7792  01A9  00F4               	movwf	??_Sensor_Acq_ExecuteScan
  7793  01AA  01F5               	clrf	??_Sensor_Acq_ExecuteScan+1
  7794                           
  7795                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7796                           ; Switch size 1, requested type "time"
  7797                           ; Number of cases is 1, Range of values is 0 to 0
  7798                           ; switch strategies available:
  7799                           ; Name         Instructions Cycles
  7800                           ; direct_byte            8     6 (fixed)
  7801                           ; simple_byte            4     3 (average)
  7802                           ; jumptable            260     6 (fixed)
  7803                           ;	Chosen strategy is direct_byte
  7804  01AB  0875               	movf	??_Sensor_Acq_ExecuteScan+1,w
  7805  01AC  0084               	movwf	4
  7806  01AD  3001               	movlw	1
  7807  01AE  0204               	subwf	4,w
  7808  01AF  1803               	skipnc
  7809  01B0  29BF               	goto	i1l2441
  7810  01B1  3180               	movlp	high i1S2647
  7811  01B2  3003               	movlw	low i1S2647
  7812  01B3  0704               	addwf	4,w
  7813  01B4  0082               	movwf	2
  7814  01B5                     i1l2645:	
  7815                           
  7816                           ; Switch size 1, requested type "time"
  7817                           ; Number of cases is 2, Range of values is 0 to 1
  7818                           ; switch strategies available:
  7819                           ; Name         Instructions Cycles
  7820                           ; direct_byte           10     6 (fixed)
  7821                           ; simple_byte            7     4 (average)
  7822                           ; jumptable            260     6 (fixed)
  7823                           ;	Chosen strategy is direct_byte
  7824  01B5  0874               	movf	??_Sensor_Acq_ExecuteScan,w
  7825  01B6  0084               	movwf	4
  7826  01B7  3002               	movlw	2
  7827  01B8  0204               	subwf	4,w
  7828  01B9  1803               	skipnc
  7829  01BA  29BF               	goto	i1l2441
  7830  01BB  3180               	movlp	high i1S2649
  7831  01BC  3001               	movlw	low i1S2649
  7832  01BD  0704               	addwf	4,w
  7833  01BE  0082               	movwf	2
  7834  01BF                     i1l2441:	
  7835                           
  7836                           ;mtouch_sensor.c: 310: if ( packet_counter != mtouch_sensor[currentScannSensor].oversamp
      +                          ling ) {
  7837  01BF  3009               	movlw	9
  7838  01C0  00F0               	movwf	i1___bmul@multiplicand
  7839  01C1  0879               	movf	_currentScannSensor,w
  7840  01C2  273D               	fcall	i1___bmul
  7841  01C3  3E52               	addlw	(low ((_mtouch_sensor| 0+5)))& (0+255)
  7842  01C4  0086               	movwf	6
  7843  01C5  0187               	clrf	7
  7844  01C6  0801               	movf	1,w
  7845  01C7  0678               	xorwf	_packet_counter,w
  7846  01C8  1903               	skipnz
  7847  01C9  29EF               	goto	i1l2457
  7848                           
  7849                           ;mtouch_sensor.c: 311: if ( packet_counter & 0x01 ) {
  7850  01CA  1C78               	btfss	_packet_counter,0
  7851  01CB  29E4               	goto	i1l2451
  7852                           
  7853                           ;mtouch_sensor.c: 312: result = ((mtouch_sensor_adcsample_t)1024) - result;
  7854  01CC  3004               	movlw	4
  7855  01CD  01F4               	clrf	??_Sensor_Acq_ExecuteScan
  7856  01CE  00F5               	movwf	??_Sensor_Acq_ExecuteScan+1
  7857  01CF  0876               	movf	Sensor_Acq_ExecuteScan@result,w
  7858  01D0  0274               	subwf	??_Sensor_Acq_ExecuteScan,w
  7859  01D1  00F6               	movwf	Sensor_Acq_ExecuteScan@result
  7860  01D2  0877               	movf	Sensor_Acq_ExecuteScan@result+1,w
  7861  01D3  3B75               	subwfb	??_Sensor_Acq_ExecuteScan+1,w
  7862  01D4  00F7               	movwf	Sensor_Acq_ExecuteScan@result+1
  7863                           
  7864                           ;mtouch_sensor.c: 313: packet_noise += ( mtouch_sensor_packetsample_t ) abs ( last_a - r
      +                          esult );
  7865  01D5  0020               	movlb	0	; select bank0
  7866  01D6  0859               	movf	Sensor_Acq_ExecuteScan@last_a+1,w
  7867  01D7  00F1               	movwf	i1abs@a+1
  7868  01D8  0858               	movf	Sensor_Acq_ExecuteScan@last_a,w
  7869  01D9  00F0               	movwf	i1abs@a
  7870  01DA  0876               	movf	Sensor_Acq_ExecuteScan@result,w
  7871  01DB  02F0               	subwf	i1abs@a,f
  7872  01DC  0877               	movf	Sensor_Acq_ExecuteScan@result+1,w
  7873  01DD  3BF1               	subwfb	i1abs@a+1,f
  7874  01DE  2709               	fcall	i1_abs
  7875                           
  7876                           ;mtouch_sensor.c: 314: last_a = result;
  7877  01DF  2206               	fcall	PL86	;call to abstracted procedure
  7878  01E0  00D9               	movwf	Sensor_Acq_ExecuteScan@last_a+1
  7879  01E1  0876               	movf	Sensor_Acq_ExecuteScan@result,w
  7880  01E2  00D8               	movwf	Sensor_Acq_ExecuteScan@last_a
  7881                           
  7882                           ;mtouch_sensor.c: 315: } else {
  7883  01E3  29EB               	goto	i1l2455
  7884  01E4                     i1l2451:	
  7885                           
  7886                           ;mtouch_sensor.c: 316: packet_noise += ( mtouch_sensor_packetsample_t ) abs ( last_b - r
      +                          esult );
  7887  01E4  0020               	movlb	0	; select bank0
  7888  01E5  21FD               	fcall	PL70	;call to abstracted procedure
  7889  01E6  2709               	fcall	i1_abs
  7890                           
  7891                           ;mtouch_sensor.c: 317: last_b = result;
  7892  01E7  2206               	fcall	PL86	;call to abstracted procedure
  7893  01E8  00D7               	movwf	Sensor_Acq_ExecuteScan@last_b+1
  7894  01E9  0876               	movf	Sensor_Acq_ExecuteScan@result,w
  7895  01EA  00D6               	movwf	Sensor_Acq_ExecuteScan@last_b
  7896  01EB                     i1l2455:	
  7897                           
  7898                           ;mtouch_sensor.c: 318: }
  7899                           ;mtouch_sensor.c: 319: packet_sample += result;
  7900  01EB  0876               	movf	Sensor_Acq_ExecuteScan@result,w
  7901  01EC  07DC               	addwf	_packet_sample,f
  7902  01ED  0877               	movf	Sensor_Acq_ExecuteScan@result+1,w
  7903  01EE  3DDD               	addwfc	_packet_sample+1,f
  7904  01EF                     i1l2457:	
  7905                           
  7906                           ;mtouch_sensor.c: 320: }
  7907                           ;mtouch_sensor.c: 321: packet_counter--;
  7908  01EF  03F8               	decf	_packet_counter,f
  7909                           
  7910                           ;mtouch_sensor.c: 322: } else {
  7911  01F0  0008               	return
  7912  01F1                     i1l2459:	
  7913                           
  7914                           ;mtouch_sensor.c: 323: packet_sample += result;
  7915  01F1  0876               	movf	Sensor_Acq_ExecuteScan@result,w
  7916  01F2  07DC               	addwf	_packet_sample,f
  7917  01F3  0877               	movf	Sensor_Acq_ExecuteScan@result+1,w
  7918  01F4  3DDD               	addwfc	_packet_sample+1,f
  7919                           
  7920                           ;mtouch_sensor.c: 324: packet_noise += ( mtouch_sensor_packetsample_t ) abs ( last_b - r
      +                          esult );
  7921  01F5  21FD               	fcall	PL70	;call to abstracted procedure
  7922  01F6  2709               	fcall	i1_abs
  7923  01F7  0870               	movf	?i1_abs,w
  7924  01F8  07DA               	addwf	_packet_noise,f
  7925  01F9  0871               	movf	?i1_abs+1,w
  7926  01FA  3DDB               	addwfc	_packet_noise+1,f
  7927                           
  7928                           ;mtouch_sensor.c: 325: sensor_globalFlags.packet_done = ( uint8_t ) 1;
  7929  01FB  1460               	bsf	_sensor_globalFlags,0	;volatile
  7930  01FC  0008               	return
  7931  01FD                     __end_of_Sensor_Acq_ExecuteScan:	
  7932  01FD                     PL70:	
  7933  01FD  0857               	movf	Sensor_Acq_ExecuteScan@last_b+1,w
  7934  01FE  00F1               	movwf	i1abs@a+1
  7935  01FF  0856               	movf	Sensor_Acq_ExecuteScan@last_b,w
  7936  0200  00F0               	movwf	i1abs@a
  7937  0201  0876               	movf	Sensor_Acq_ExecuteScan@result,w
  7938  0202  02F0               	subwf	i1abs@a,f
  7939  0203  0877               	movf	Sensor_Acq_ExecuteScan@result+1,w
  7940  0204  3BF1               	subwfb	i1abs@a+1,f
  7941  0205  0008               	return
  7942  0206                     __end_ofPL70:	
  7943  0206                     PL86:	
  7944  0206  0870               	movf	?i1_abs,w
  7945  0207  07DA               	addwf	_packet_noise,f
  7946  0208  0871               	movf	?i1_abs+1,w
  7947  0209  3DDB               	addwfc	_packet_noise+1,f
  7948  020A  0877               	movf	Sensor_Acq_ExecuteScan@result+1,w
  7949  020B  0008               	return
  7950  020C                     __end_ofPL86:	
  7951                           
  7952                           	psect	swtext1
  7953  0003                     __pswtext1:	
  7954  0003                     i1S2647:	
  7955  0003  29B5               	ljmp	i1l2645
  7956                           
  7957                           	psect	swtext2
  7958  0001                     __pswtext2:	
  7959  0001                     i1S2649:	
  7960  0001  299B               	ljmp	i1l2433
  7961  0002  29A1               	ljmp	i1l2435
  7962                           
  7963                           	psect	text64
  7964  07C8                     __ptext64:	
  7965 ;; *************** function _TMR2_InterruptHandler_Default *****************
  7966 ;; Defined at:
  7967 ;;		line 23 in file "driver/tmr2.c"
  7968 ;; Parameters:    Size  Location     Type
  7969 ;;		None
  7970 ;; Auto vars:     Size  Location     Type
  7971 ;;		None
  7972 ;; Return value:  Size  Location     Type
  7973 ;;                  1    wreg      void 
  7974 ;; Registers used:
  7975 ;;		None
  7976 ;; Tracked objects:
  7977 ;;		On entry : 1F/0
  7978 ;;		On exit  : 1F/0
  7979 ;;		Unchanged: 1F/0
  7980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7981 ;;      Params:         0       0       0       0
  7982 ;;      Locals:         0       0       0       0
  7983 ;;      Temps:          0       0       0       0
  7984 ;;      Totals:         0       0       0       0
  7985 ;;Total ram usage:        0 bytes
  7986 ;; Hardware stack levels used:    1
  7987 ;; This function calls:
  7988 ;;		Nothing
  7989 ;; This function is called by:
  7990 ;;		_TMR2_Initialize
  7991 ;;		_TMR2_ISR
  7992 ;; This function uses a non-reentrant model
  7993 ;;
  7994                           
  7995                           
  7996                           ;psect for function _TMR2_InterruptHandler_Default
  7997  07C8                     _TMR2_InterruptHandler_Default:	
  7998                           
  7999                           ;incstack = 0
  8000                           ; Regs used in _TMR2_InterruptHandler_Default: []
  8001  07C8  0008               	return
  8002  07C9                     __end_of_TMR2_InterruptHandler_Default:	
  8003                           
  8004                           	psect	text65
  8005  0709                     __ptext65:	
  8006 ;; *************** function i1_abs *****************
  8007 ;; Defined at:
  8008 ;;		line 4 in file "D:\Program Files\Microchip\xc8\v1.45\sources\common\abs.c"
  8009 ;; Parameters:    Size  Location     Type
  8010 ;;  a               2    0[COMMON] int 
  8011 ;; Auto vars:     Size  Location     Type
  8012 ;;		None
  8013 ;; Return value:  Size  Location     Type
  8014 ;;                  2    0[COMMON] int 
  8015 ;; Registers used:
  8016 ;;		wreg, status,2, status,0
  8017 ;; Tracked objects:
  8018 ;;		On entry : 1F/0
  8019 ;;		On exit  : 1F/0
  8020 ;;		Unchanged: 1F/0
  8021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8022 ;;      Params:         2       0       0       0
  8023 ;;      Locals:         0       0       0       0
  8024 ;;      Temps:          2       0       0       0
  8025 ;;      Totals:         4       0       0       0
  8026 ;;Total ram usage:        4 bytes
  8027 ;; Hardware stack levels used:    1
  8028 ;; This function calls:
  8029 ;;		Nothing
  8030 ;; This function is called by:
  8031 ;;		_Sensor_Acq_ExecuteScan
  8032 ;; This function uses a non-reentrant model
  8033 ;;
  8034                           
  8035                           
  8036                           ;psect for function i1_abs
  8037  0709                     i1_abs:	
  8038                           
  8039                           ;incstack = 0
  8040                           ; Regs used in i1_abs: [wreg+status,2+status,0]
  8041  0709  1FF1               	btfss	i1abs@a+1,7
  8042  070A  0008               	return
  8043  070B  0970               	comf	i1abs@a,w
  8044  070C  00F2               	movwf	??i1_abs
  8045  070D  0971               	comf	i1abs@a+1,w
  8046  070E  00F3               	movwf	??i1_abs+1
  8047  070F  0AF2               	incf	??i1_abs,f
  8048  0710  1903               	skipnz
  8049  0711  0AF3               	incf	??i1_abs+1,f
  8050  0712  0872               	movf	??i1_abs,w
  8051  0713  00F0               	movwf	?i1_abs
  8052  0714  0873               	movf	??i1_abs+1,w
  8053  0715  00F1               	movwf	?i1_abs+1
  8054  0716  0008               	return
  8055  0717                     __end_ofi1_abs:	
  8056                           
  8057                           	psect	text66
  8058  073D                     __ptext66:	
  8059 ;; *************** function i1___bmul *****************
  8060 ;; Defined at:
  8061 ;;		line 4 in file "D:\Program Files\Microchip\xc8\v1.45\sources\common\Umul8.c"
  8062 ;; Parameters:    Size  Location     Type
  8063 ;;  multiplier      1    wreg     unsigned char 
  8064 ;;  multiplicand    1    0[COMMON] unsigned char 
  8065 ;; Auto vars:     Size  Location     Type
  8066 ;;  multiplier      1    1[COMMON] unsigned char 
  8067 ;;  __bmul          1    2[COMMON] unsigned char 
  8068 ;; Return value:  Size  Location     Type
  8069 ;;                  1    wreg      unsigned char 
  8070 ;; Registers used:
  8071 ;;		wreg, status,2, status,0
  8072 ;; Tracked objects:
  8073 ;;		On entry : 0/0
  8074 ;;		On exit  : 0/0
  8075 ;;		Unchanged: 0/0
  8076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8077 ;;      Params:         1       0       0       0
  8078 ;;      Locals:         2       0       0       0
  8079 ;;      Temps:          0       0       0       0
  8080 ;;      Totals:         3       0       0       0
  8081 ;;Total ram usage:        3 bytes
  8082 ;; Hardware stack levels used:    1
  8083 ;; This function calls:
  8084 ;;		Nothing
  8085 ;; This function is called by:
  8086 ;;		_Sensor_Acq_ExecuteScan
  8087 ;; This function uses a non-reentrant model
  8088 ;;
  8089                           
  8090                           
  8091                           ;psect for function i1___bmul
  8092  073D                     i1___bmul:	
  8093                           
  8094                           ;incstack = 0
  8095                           ; Regs used in i1___bmul: [wreg+status,2+status,0]
  8096                           ;i1___bmul@multiplier stored from wreg
  8097  073D  00F1               	movwf	i1___bmul@multiplier
  8098  073E  01F2               	clrf	i1___bmul@product
  8099  073F                     i1l2353:	
  8100  073F  0870               	movf	i1___bmul@multiplicand,w
  8101  0740  1871               	btfsc	i1___bmul@multiplier,0
  8102  0741  07F2               	addwf	i1___bmul@product,f
  8103  0742  35F0               	lslf	i1___bmul@multiplicand,f
  8104  0743  36F1               	lsrf	i1___bmul@multiplier,f
  8105  0744  0871               	movf	i1___bmul@multiplier,w
  8106  0745  1D03               	btfss	3,2
  8107  0746  2F3F               	goto	i1l2353
  8108  0747  0872               	movf	i1___bmul@product,w
  8109  0748  0008               	return
  8110  0749                     __end_ofi1___bmul:	
  8111                           
  8112                           	psect	text67
  8113  050D                     __ptext67:	
  8114 ;; *************** function _MTOUCH_CVD_ScanB_0 *****************
  8115 ;; Defined at:
  8116 ;;		line 93 in file "mtouch/mtouch_sensor_scan.c"
  8117 ;; Parameters:    Size  Location     Type
  8118 ;;		None
  8119 ;; Auto vars:     Size  Location     Type
  8120 ;;		None
  8121 ;; Return value:  Size  Location     Type
  8122 ;;                  1    wreg      void 
  8123 ;; Registers used:
  8124 ;;		wreg
  8125 ;; Tracked objects:
  8126 ;;		On entry : 1F/0
  8127 ;;		On exit  : 0/0
  8128 ;;		Unchanged: 0/0
  8129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8130 ;;      Params:         0       0       0       0
  8131 ;;      Locals:         0       0       0       0
  8132 ;;      Temps:          0       0       0       0
  8133 ;;      Totals:         0       0       0       0
  8134 ;;Total ram usage:        0 bytes
  8135 ;; Hardware stack levels used:    1
  8136 ;; This function calls:
  8137 ;;		Nothing
  8138 ;; This function is called by:
  8139 ;;		_Sensor_Acq_ExecuteScan
  8140 ;; This function uses a non-reentrant model
  8141 ;;
  8142                           
  8143                           
  8144                           ;psect for function _MTOUCH_CVD_ScanB_0
  8145  050D                     _MTOUCH_CVD_ScanB_0:	
  8146                           
  8147                           ;incstack = 0
  8148                           ; Regs used in _MTOUCH_CVD_ScanB_0: [wreg]
  8149  050D  0022               	banksel	268	;# 
  8150  050E  110C               	bcf	12,2	;# 
  8151  050F  0021               	banksel	157	;# 
  8152  0510  3009               	movlw	9	;# 
  8153  0511  009D               	movwf	29	;# 
  8154                           
  8155                           ;mtouch_sensor_scan.c: 104: _delay ( 10 );
  8156  0512  3003               	movlw	3
  8157  0513                     u165_27:	
  8158  0513  0B89               	decfsz	9,f
  8159  0514  2D13               	goto	u165_27
  8160  0515  0000               	nop
  8161  0516  3071               	movlw	113	;# 
  8162  0517  009D               	movwf	29	;# 
  8163  0518  0022               	banksel	268	;# 
  8164  0519  150C               	bsf	12,2	;# 
  8165  051A  0021               	banksel	157	;# 
  8166  051B  308C               	movlw	140	;# 
  8167  051C  0084               	movwf	4	;# 
  8168  051D  3000               	movlw	0	;# 
  8169  051E  0085               	movwf	5	;# 
  8170  051F  300C               	movlw	12	;# 
  8171  0520  0086               	movwf	6	;# 
  8172  0521  3001               	movlw	1	;# 
  8173  0522  0087               	movwf	7	;# 
  8174  0523  3009               	movlw	9	;# 
  8175  0524  1500               	bsf	0,2	;# 
  8176                           
  8177                           ;mtouch_sensor_scan.c: 128: _delay ( 0 );
  8178  0525  009D               	movwf	29	;# 
  8179  0526  1081               	bcf	1,1	;# 
  8180                           
  8181                           ;mtouch_sensor_scan.c: 133: _delay ( 5 );
  8182  0527  3200               	nop2	;2 cycle nop
  8183  0528  3200               	nop2	;2 cycle nop
  8184  0529  0000               	nop
  8185  052A  0021               	banksel	157	;# 
  8186  052B  149D               	bsf	29,1	;# 
  8187                           
  8188                           ;mtouch_sensor_scan.c: 140: _delay ( 3 );
  8189  052C  3200               	nop2	;2 cycle nop
  8190  052D  0000               	nop
  8191  052E  0022               	banksel	268	;# 
  8192  052F  110C               	bcf	12,2	;# 
  8193  0530  1100               	bcf	0,2	;# 
  8194  0531  0008               	return
  8195  0532                     __end_of_MTOUCH_CVD_ScanB_0:	
  8196                           
  8197                           	psect	text68
  8198  0532                     __ptext68:	
  8199 ;; *************** function _MTOUCH_CVD_ScanA_0 *****************
  8200 ;; Defined at:
  8201 ;;		line 29 in file "mtouch/mtouch_sensor_scan.c"
  8202 ;; Parameters:    Size  Location     Type
  8203 ;;		None
  8204 ;; Auto vars:     Size  Location     Type
  8205 ;;		None
  8206 ;; Return value:  Size  Location     Type
  8207 ;;                  1    wreg      void 
  8208 ;; Registers used:
  8209 ;;		wreg
  8210 ;; Tracked objects:
  8211 ;;		On entry : 1F/0
  8212 ;;		On exit  : 0/0
  8213 ;;		Unchanged: 0/0
  8214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8215 ;;      Params:         0       0       0       0
  8216 ;;      Locals:         0       0       0       0
  8217 ;;      Temps:          0       0       0       0
  8218 ;;      Totals:         0       0       0       0
  8219 ;;Total ram usage:        0 bytes
  8220 ;; Hardware stack levels used:    1
  8221 ;; This function calls:
  8222 ;;		Nothing
  8223 ;; This function is called by:
  8224 ;;		_Sensor_Acq_ExecuteScan
  8225 ;; This function uses a non-reentrant model
  8226 ;;
  8227                           
  8228                           
  8229                           ;psect for function _MTOUCH_CVD_ScanA_0
  8230  0532                     _MTOUCH_CVD_ScanA_0:	
  8231                           
  8232                           ;incstack = 0
  8233                           ; Regs used in _MTOUCH_CVD_ScanA_0: [wreg]
  8234  0532  0022               	banksel	268	;# 
  8235  0533  150C               	bsf	12,2	;# 
  8236  0534  0021               	banksel	157	;# 
  8237  0535  3009               	movlw	9	;# 
  8238  0536  009D               	movwf	29	;# 
  8239                           
  8240                           ;mtouch_sensor_scan.c: 40: _delay ( 10 );
  8241  0537  3003               	movlw	3
  8242  0538                     u166_27:	
  8243  0538  0B89               	decfsz	9,f
  8244  0539  2D38               	goto	u166_27
  8245  053A  0000               	nop
  8246  053B  3071               	movlw	113	;# 
  8247  053C  009D               	movwf	29	;# 
  8248  053D  0022               	banksel	268	;# 
  8249  053E  110C               	bcf	12,2	;# 
  8250  053F  0021               	banksel	157	;# 
  8251  0540  308C               	movlw	140	;# 
  8252  0541  0084               	movwf	4	;# 
  8253  0542  3000               	movlw	0	;# 
  8254  0543  0085               	movwf	5	;# 
  8255  0544  300C               	movlw	12	;# 
  8256  0545  0086               	movwf	6	;# 
  8257  0546  3001               	movlw	1	;# 
  8258  0547  0087               	movwf	7	;# 
  8259  0548  3009               	movlw	9	;# 
  8260  0549  1500               	bsf	0,2	;# 
  8261                           
  8262                           ;mtouch_sensor_scan.c: 64: _delay ( 0 );
  8263  054A  009D               	movwf	29	;# 
  8264  054B  1481               	bsf	1,1	;# 
  8265                           
  8266                           ;mtouch_sensor_scan.c: 69: _delay ( 5 );
  8267  054C  3200               	nop2	;2 cycle nop
  8268  054D  3200               	nop2	;2 cycle nop
  8269  054E  0000               	nop
  8270  054F  0021               	banksel	157	;# 
  8271  0550  149D               	bsf	29,1	;# 
  8272                           
  8273                           ;mtouch_sensor_scan.c: 76: _delay ( 3 );
  8274  0551  3200               	nop2	;2 cycle nop
  8275  0552  0000               	nop
  8276  0553  0022               	banksel	268	;# 
  8277  0554  150C               	bsf	12,2	;# 
  8278  0555  1100               	bcf	0,2	;# 
  8279  0556  0008               	return
  8280  0557                     __end_of_MTOUCH_CVD_ScanA_0:	
  8281                           
  8282                           	psect	text69
  8283  07B9                     __ptext69:	
  8284 ;; *************** function _MTOUCH_Sensor_NotifyInterruptOccurred *****************
  8285 ;; Defined at:
  8286 ;;		line 195 in file "mtouch/mtouch_sensor.c"
  8287 ;; Parameters:    Size  Location     Type
  8288 ;;		None
  8289 ;; Auto vars:     Size  Location     Type
  8290 ;;		None
  8291 ;; Return value:  Size  Location     Type
  8292 ;;                  1    wreg      void 
  8293 ;; Registers used:
  8294 ;;		None
  8295 ;; Tracked objects:
  8296 ;;		On entry : 1D/1
  8297 ;;		On exit  : 1F/0
  8298 ;;		Unchanged: 0/0
  8299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8300 ;;      Params:         0       0       0       0
  8301 ;;      Locals:         0       0       0       0
  8302 ;;      Temps:          0       0       0       0
  8303 ;;      Totals:         0       0       0       0
  8304 ;;Total ram usage:        0 bytes
  8305 ;; Hardware stack levels used:    1
  8306 ;; This function calls:
  8307 ;;		Nothing
  8308 ;; This function is called by:
  8309 ;;		_INTERRUPT_Manager
  8310 ;; This function uses a non-reentrant model
  8311 ;;
  8312                           
  8313                           
  8314                           ;psect for function _MTOUCH_Sensor_NotifyInterruptOccurred
  8315  07B9                     _MTOUCH_Sensor_NotifyInterruptOccurred:	
  8316                           
  8317                           ;mtouch_sensor.c: 196: if ( !sensor_globalFlags.packet_done )
  8318                           
  8319                           ;incstack = 0
  8320                           ; Regs used in _MTOUCH_Sensor_NotifyInterruptOccurred: []
  8321  07B9  0020               	movlb	0	; select bank0
  8322  07BA  1C60               	btfss	_sensor_globalFlags,0	;volatile
  8323                           
  8324                           ;mtouch_sensor.c: 197: sensor_globalFlags.interrupted = 1;
  8325  07BB  14E0               	bsf	_sensor_globalFlags,1	;volatile
  8326  07BC  0008               	return
  8327  07BD                     __end_of_MTOUCH_Sensor_NotifyInterruptOccurred:	
  8328                           
  8329                           	psect	text70
  8330  0650                     __ptext70:	
  8331 ;; *************** function _EUSART_Transmit_ISR *****************
  8332 ;; Defined at:
  8333 ;;		line 53 in file "driver/eusart.c"
  8334 ;; Parameters:    Size  Location     Type
  8335 ;;		None
  8336 ;; Auto vars:     Size  Location     Type
  8337 ;;		None
  8338 ;; Return value:  Size  Location     Type
  8339 ;;                  1    wreg      void 
  8340 ;; Registers used:
  8341 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8342 ;; Tracked objects:
  8343 ;;		On entry : 1F/0
  8344 ;;		On exit  : 1D/1
  8345 ;;		Unchanged: 0/0
  8346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8347 ;;      Params:         0       0       0       0
  8348 ;;      Locals:         0       0       0       0
  8349 ;;      Temps:          0       0       0       0
  8350 ;;      Totals:         0       0       0       0
  8351 ;;Total ram usage:        0 bytes
  8352 ;; Hardware stack levels used:    1
  8353 ;; This function calls:
  8354 ;;		Nothing
  8355 ;; This function is called by:
  8356 ;;		_INTERRUPT_Manager
  8357 ;; This function uses a non-reentrant model
  8358 ;;
  8359                           
  8360                           
  8361                           ;psect for function _EUSART_Transmit_ISR
  8362  0650                     _EUSART_Transmit_ISR:	
  8363                           
  8364                           ;eusart.c: 54: if ( sizeof (txBuf ) > txRemain ) {
  8365                           
  8366                           ;incstack = 0
  8367                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  8368  0650  3020               	movlw	32
  8369  0651  027B               	subwf	_txRemain,w
  8370  0652  1803               	skipnc
  8371  0653  2E62               	goto	i1l44
  8372                           
  8373                           ;eusart.c: 55: TXREG = txBuf[txTail++];
  8374  0654  087C               	movf	_txTail,w
  8375  0655  3EA0               	addlw	(low (_txBuf| 0))& (0+255)
  8376  0656  0086               	movwf	6
  8377  0657  0187               	clrf	7
  8378  0658  0801               	movf	1,w
  8379  0659  0023               	movlb	3	; select bank3
  8380  065A  009A               	movwf	26	;volatile
  8381  065B  3020               	movlw	32
  8382  065C  0AFC               	incf	_txTail,f
  8383                           
  8384                           ;eusart.c: 56: if ( sizeof (txBuf ) <= txTail ) {
  8385  065D  027C               	subwf	_txTail,w
  8386  065E  1803               	btfsc	3,0
  8387                           
  8388                           ;eusart.c: 57: txTail = 0;
  8389  065F  01FC               	clrf	_txTail
  8390                           
  8391                           ;eusart.c: 58: }
  8392                           ;eusart.c: 59: txRemain++;
  8393  0660  0AFB               	incf	_txRemain,f
  8394                           
  8395                           ;eusart.c: 60: } else {
  8396  0661  0008               	return
  8397  0662                     i1l44:	
  8398                           
  8399                           ;eusart.c: 61: PIE1bits.TXIE = 0;
  8400  0662  0021               	movlb	1	; select bank1
  8401  0663  1211               	bcf	17,4	;volatile
  8402  0664  0008               	return
  8403  0665                     __end_of_EUSART_Transmit_ISR:	
  8404  007E                     btemp	set	126	;btemp
  8405  007E                     int$flags	set	126
  8406  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    27
    Data        26
    BSS         70
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      13
    BANK0            80     28      65
    BANK1            80      0      54
    BANK2            80      0       0

Pointer List with Targets:

    Sensor_Scanfrequency_Evaluation@sensor.scanB	const PTR FTN()void  size(2) Largest target is 0
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_Scanfrequency_Evaluation@sensor.scanA	const PTR FTN()void  size(2) Largest target is 0
		 -> MTOUCH_CVD_ScanA_0(), 

    Button_Service$1598$0	PTR struct . size(1) Largest target is 22
		 -> mtouch_button(BANK1[22]), 

    Button_Service$1598	PTR FTN(PTR struct .,)void  size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    Button_StateMachine$0	PTR struct . size(1) Largest target is 22
		 -> mtouch_button(BANK1[22]), 

    __builtin_memcpy$1	PTR const void  size(2) Largest target is 22
		 -> mtouch_button_init(CODE[22]), 

    __builtin_memcpy$0	PTR void  size(1) Largest target is 22
		 -> mtouch_button(BANK1[22]), 

    MTOUCH_Button_SetNotPressedCallback@callback	PTR FTN(enum E3654,)void  size(2) Largest target is 1
		 -> led_off(), 

    MTOUCH_Button_SetPressedCallback@callback	PTR FTN(enum E3654,)void  size(2) Largest target is 1
		 -> led_on(), 

    Button_Baseline_Update@button	PTR struct . size(1) Largest target is 22
		 -> mtouch_button(BANK1[22]), 

    Button_Baseline_Initialize@button	PTR struct . size(1) Largest target is 22
		 -> mtouch_button(BANK1[22]), 

    Button_Reading_Update@button	PTR struct . size(1) Largest target is 22
		 -> mtouch_button(BANK1[22]), 

    Button_Deviation_Update@button	PTR struct . size(1) Largest target is 22
		 -> mtouch_button(BANK1[22]), 

    Button_State_Pressed@button	PTR struct . size(1) Largest target is 22
		 -> mtouch_button(BANK1[22]), 

    Button_State_NotPressed@button	PTR struct . size(1) Largest target is 22
		 -> mtouch_button(BANK1[22]), 

    Button_State_Initializing@button	PTR struct . size(1) Largest target is 22
		 -> mtouch_button(BANK1[22]), 

    Button_Service@button	PTR struct . size(1) Largest target is 22
		 -> mtouch_button(BANK1[22]), 

    sp____builtin_memcpy	PTR void  size(2) Largest target is 4096
		 -> RAM(DATA[4096]), 

    MTOUCH_Button_Initialize@button	PTR struct . size(1) Largest target is 22
		 -> mtouch_button(BANK1[22]), 

    Button_StateMachine	PTR FTN(PTR struct .,)void [3] size(2) Largest target is 1
		 -> Button_State_Pressed(), Button_State_NotPressed(), Button_State_Initializing(), 

    callback_notPressed	PTR FTN(enum E3654,)void  size(2) Largest target is 1
		 -> led_off(), Button_DefaultCallback(), 

    callback_pressed	PTR FTN(enum E3654,)void  size(2) Largest target is 1
		 -> led_on(), Button_DefaultCallback(), 

    Sensor_setSampled@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_setSampled@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_setSampled@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK0[9]), 

    Sensor_Sampled_Reset@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_Sampled_Reset@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_Sampled_Reset@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK0[9]), 

    MTOUCH_Sensor_Sampled_ResetAll@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK0[9]), 

    Sensor_setInactive@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_setInactive@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_setInactive@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK0[9]), 

    Sensor_setActive@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_setActive@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_setActive@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK0[9]), 

    Sensor_isEnabled@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_isEnabled@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_isEnabled@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK0[9]), 

    Sensor_setScanFunction@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_setScanFunction@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_setScanFunction@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK0[9]), 

    MTOUCH_Sensor_SetSampledCallback@callback	PTR FTN(enum E30,)void  size(2) Largest target is 1
		 -> log_info(), 

    Sensor_RawSample_Update@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_RawSample_Update@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_RawSample_Update@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK0[9]), 

    Sensor_Scanfrequency_Evaluation@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK0[9]), 

    Sensor_Acq_ExecutePacket@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_Acq_ExecutePacket@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_Acq_ExecutePacket@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK0[9]), 

    Sensor_Acquisition@sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_Acquisition@sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_Acquisition@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK0[9]), 

    Sensor_Service@sensor	PTR struct . size(1) Largest target is 9
		 -> mtouch_sensor(BANK0[9]), 

    S259$scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    mtouch_sensor.scanB	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    S259$scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    mtouch_sensor.scanA	const PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    Sensor_scanB	PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanB_0(), 

    Sensor_scanA	PTR FTN()void  size(2) Largest target is 1
		 -> MTOUCH_CVD_ScanA_0(), 

    callback_sampled	PTR FTN(enum E30,)void  size(2) Largest target is 1
		 -> log_info(), Sensor_DefaultCallback(), 

    TMR2_SetInterruptHandler@handler	PTR FTN()void  size(2) Largest target is 1
		 -> Sensor_Acq_ExecuteScan(), 

    tmr2_isr_handler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), Sensor_Acq_ExecuteScan(), TMR2_InterruptHandler_Default(), 

    eusart_rcv_isr_handler	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_ReceiveInterruptHandler_Default(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_Manager in COMMON

    _TMR2_ISR->_Sensor_Acq_ExecuteScan
    _Sensor_Acq_ExecuteScan->i1_abs

Critical Paths under _main in BANK0

    _MTOUCH_Service_Mainloop->_MTOUCH_Sensor_SampleAll
    _MTOUCH_Sensor_SampleAll->_Sensor_Service
    _Sensor_Service->_Sensor_Acquisition
    _log_info->_MTOUCH_Button_Baseline_Get
    ___lwmod->___lwdiv
    _MTOUCH_Button_Reading_Get->___bmul
    _MTOUCH_Button_Baseline_Get->_Button_Baseline_Get_helper
    _Button_Baseline_Get_helper->___bmul
    _Sensor_Acquisition->_Sensor_Scanfrequency_Evaluation
    _Sensor_Scanfrequency_Evaluation->_Sensor_Acq_ExecutePacket
    _Sensor_Acq_ExecutePacket->_TMR2_SetInterruptHandler
    _MTOUCH_Button_ServiceAll->_Button_Service
    _Button_Service->_Button_State_NotPressed
    _Button_Service->_Button_State_Pressed
    _MTOUCH_Sensor_wasSampled->___bmul
    _Button_State_Initializing->_Button_Baseline_Initialize
    _Button_Baseline_Initialize->_MTOUCH_Sensor_RawSample_Get
    _Button_Reading_Update->_MTOUCH_Sensor_RawSample_Get
    _MTOUCH_Sensor_RawSample_Get->___bmul
    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Sensor_Sampled_ResetAll->_Sensor_Sampled_Reset
    _MTOUCH_Sensor_InitializeAll->_MTOUCH_Sensor_Initialize
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Enable
    _MTOUCH_Sensor_Enable->___bmul
    _MTOUCH_Button_InitializeAll->_MTOUCH_Button_Initialize
    _MTOUCH_Button_Initialize->___bmul

Critical Paths under _INTERRUPT_Manager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_Manager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_Manager in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   17498
_MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Button_SetPressedCallback
                  _MTOUCH_Initialize
   _MTOUCH_Sensor_SetSampledCallback
            _MTOUCH_Service_Mainloop
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                  _EUSART_Initialize
                     _OSC_Initialize
                     _PIN_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Service_Mainloop                              0     0      0   14949
           _MTOUCH_Button_ServiceAll
            _MTOUCH_Sensor_SampleAll
     _MTOUCH_Sensor_Sampled_ResetAll
                        _MTOUCH_Tick
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Tick                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Sensor_SampleAll                              1     1      0    9054
                                             27 BANK0      1     1      0
                     _Sensor_Service
 ---------------------------------------------------------------------------------
 (3) _Sensor_Service                                       3     3      0    8986
                                             24 BANK0      3     3      0
                 _Sensor_Acquisition
             _Sensor_DefaultCallback *
            _Sensor_RawSample_Update
                  _Sensor_setSampled
                             ___bmul
                           _log_info *
 ---------------------------------------------------------------------------------
 (4) _log_info                                             7     6      1    6379
                                             14 BANK0      7     6      1
                       _EUSART_Write
         _MTOUCH_Button_Baseline_Get
          _MTOUCH_Button_Reading_Get
        _MTOUCH_Sensor_RawSample_Get
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4    1983
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4    2086
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Button_Reading_Get                            4     1      3     588
                                              3 BANK0      4     1      3
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Button_Baseline_Get                           4     1      3     610
                                             10 BANK0      4     1      3
         _Button_Baseline_Get_helper
 ---------------------------------------------------------------------------------
 (6) _Button_Baseline_Get_helper                           7     5      2     566
                                              3 BANK0      7     5      2
                             ___bmul
 ---------------------------------------------------------------------------------
 (5) _EUSART_Write                                         1     1      0      50
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_setSampled                                    1     1      0      55
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_RawSample_Update                              1     1      0      77
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _Sensor_DefaultCallback                               1     0      1       0
                                             14 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (4) _Sensor_Acquisition                                   6     6      0    1775
                                             18 BANK0      6     6      0
           _Sensor_Acq_ExecutePacket
    _Sensor_Scanfrequency_Evaluation
                   _Sensor_isEnabled
                   _Sensor_setActive
                 _Sensor_setInactive
                                _abs
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     314
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (5) _Sensor_setInactive                                   1     1      0      55
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_setActive                                     1     1      0      55
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_isEnabled                                     1     1      0      77
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _Sensor_Scanfrequency_Evaluation                     10    10      0     641
                                              8 BANK0     10    10      0
           _Sensor_Acq_ExecutePacket
 ---------------------------------------------------------------------------------
 (6) _Sensor_Acq_ExecutePacket                             6     6      0     422
                                              2 BANK0      6     6      0
      _MTOUCH_Sensor_Scan_Initialize
             _Sensor_setScanFunction
           _TMR2_SetInterruptHandler
        tmr2@TMR2_LoadPeriodRegister
                tmr2@TMR2_StartTimer
                 tmr2@TMR2_StopTimer
 ---------------------------------------------------------------------------------
 (7) tmr2@TMR2_StopTimer                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (7) tmr2@TMR2_StartTimer                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) tmr2@TMR2_LoadPeriodRegister                          1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _TMR2_SetInterruptHandler                             2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (7) _Sensor_setScanFunction                               1     1      0      77
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Button_ServiceAll                             1     1      0    5739
                                             20 BANK0      1     1      0
                     _Button_Service
 ---------------------------------------------------------------------------------
 (3) _Button_Service                                       2     2      0    5671
                                             18 BANK0      2     2      0
            _Button_Deviation_Update
              _Button_Reading_Update
          _Button_State_Initializing *
            _Button_State_NotPressed *
               _Button_State_Pressed *
           _MTOUCH_Button_Initialize
         _MTOUCH_Sensor_isCalibrated
           _MTOUCH_Sensor_wasSampled
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_wasSampled                             1     1      0     588
                                              3 BANK0      1     1      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isCalibrated                           1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _Button_State_Pressed                                 6     5      1     163
                                             12 BANK0      6     5      1
             _Button_DefaultCallback *
                            _led_off *
 ---------------------------------------------------------------------------------
 (5) _led_off                                              1     0      1       0
                                              0 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (4) _Button_State_NotPressed                              6     5      1    1267
                                             12 BANK0      6     5      1
             _Button_Baseline_Update
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
                             _led_on *
 ---------------------------------------------------------------------------------
 (5) _led_on                                               1     0      1       0
                                              0 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (5) _Button_DefaultCallback                               1     0      1       0
                                              0 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (4) _Button_State_Initializing                            5     4      1    1154
                                             12 BANK0      5     4      1
         _Button_Baseline_Initialize
             _Button_Baseline_Update
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Update                               7     7      0     260
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Initialize                           5     5      0     696
                                              7 BANK0      5     5      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (4) _Button_Reading_Update                                3     3      0     797
                                              7 BANK0      3     3      0
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_RawSample_Get                          4     1      3     588
                                              3 BANK0      4     1      3
                             ___bmul
 ---------------------------------------------------------------------------------
 (4) _Button_Deviation_Update                             13    13      0     282
                                              0 BANK0     13    13      0
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Sensor_SetSampledCallback                     2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Initialize                                    0     0      0    2255
        _MTOUCH_Button_InitializeAll
        _MTOUCH_Sensor_InitializeAll
     _MTOUCH_Sensor_Sampled_ResetAll
      _MTOUCH_Sensor_Scan_Initialize
 ---------------------------------------------------------------------------------
 (7) _MTOUCH_Sensor_Scan_Initialize                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Sensor_Sampled_ResetAll                       2     2      0     156
                                              1 BANK0      2     2      0
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Sensor_InitializeAll                          1     1      0    1354
                                              5 BANK0      1     1      0
           _MTOUCH_Sensor_Initialize
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Initialize                             1     1      0    1286
                                              4 BANK0      1     1      0
               _MTOUCH_Sensor_Enable
               _Sensor_Sampled_Reset
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _Sensor_Sampled_Reset                                 1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_Enable                                 1     1      0     588
                                              3 BANK0      1     1      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Button_InitializeAll                          2     2      0     745
                                              5 BANK0      2     2      0
           _MTOUCH_Button_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Button_Initialize                             2     2      0     677
                                              3 BANK0      2     2      0
            _MTOUCH_Sensor_Calibrate
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               3     2      1     544
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Calibrate                              1     1      0       0
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetPressedCallback                     2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetNotPressedCallback                  2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_Manager                                    0     0      0     475
                _EUSART_Transmit_ISR
_MTOUCH_Sensor_NotifyInterruptOccurr
                           _TMR2_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR2_ISR                                             0     0      0     475
                   Absolute function *
             _Sensor_Acq_ExecuteScan *
      _TMR2_InterruptHandler_Default *
 ---------------------------------------------------------------------------------
 (10) _TMR2_InterruptHandler_Default                       0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _Sensor_Acq_ExecuteScan                              4     4      0     475
                                              4 COMMON     4     4      0
                 _MTOUCH_CVD_ScanA_0 *
                 _MTOUCH_CVD_ScanB_0 *
                           i1___bmul
                              i1_abs
 ---------------------------------------------------------------------------------
 (11) i1_abs                                               4     2      2     210
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (11) i1___bmul                                            3     2      1      87
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (11) _MTOUCH_CVD_ScanB_0                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _MTOUCH_CVD_ScanA_0                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 (9) _MTOUCH_Sensor_NotifyInterruptOccurred                0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART_Transmit_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Button_SetPressedCallback
   _MTOUCH_Initialize
     _MTOUCH_Button_InitializeAll
       _MTOUCH_Button_Initialize
         _MTOUCH_Sensor_Calibrate
         ___bmul
     _MTOUCH_Sensor_InitializeAll
       _MTOUCH_Sensor_Initialize
         _MTOUCH_Sensor_Enable
           ___bmul
         _Sensor_Sampled_Reset
         ___bmul
     _MTOUCH_Sensor_Sampled_ResetAll
       _Sensor_Sampled_Reset
     _MTOUCH_Sensor_Scan_Initialize
   _MTOUCH_Sensor_SetSampledCallback
   _MTOUCH_Service_Mainloop
     _MTOUCH_Button_ServiceAll
       _Button_Service
         _Button_Deviation_Update
         _Button_Reading_Update
           _MTOUCH_Sensor_RawSample_Get
             ___bmul
         _Button_State_Initializing *
           _Button_Baseline_Initialize
             _MTOUCH_Sensor_RawSample_Get
               ___bmul
           _Button_Baseline_Update
         _Button_State_NotPressed *
           _Button_Baseline_Update
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
             _MTOUCH_Sensor_Calibrate
             ___bmul
           _led_on *
         _Button_State_Pressed *
           _Button_DefaultCallback *
           _led_off *
         _MTOUCH_Button_Initialize *
           _MTOUCH_Sensor_Calibrate
           ___bmul
         _MTOUCH_Sensor_isCalibrated *
         _MTOUCH_Sensor_wasSampled *
           ___bmul
         ___bmul *
     _MTOUCH_Sensor_SampleAll
       _Sensor_Service
         _Sensor_Acquisition
           _Sensor_Acq_ExecutePacket
             _MTOUCH_Sensor_Scan_Initialize
             _Sensor_setScanFunction
             _TMR2_SetInterruptHandler
             tmr2@TMR2_LoadPeriodRegister
             tmr2@TMR2_StartTimer
             tmr2@TMR2_StopTimer
           _Sensor_Scanfrequency_Evaluation
             _Sensor_Acq_ExecutePacket
               _MTOUCH_Sensor_Scan_Initialize
               _Sensor_setScanFunction
               _TMR2_SetInterruptHandler
               tmr2@TMR2_LoadPeriodRegister
               tmr2@TMR2_StartTimer
               tmr2@TMR2_StopTimer
           _Sensor_isEnabled
           _Sensor_setActive
           _Sensor_setInactive
           _abs
         _Sensor_DefaultCallback *
         _Sensor_RawSample_Update *
         _Sensor_setSampled *
         ___bmul *
         _log_info *
           _EUSART_Write
           _MTOUCH_Button_Baseline_Get
             _Button_Baseline_Get_helper
               ___bmul
           _MTOUCH_Button_Reading_Get
             ___bmul
           _MTOUCH_Sensor_RawSample_Get
             ___bmul
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
     _MTOUCH_Sensor_Sampled_ResetAll
       _Sensor_Sampled_Reset
     _MTOUCH_Tick
   _SYSTEM_Initialize
     _EUSART_Initialize
     _OSC_Initialize
     _PIN_Initialize
     _TMR2_Initialize

 _INTERRUPT_Manager (ROOT)
   _EUSART_Transmit_ISR
   _MTOUCH_Sensor_NotifyInterruptOccurred
   _TMR2_ISR
     Absolute function(Fake) *
     _Sensor_Acq_ExecuteScan *
       _MTOUCH_CVD_ScanA_0 *
       _MTOUCH_CVD_ScanB_0 *
       i1___bmul *
       i1_abs *
     _TMR2_InterruptHandler_Default *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      84       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     1C      41       6       81.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      36       8       67.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
DATA                 0      0      84      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Jan 12 15:42:03 2018

                    __end_of_TMR2_SetInterruptHandler 07A2                          ?_MTOUCH_Sensor_RawSample_Get 0023  
                                                   pc 0002                                        ___bmul@product 0021  
                                         __CFG_CP$OFF 0000                                _Sensor_setScanFunction 06C1  
                                                  l35 05A5                       __size_of_Sensor_Acq_ExecuteScan 006E  
                __size_oftmr2@TMR2_LoadPeriodRegister 0000                            __end_of_Sensor_setInactive 0000  
                                       log_info@value 0033                                                   PL50 032C  
                                                 PL60 00DF                                                   PL52 0404  
                                                 LATA 010C                                                   PL70 01FD  
                                                 PL62 03A6                                                   PL54 041D  
                                         __CFG_LVP$ON 0000                                                   PL80 031B  
                                                 PL72 00EE                                                   PL64 0278  
                                                 PL56 00D6                                                   PL90 0103  
                                                 PL82 0572                                                   PL74 06A7  
                                                 PL66 0188                                                   PL58 0271  
                                                 PL92 0460                                                   PL84 00F9  
                                                 PL76 027E                                                   PL68 00E7  
                                                 PL86 0206                                                   PL78 00F3  
                                                 PL88 00FE                                                   l103 0795  
                                                 l202 0003                                                   l226 05B8  
                                                 l229 05D2                                                   l190 0001  
                                                 l351 0006                                                   l193 0001  
                                                 l273 02BC                                                   l354 0006  
                                                 l451 025F                                                   l364 07C7  
                                                 l276 02C0                                                   l380 0006  
                                                 l278 02D4                                                   l377 0006  
                                                 l650 0637                                                   l565 07C3  
                                                 _GIE 005F                                                   _PR2 001B  
                                                 u915 05E4                           ?_Button_Baseline_Get_helper 0023  
                                                 _abs 06ED                                        log_info@button 002E  
                                     _TMR2_Initialize 06D1                                          __CFG_BORV$LO 0000  
                                                 wreg 0009                      ??_MTOUCH_Sensor_Sampled_ResetAll 0021  
                     ?_MTOUCH_Sensor_Sampled_ResetAll 0070                      __size_of_MTOUCH_Sensor_SampleAll 000A  
                   __size_of_MTOUCH_Sensor_Initialize 001D                             ?_MTOUCH_Sensor_Initialize 0070  
                                                INDF0 0000                                                  INDF1 0001  
                                                FSR0H 0005                                                  FSR1H 0007  
                                                FSR0L 0004                                                  FSR1L 0006  
                                  _MTOUCH_CVD_ScanA_0 0532                                    _MTOUCH_CVD_ScanB_0 050D  
                                                l2001 0001                                                  ?_abs 0020  
                                                l2023 02F6                                                  l2015 02E7  
                                                l2033 02F8                                                  l2121 0504  
                                                l2113 04F5                                                  l2035 0302  
                                                l2125 0508                                                  l2141 058F  
                                                l2039 030F                                                  l2047 0001  
                                                l2153 0001                                                  l2313 05BF  
                                                l2241 0169                                                  l2073 0329  
                                                l2137 0583                                                  l2145 0593  
                                                l2315 05C4                                                  l2243 016F  
                                                l2227 03FF                                                  l2163 03BA  
                                                l2171 03BD                                                  l2083 0675  
                                                l2323 049F                                                  l2247 017F  
                                                l2255 0375                                                  l2095 06EA  
                                                l2327 04B0                                                  l2329 04BE  
                                                l2409 0756                                                  l2275 0257  
                                                l2507 075F                                                  l2269 022E  
                                                l2197 06A4                                                  l2365 068B  
                                                l2199 0001                                                  l2397 0769  
                                                l2495 061C                                                  l1871 0770  
                                                l2489 061A                                                  l1865 0000  
                                                l1883 0733                                                  l1955 0688  
                                                l1867 0000                                                  l1869 0001  
                                                l1965 059A                                                  l1979 05B3  
                                                TRISA 008C                                          __CFG_WDTE$ON 0000  
                                                u1005 0308                                                  u1025 04DD  
                                                u1105 04FD                                                  u1045 0338  
                                                u1205 03E4                                                  u1145 0589  
                                                u1315 0390                                                  u1260 015B  
                                                u1245 0110                                                  u1325 0217  
                                                _LATA 010C                                                  u1255 0133  
                                                u1265 0157                                                  u1345 0242  
                                                u1365 0480                                                  i1l44 0662  
                          Button_State_Pressed@button 002C                                                  _TMR2 001A  
                                                _WPUA 020C                     __size_of_Sensor_Acq_ExecutePacket 0050  
                           ?_Sensor_Acq_ExecutePacket 0070                                          __CFG_WRT$OFF 0000  
                                                abs@a 0020                                                  _main 0623  
                __size_of_MTOUCH_Button_InitializeAll 001A                                                  fsr0h 0005  
                                                fsr1h 0007                                                  indf0 0000  
                                                fsr0l 0004                                                  indf1 0001  
                                                fsr1l 0006                  __size_of_MTOUCH_Sensor_InitializeAll 0009  
                                                btemp 007E                                   ?_MTOUCH_CVD_ScanA_0 0070  
                                 ?_MTOUCH_CVD_ScanB_0 0070                                         __CFG_BOREN$ON 0000  
                                     log_info@reading 002F                                                  start 001A  
                                   ___bmul@multiplier 0022                                         __CFG_MCLRE$ON 0000  
                                               ADCON0 009D  __end_ofSensor_Scanfrequency_Evaluation@frequency_hop 079D  
        Sensor_Scanfrequency_Evaluation@frequency_hop 0798                              ?_MTOUCH_Service_Mainloop 0070  
                       __size_of_Button_State_Pressed 0030                                                 ??_abs 0022  
                         ?_Button_Baseline_Initialize 0070                         ??_MTOUCH_Sensor_RawSample_Get 0026  
                       Sensor_RawSample_Update@sensor 0020                             __size_of_Sensor_isEnabled 000B  
                                       ?_EUSART_Write 0070     Sensor_Scanfrequency_Evaluation@best_packet_sample 002C  
                                               ?_main 0070                                                 _ADRES 009B  
                                ??_MTOUCH_CVD_ScanA_0 0070                                  ??_MTOUCH_CVD_ScanB_0 0070  
                                    log_info@baseline 0031                                                 _T2CON 001C  
                             __size_of_Button_Service 0030                                       __end_of___lwdiv 050D  
                                     __end_of___lwmod 0598                                                 i1l633 0010  
                                               i1l636 0018                                                 u153m0 0616  
                                               _RCSTA 019D                                                 _SPBRG 019B  
                                               _TRISA 008C                                                 i1_abs 0709  
                                               _TXREG 019A                                                 _TXSTA 019E  
                             __size_of_PIN_Initialize 000D                       __size_of_Button_DefaultCallback 0001  
                                       __CFG_PWRTE$ON 0000                        ?_TMR2_InterruptHandler_Default 0070  
                                    __end_of_TMR2_ISR 0786                                       __end_of_led_off 07C3  
                         ??_MTOUCH_Button_Reading_Get 0026                       __size_of_Sensor_DefaultCallback 0001  
                             __size_of_Sensor_Service 002C                 __end_of_MTOUCH_Sensor_Scan_Initialize 0778  
              __size_of_MTOUCH_Sensor_Scan_Initialize 0008                         _MTOUCH_Sensor_Scan_Initialize 0770  
                             Sensor_setSampled@sensor 0020                                                 _txBuf 00A0  
                              _Sensor_Acq_ExecuteScan 018F                      __size_of_Button_State_NotPressed 0065  
                                    __end_ofi1___bmul 0749                                                 pclath 000A  
                                _Sensor_Sampled_Reset 0000                                                 status 0003  
                                               wtemp0 007E                             __size_of_Sensor_setActive 0000  
                              Sensor_isEnabled@sensor 0020              __end_of_MTOUCH_Sensor_SetSampledCallback 07A7  
           __size_of_MTOUCH_Sensor_SetSampledCallback 0005                    ??_MTOUCH_Sensor_SetSampledCallback 0022  
                   ?_MTOUCH_Sensor_SetSampledCallback 0020                      _MTOUCH_Sensor_SetSampledCallback 07A2  
                                     __initialization 001B                                          __end_of_main 063A  
                                      ??_EUSART_Write 0020                               __end_of_TMR2_Initialize 06DF  
                     Button_Deviation_Update@baseline 0024                      __end_of_MTOUCH_Button_Initialize 0572  
                            _TMR2_SetInterruptHandler 079D                                                ??_main 003C  
                             _MTOUCH_Sensor_Calibrate 07C7                                        __CFG_PLLEN$OFF 0000  
                             ??_Button_Reading_Update 0027                                                ?i1_abs 0070  
                MTOUCH_Sensor_Sampled_ResetAll@sensor 0022                              ?_Button_Deviation_Update 0070  
                                        ?_MTOUCH_Tick 0070                          Button_Baseline_Update@button 0026  
                                              _ADCON0 009D                                                _ADCON1 009E  
                                              _ADCON2 009F                  __size_of_MTOUCH_Sensor_RawSample_Get 0013  
                                              i1S2647 0003                                                i1S2649 0001  
                                              _APFCON 011D                                                _ANSELA 018C  
                                              i1l2353 073F                                                i1l2441 01BF  
                                              i1l2433 019B                                                i1l2451 01E4  
                                              i1l2435 01A1                                                i1l2455 01EB  
                                              i1l2439 01A7                                                i1l2457 01EF  
                                              i1l2459 01F1                                                i1l2645 01B5  
                               ?_Sensor_Sampled_Reset 0070                                                u165_27 0513  
                                              u166_27 0538                                                _OSCCON 0099  
                   MTOUCH_Button_InitializeAll@button 0026                                                i1abs@a 0070  
                              _Button_DefaultCallback 07C6                       __end_of_MTOUCH_Service_Mainloop 077F  
                 __size_of_Button_Baseline_Get_helper 001C                             _MTOUCH_Button_Reading_Get 0665  
                              _Sensor_DefaultCallback 07C4                                         _packet_sample 005C  
                                              ___bmul 0731                          Sensor_DefaultCallback@sensor 002E  
                                      __CFG_STVREN$ON 0000                                             ??___lwdiv 0024  
                                           ??___lwmod 002B                                                _led_on 07BD  
                                 _EUSART_Transmit_ISR 0650                                   tmr2@TMR2_StartTimer 0000  
                                    __end_of_log_info 00D6                                                _txHead 007A  
                    __end_of_MTOUCH_Button_ServiceAll 0767                                                _txTail 007C  
                                           ??_led_off 0021                           ?_MTOUCH_Button_Baseline_Get 002A  
                             _MTOUCH_Sensor_SampleAll 0754                          Button_DefaultCallback@button 0020  
                            ?_Sensor_RawSample_Update 0070                            __end_of_Sensor_Acquisition 03F6  
                             ?_Button_Baseline_Update 0070              __end_of_MTOUCH_Button_SetPressedCallback 07AC  
           __size_of_MTOUCH_Button_SetPressedCallback 0005                    ??_MTOUCH_Button_SetPressedCallback 0022  
                   ?_MTOUCH_Button_SetPressedCallback 0020                      _MTOUCH_Button_SetPressedCallback 07A7  
                                ?_EUSART_Transmit_ISR 0070                       MTOUCH_Sensor_RawSample_Get@name 0026  
                                ?tmr2@TMR2_StartTimer 0070                                     _SYSTEM_Initialize 07B1  
                             __end_of__initialization 0036                   __size_of_Button_Baseline_Initialize 0027  
                      ?_MTOUCH_Sensor_Scan_Initialize 0070                          ?tmr2@TMR2_LoadPeriodRegister 0070  
               Sensor_Scanfrequency_Evaluation@sensor 002E                                    ?_SYSTEM_Initialize 0070  
                                 _Button_StateMachine 003C                         MTOUCH_Sensor_Calibrate@sensor 0070  
                                 ___bmul@multiplicand 0020                                         __end_ofi1_abs 0717  
                             __size_of_OSC_Initialize 0006                               ?_Sensor_setScanFunction 0070  
                                      __pcstackCOMMON 0070                                          __pidataBANK0 05EF  
         __end_of_MTOUCH_Button_SetNotPressedCallback 07B1          __size_of_MTOUCH_Button_SetNotPressedCallback 0005  
               ??_MTOUCH_Button_SetNotPressedCallback 0022                  ?_MTOUCH_Button_SetNotPressedCallback 0020  
                 _MTOUCH_Button_SetNotPressedCallback 07AC                                   ??_SYSTEM_Initialize 0020  
              _EUSART_ReceiveInterruptHandler_Default 0000                                             ?_TMR2_ISR 0070  
                    __end_of_MTOUCH_Sensor_Initialize 05D3                             ??_MTOUCH_Sensor_Calibrate 0020  
                                    _Sensor_isEnabled 0749                                      ?_TMR2_Initialize 0070  
                     __end_of_Button_Deviation_Update 0188                                             ?i1___bmul 0070  
                            Sensor_setInactive@sensor 0020                                        _Button_Service 0430  
                    __end_of_Sensor_Acq_ExecutePacket 02D6                            ?_Button_State_Initializing 002C  
                                Button_Service@button 0033                                        _PIN_Initialize 0717  
                                             ??i1_abs 0072                        __end_of_Button_Baseline_Update 032C  
                                Sensor_Service@sensor 003A                              _MTOUCH_Button_Initialize 0557  
                                      _Sensor_Service 0495                                      i1___bmul@product 0072  
                             _Button_State_NotPressed 020C                         __size_of_MTOUCH_Sensor_Enable 000D  
                                  _Sensor_setInactive 0000                             __end_of_SYSTEM_Initialize 07B5  
                               ??_EUSART_Transmit_ISR 0070                      MTOUCH_Sensor_isCalibrated@sensor 0070  
                              ??_Sensor_Sampled_Reset 0020                                 ??tmr2@TMR2_StartTimer 0020  
                                          __pbssBANK0 0056                                            __pbssBANK1 00A0  
                                __end_of_EUSART_Write 05B6                    tmr2@TMR2_LoadPeriodRegister@period 0020  
                                 ?_Sensor_setInactive 0070                                      _Sensor_setActive 0000  
                          __end_oftmr2@TMR2_StopTimer 0000                                    Sensor_Service@name 0038  
                          __end_of_mtouch_button_init 0650                        __end_of_Sensor_setScanFunction 06D1  
                       ??tmr2@TMR2_LoadPeriodRegister 0020                                            __pmaintext 0623  
                                             ?___bmul 0020                                            ??_TMR2_ISR 0078  
                      MTOUCH_Sensor_wasSampled@sensor 0023                       TMR2_SetInterruptHandler@handler 0020  
                                          __pintentry 0004                                               ?_led_on 0020  
                              __end_of_Button_Service 0460                                               _BAUDCON 019F  
                 __end_of_MTOUCH_Button_InitializeAll 0623                           _MTOUCH_Button_InitializeAll 0609  
                 __end_of_MTOUCH_Sensor_InitializeAll 0770                           _MTOUCH_Sensor_InitializeAll 0767  
                           ??_MTOUCH_Sensor_SampleAll 003B                                            ??i1___bmul 0071  
                              __end_of_PIN_Initialize 0724                       __end_of_Sensor_RawSample_Update 06A7  
                                ??_Sensor_setInactive 0020                     __size_of_MTOUCH_Sensor_wasSampled 000E  
                           ?_MTOUCH_Sensor_wasSampled 0070                     __end_of_Button_State_Initializing 03A6  
                              __end_of_Sensor_Service 04C1                              _MTOUCH_Button_ServiceAll 075E  
                             ?_Sensor_Acq_ExecuteScan 0070                         MTOUCH_Sensor_SampleAll@sensor 003B  
                    __size_of_MTOUCH_Service_Mainloop 0007                          __end_of_Button_State_Pressed 0495  
                    Button_Baseline_Initialize@button 002B                                  __size_of_MTOUCH_Tick 0001  
                                           ?_log_info 002E                       ??_TMR2_InterruptHandler_Default 0070  
                                      _packet_counter 0078                            ??_TMR2_SetInterruptHandler 0022  
                             Sensor_Acquisition@retry 0036                                       __size_of___bmul 000C  
                      MTOUCH_Button_Initialize@button 0024                                               ___lwdiv 04E8  
                                             ___lwmod 0578                                       ?_Button_Service 0070  
                                     __size_of_led_on 0003                                               __ptext1 07B1  
                                             __ptext2 06D1                                               __ptext3 0717  
                                             __ptext4 0792                                               __ptext5 068B  
                                             __ptext6 0778                                               __ptext7 07C3  
                                             __ptext8 0754                                               __ptext9 0495  
                                     ?_PIN_Initialize 0070                           Button_Reading_Update@button 0029  
                                             _led_off 07C0                           __size_of_MTOUCH_CVD_ScanA_0 0025  
                         __size_of_MTOUCH_CVD_ScanB_0 0025                              _MTOUCH_Sensor_Initialize 05B6  
                      __end_of_Sensor_Acq_ExecuteScan 01FD                                             _T2CONbits 001C  
                                        __size_of_abs 000E                             ??_Button_State_NotPressed 002D  
                                     ?_Sensor_Service 0070                                   i1___bmul@multiplier 0071  
                      __size_of_Button_Reading_Update 000E                         __end_of_Button_Reading_Update 0404  
                   MTOUCH_Sensor_InitializeAll@sensor 0025                              _Sensor_Acq_ExecutePacket 0286  
                                    _callback_sampled 004A                            __size_of_SYSTEM_Initialize 0004  
                                             clrloop0 078D                                      _callback_pressed 0044  
                      MTOUCH_Sensor_Initialize@sensor 0024                                  end_of_initialization 0036  
                             ?_Button_DefaultCallback 0020                                               init_ram 0786  
                                             initloop 0787                                            ??_log_info 002F  
                             ?_Sensor_DefaultCallback 002E                      __size_of_Button_Deviation_Update 0080  
                                   _EUSART_Initialize 068B                                     _INTERRUPT_Manager 0004  
                        ??_MTOUCH_Sensor_isCalibrated 0020                                        _OSC_Initialize 0792  
                                  ?_EUSART_Initialize 0070                                    ?_INTERRUPT_Manager 0070  
                 __end_of_MTOUCH_Sensor_RawSample_Get 068B                           _MTOUCH_Sensor_RawSample_Get 0678  
                                 ??_EUSART_Initialize 0020              MTOUCH_Sensor_SetSampledCallback@callback 0020  
                                 ??_INTERRUPT_Manager 0078                                Sensor_setActive@sensor 0020  
                                    __CFG_FOSC$INTOSC 0000     Sensor_Scanfrequency_Evaluation@best_sample_period 002F  
                       Button_Deviation_Update@button 002C                                             _TRISAbits 008C  
                               __size_of_EUSART_Write 001E              MTOUCH_Button_SetPressedCallback@callback 0020  
                          MTOUCH_Sensor_Enable@sensor 0023                                   _callback_notPressed 0042  
                 __size_of_MTOUCH_Sensor_isCalibrated 0001                        __end_of_Button_DefaultCallback 07C7  
     Sensor_Scanfrequency_Evaluation@packet_noise_Max 002A                                    _sensor_globalFlags 0060  
                        Sensor_Acq_ExecuteScan@last_a 0058                          Sensor_Acq_ExecuteScan@last_b 0056  
                            __end_of_Sensor_isEnabled 0754                        __end_of_Sensor_DefaultCallback 07C5  
                           __end_of_EUSART_Initialize 069D                          Sensor_Acq_ExecuteScan@result 0076  
                           __end_of_INTERRUPT_Manager 001A                                __end_of_OSC_Initialize 0798  
                    __size_of_Sensor_RawSample_Update 000A                                    _Sensor_Acquisition 03B1  
                                _Button_State_Pressed 0465                                        __end_of___bmul 073D  
                                 ?_Sensor_Acquisition 0070                            ??_MTOUCH_Button_Initialize 0023  
         MTOUCH_Button_SetNotPressedCallback@callback 0020                       ??_MTOUCH_Sensor_Scan_Initialize 0020  
                                        _EUSART_Write 0598                                     __size_of_TMR2_ISR 0007  
                                      __end_of_led_on 07C0                         Sensor_Acq_ExecutePacket@error 0026  
                            __end_of_Sensor_setActive 0000                           ??_Button_State_Initializing 002D  
                        ??_Button_Baseline_Get_helper 0025                                     __size_ofi1___bmul 000C  
                                         __end_ofPL50 036B                                           __end_ofPL60 00E7  
                                         __end_ofPL52 041D                                           __end_ofPL70 0206  
                                         __end_ofPL62 03B1                                           __end_ofPL54 0430  
                                         __end_ofPL80 0322                                           __end_ofPL72 00F3  
                                         __end_ofPL64 027E                                           __end_ofPL56 00DF  
                                         __end_ofPL90 0108                                           __end_ofPL82 0578  
                                         __end_ofPL74 06AF                                           __end_ofPL66 018F  
                                         __end_ofPL58 0278                                           __end_ofPL92 0465  
                                         __end_ofPL84 00FE                                           __end_ofPL76 0286  
                                         __end_ofPL68 00EE                                           __end_ofPL86 020C  
                                         __end_ofPL78 00F9                                           __end_ofPL88 0103  
                                 start_initialization 001B                               _MTOUCH_Service_Mainloop 0778  
                                         __end_of_abs 06FB                                  ??_Sensor_Acquisition 0032  
                     Button_State_Initializing@button 002C                                       ?_OSC_Initialize 0070  
                    __end_of_MTOUCH_Sensor_wasSampled 0709                                      __CFG_LPBOREN$OFF 0000  
                        __end_of_MTOUCH_Sensor_Enable 0731                                          _packet_noise 005A  
                                            ??___bmul 0021                                 ?_Button_State_Pressed 002C  
                          ??_MTOUCH_Button_ServiceAll 0034                                              ??_led_on 0021  
                                         __pdataBANK0 003C                          ??_Button_Baseline_Initialize 0027  
                                       _sample_period 004C                                    tmr2@TMR2_StopTimer 0000  
                                  _mtouch_button_init 063A                            Sensor_Sampled_Reset@sensor 0020  
                         __end_of_EUSART_Transmit_ISR 0665                                           __pbssCOMMON 0078  
                         __end_oftmr2@TMR2_StartTimer 0000                                             ___latbits 0000  
                                 ?tmr2@TMR2_StopTimer 0070                                         __pcstackBANK0 0020  
                            __size_of_TMR2_Initialize 000E                        MTOUCH_Button_ServiceAll@button 0034  
                                 Sensor_Service@error 0039                         __size_of_Sensor_Sampled_Reset 0000  
                          __size_of_EUSART_Initialize 0012                            __size_of_INTERRUPT_Manager 0016  
                             _Button_Deviation_Update 0108                             _Button_State_Initializing 036B  
                  __end_of_MTOUCH_Sensor_isCalibrated 07C6                            _MTOUCH_Sensor_isCalibrated 07C5  
                                   _Sensor_setSampled 0000                                  ??tmr2@TMR2_StopTimer 0020  
                                    ___lwdiv@dividend 0022                                     __size_of_log_info 009D  
                                    ??_Button_Service 0032                              ?_MTOUCH_Sensor_Calibrate 0070  
                                  ?_Sensor_setSampled 0070                                      ??_PIN_Initialize 0020  
                          ??_MTOUCH_Sensor_Initialize 0024                                              ?___lwdiv 0020  
                                            ?___lwmod 0027                                      ??_Sensor_Service 0038  
                          ??_Sensor_Acq_ExecutePacket 0022                                   ??_Sensor_setSampled 0020  
                                           __pswtext1 0003                                             __pswtext2 0001  
                           ??_MTOUCH_Service_Mainloop 003C                                              ?_led_off 0020  
                         __size_of_Sensor_setInactive 0000                                        __size_ofi1_abs 000E  
                      Sensor_Acq_ExecutePacket@sensor 0027                                         ??_MTOUCH_Tick 0020  
                                    ___lwdiv@quotient 0024         __end_of_MTOUCH_Sensor_NotifyInterruptOccurred 07BD  
      __size_of_MTOUCH_Sensor_NotifyInterruptOccurred 0004               ??_MTOUCH_Sensor_NotifyInterruptOccurred 0070  
              ?_MTOUCH_Sensor_NotifyInterruptOccurred 0070                 _MTOUCH_Sensor_NotifyInterruptOccurred 07B9  
                 __end_oftmr2@TMR2_LoadPeriodRegister 0000                           tmr2@TMR2_LoadPeriodRegister 0000  
                           __end_of_Sensor_setSampled 0000                                              _LATAbits 010C  
                                  _currentScannSensor 0079                               _Sensor_RawSample_Update 069D  
                       MTOUCH_Button_Reading_Get@name 0026                                             clear_ram0 078C  
                                            _PIE1bits 0091                                 i1___bmul@multiplicand 0070  
                                            _PIR1bits 0011                                ??_Button_State_Pressed 002D  
              __end_of_MTOUCH_Sensor_Sampled_ResetAll 06C1               __size_of_MTOUCH_Sensor_Sampled_ResetAll 0012  
                      _MTOUCH_Sensor_Sampled_ResetAll 06AF                              ?_MTOUCH_Sensor_SampleAll 0070  
                                            _TMR2_ISR 077F                                      EUSART_Write@byte 0020  
                            _MTOUCH_Sensor_wasSampled 06FB                            __end_of_MTOUCH_CVD_ScanA_0 0557  
                          __end_of_MTOUCH_CVD_ScanB_0 0532                              ??_Button_Baseline_Update 0020  
                                            i1___bmul 073D                    __end_of_Button_Baseline_Get_helper 05EF  
                          _Button_Baseline_Get_helper 05D3                          ??_MTOUCH_Button_Baseline_Get 002D  
                                            _WPUAbits 020C                     __size_of_TMR2_SetInterruptHandler 0005  
                           ?_TMR2_SetInterruptHandler 0020                                  _MTOUCH_Sensor_Enable 0724  
                           ??_Button_Deviation_Update 0020                                 _Button_Reading_Update 03F6  
                            ??_Sensor_setScanFunction 0020                                     ?_Sensor_isEnabled 0070  
                                   ??_TMR2_Initialize 0020                                   __end_of_MTOUCH_Tick 07C4  
                                   _MTOUCH_Initialize 07B5                       __end_of_MTOUCH_Sensor_Calibrate 07C8  
                      MTOUCH_Button_Baseline_Get@name 002D                                    ??_Sensor_isEnabled 0020  
                                  ?_MTOUCH_Initialize 0070                   __size_of_MTOUCH_Button_Baseline_Get 000E  
                  __end_of_Button_Baseline_Initialize 04E8                            _Button_Baseline_Initialize 04C1  
                            Sensor_Acquisition@sensor 0037                                   ??_MTOUCH_Initialize 0027  
                                    __size_of___lwdiv 0025                                      __size_of___lwmod 0020  
                            ?_Button_State_NotPressed 002C                                            _ANSELAbits 018C  
                                  Button_Service@name 0032                                     ?_Sensor_setActive 0070  
                                    __size_of_led_off 0003                    __size_of_MTOUCH_Button_Reading_Get 0013  
                                        _Sensor_scanA 0048                                          _Sensor_scanB 0046  
                Sensor_Scanfrequency_Evaluation@retry 0030                                       ___lwdiv@divisor 0020  
                          ?_MTOUCH_Button_Reading_Get 0023                                    ??_Sensor_setActive 0020  
                                     ___lwdiv@counter 0026                                 ?_MTOUCH_Sensor_Enable 0070  
                                            __ptext10 07C4                                              __ptext11 0039  
                                            __ptext20 03B1                                              __ptext12 0578  
                                            __ptext21 06ED                                              __ptext13 04E8  
                                            __ptext30 079D                                              __ptext22 0000  
                                            __ptext14 0665                                              __ptext31 06C1  
                                            __ptext23 0000                                              __ptext15 06DF  
                                            __ptext40 07C6                                              __ptext32 075E  
                                            __ptext24 0749                                              __ptext16 05D3  
                                            __ptext41 07C0                                              __ptext33 0430  
                                            __ptext25 02D6                                              __ptext17 0598  
                                            __ptext50 06AF                                              __ptext42 0322  
                                            __ptext34 06FB                                              __ptext26 0286  
                                            __ptext18 0000                                              __ptext51 0767  
                                            __ptext43 04C1                                              __ptext35 07C5  
                                            __ptext27 0000                                              __ptext19 069D  
                                            __ptext60 07AC                                              __ptext52 05B6  
                                            __ptext44 03F6                                              __ptext36 020C  
                                            __ptext28 0000                                              __ptext53 0000  
                                            __ptext45 0678                                              __ptext37 036B  
                                            __ptext29 0000                                              __ptext70 0650  
                                            __ptext62 077F                                              __ptext54 0724  
                                            __ptext46 0108                                              __ptext38 0465  
                                            __ptext63 018F                                              __ptext55 0609  
                                            __ptext47 07A2                                              __ptext39 07BD  
                                            __ptext64 07C8                                              __ptext56 0557  
                                            __ptext48 07B5                                              __ptext65 0709  
                                            __ptext57 0731                                              __ptext49 0770  
                                            __ptext66 073D                                              __ptext58 07C7  
                                            __ptext67 050D                                              __ptext59 07A7  
                                            __ptext68 0532                                              __ptext69 07B9  
                                    ??_OSC_Initialize 0020                             __end_of_MTOUCH_Initialize 07B9  
                           ??_Sensor_RawSample_Update 0020                   Sensor_Acq_ExecutePacket@ADCON0_temp 0023  
                 Sensor_Acq_ExecutePacket@ADCON1_temp 0024                   Sensor_Acq_ExecutePacket@ADCON2_temp 0025  
                          __size_of_Sensor_setSampled 0000                                         __size_of_main 0017  
                                            _log_info 0039                       __end_of_MTOUCH_Sensor_SampleAll 075E  
                    Sensor_Scanfrequency_Evaluation@i 0031                          Sensor_setScanFunction@sensor 0020  
                                            _txRemain 007B                                              int$flags 007E  
                            ??_Sensor_Acq_ExecuteScan 0074                    __size_of_Button_State_Initializing 003B  
                     __size_of_Button_Baseline_Update 000A                          ?_MTOUCH_Button_InitializeAll 0070  
                        ?_MTOUCH_Sensor_InitializeAll 0070                                           _OSCSTATbits 009A  
                                       _mtouch_button 00C0                                            _INTCONbits 000B  
                                       _mtouch_sensor 004D                                           _MTOUCH_Tick 07C3  
                   __end_of_MTOUCH_Button_Reading_Get 0678                                ?_Button_Reading_Update 0070  
                    Button_Deviation_Update@deviation 0028                          MTOUCH_Button_Initialize@name 0023  
                   __size_of_MTOUCH_Button_Initialize 001B                                              intlevel1 0000  
                           ?_MTOUCH_Button_Initialize 0070                           __size_of_Sensor_Acquisition 0045  
                     __size_of_Sensor_setScanFunction 0010                                      ___lwmod@dividend 0029  
             __end_of_Sensor_Scanfrequency_Evaluation 031B              __size_of_Sensor_Scanfrequency_Evaluation 0045  
                   ??_Sensor_Scanfrequency_Evaluation 0028                      ?_Sensor_Scanfrequency_Evaluation 0070  
                     _Sensor_Scanfrequency_Evaluation 02D6                                     __CFG_CLKOUTEN$OFF 0000  
                         ?_MTOUCH_Sensor_isCalibrated 0070                       __end_of_Button_State_NotPressed 0271  
                        __end_of_Sensor_Sampled_Reset 0000                                         __pstringtext1 0798  
                                       __pstringtext2 063A                 __end_of_TMR2_InterruptHandler_Default 07C9  
              __size_of_TMR2_InterruptHandler_Default 0001                         _TMR2_InterruptHandler_Default 07C8  
                  __end_of_MTOUCH_Button_Baseline_Get 06ED                            _MTOUCH_Button_Baseline_Get 06DF  
                       ??_MTOUCH_Button_InitializeAll 0025                              ??_Button_DefaultCallback 0021  
                                     ___lwmod@divisor 0027                         ??_MTOUCH_Sensor_InitializeAll 0025  
                    __size_of_MTOUCH_Sensor_Calibrate 0001                                       ___lwmod@counter 002B  
                              ??_MTOUCH_Sensor_Enable 0023                              ??_Sensor_DefaultCallback 002F  
                                    _tmr2_isr_handler 005E                     __size_of_MTOUCH_Button_ServiceAll 0009  
                           ?_MTOUCH_Button_ServiceAll 0070                         Button_State_NotPressed@button 002C  
                        __size_of_EUSART_Transmit_ISR 0015                            __size_of_MTOUCH_Initialize 0004  
                        __size_oftmr2@TMR2_StartTimer 0000                                _Button_Baseline_Update 0322  
                      Button_Baseline_Get_helper@name 0029                            ??_MTOUCH_Sensor_wasSampled 0023  
                         __size_oftmr2@TMR2_StopTimer 0000  
